<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>N-gram</title>
    <url>/whoosh/N-Gram/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>N-gram (n 元语法) 指文本中连续出现的 n 个语词，是一种基于统计语言模型的算法。</p>
<span id="more"></span>

<p>每一个字节片段称为 gram，对所有 gram 的出现频度进行统计，并且按照事先设定好的阈值进行过滤，形成关键 gram 列表，也就是这个文本的向量特征空间，列表中的每一种 gram 就是一个特征向量维度。</p>
<p>模型基于这样一种假设，第 N 个词的出现只与前面 N-1 个词相关，而与其它任何词都不相关，整句的概率就是各个词出现概率的乘积。这些概率可以通过直接从语料中统计 N 个词同时出现的次数得到。当 n 分别为 1、2、3 时，又分别称为一元语法（unigram）、二元语法（bigram）与三元语法（trigram）。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>搜索引擎（Google 或者 Baidu）、或者输入法的猜想或者提示。你在用谷歌时，输入一个或几个词，搜索框通常会以下拉菜单的形式给出几个像下图一样的备选，这些备选其实是在猜想你想要搜索的那个词串。</p>
<p>再者，当你用输入法输入一个汉字的时候，输入法通常可以联系出一个完整的词，例如我输入一个“刘”字，通常输入法会提示我是否要输入的是“刘备”。通过上面的介绍，你应该能够很敏锐的发觉，这其实是以 N-Gram 模型为基础来实现的。比如下图：</p>
<p><img src="https://pic4.zhimg.com/80/v2-46602f35680c09185c665984026459f7_720w.webp" alt="谷歌联想输入"></p>
<p>那么原理是什么呢？也就是我打入“我们”的时候，后面的“不一样”，”的爱“这些是怎么出来的，怎么排序的？</p>
<p>实际上是根据语言模型得出。假如使用的是二元语言模型预测下一个单词：</p>
<p>排序的过程就是：</p>
<p>p(”不一样“|”我们”)&gt;p(”的爱“|”我们”)&gt;p(”相爱吧“|”我们”)&gt;…….&gt;p(“这一家”|”我们“)，这些概率值的求法和上面提到的完全一样，数据的来源可以是用户搜索的 log。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 01 - 快速开始</title>
    <url>/whoosh/01-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<p>Whoosh 是一个用于索引文本然后搜索索引的一组类和函数。它允许你为你的内容开发自定义搜索引擎。 例如，如果你正在创建博客软件，你可以使用 Whoosh 添加搜索功能以允许用户搜索博客条目。</p>
<span id="more"></span>

<h2 id="快速介绍"><a href="#快速介绍" class="headerlink" title="快速介绍"></a>快速介绍</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.index <span class="keyword">import</span> create_in</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>schema = Schema(title=TEXT(stored=<span class="literal">True</span>), path=ID(stored=<span class="literal">True</span>), content=TEXT)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ix = create_in(<span class="string">&quot;indexdir&quot;</span>, schema)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>writer = ix.writer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>writer.add_document(title=<span class="string">u&quot;First document&quot;</span>, path=<span class="string">u&quot;/a&quot;</span>,</span><br><span class="line"><span class="meta">... </span>                    content=<span class="string">u&quot;This is the first document we&#x27;ve added!&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>writer.add_document(title=<span class="string">u&quot;Second document&quot;</span>, path=<span class="string">u&quot;/b&quot;</span>,</span><br><span class="line"><span class="meta">... </span>                    content=<span class="string">u&quot;The second one is even more interesting!&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>writer.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> searcher:</span><br><span class="line"><span class="meta">... </span>    query = QueryParser(<span class="string">&quot;content&quot;</span>, ix.schema).parse(<span class="string">&quot;first&quot;</span>)</span><br><span class="line"><span class="meta">... </span>    results = searcher.search(query)</span><br><span class="line"><span class="meta">... </span>    results[<span class="number">0</span>]</span><br><span class="line">...</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>: <span class="string">u&quot;First document&quot;</span>, <span class="string">&quot;path&quot;</span>: <span class="string">u&quot;/a&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Index-和-Schema-对象"><a href="#Index-和-Schema-对象" class="headerlink" title="Index 和 Schema 对象"></a><code>Index</code> 和 <code>Schema</code> 对象</h2><p>要开始使用 Whoosh，你需要一个索引 (Index) 对象。 第一次创建索引时，必须定义索引的模式 (Schema)。 该模式列出了索引中的字段。 字段 (Field) 是索引中每个文档的一条信息，例如它的标题或文本内容。 一个字段可以被索引（意味着它可以被搜索）和&#x2F;或存储（意味着被索引的值与结果一起返回；这对于标题等字段很有用）。</p>
<p>该模式有两个字段，<code>title</code> 和 <code>content</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> Schema, TEXT</span><br><span class="line">schema = Schema(title=TEXT, content=TEXT)</span><br></pre></td></tr></table></figure>

<p>创建索引 (Index) 时，你只需要创建一次模式 (Schema)。 模式被 <a href="#TODO">pickled</a> 并与索引一起存储。</p>
<p>创建 <code>Schema</code> 对象时，你使用关键字参数将字段名称映射到字段类型。 字段列表及其类型定义了你要索引的内容和可搜索的内容。 Whoosh 带有一些非常有用的预定义字段类型，你可以轻松创建自己的字段类型。</p>
<p><code>whoosh.fields.ID</code><br>这种类型只是将字段的整个值作为一个单元进行索引（并可选地存储）（也就是说，它不会将其分解为单个单词）。 这对于文件路径、URL、日期、类别等字段很有用。</p>
<p><code>whoosh.fields.STORED</code><br>该字段与文档一起存储，但未编入索引。 此字段类型未编入索引且不可搜索。 这对于要在搜索结果中向用户显示的文档信息很有用。</p>
<p><code>whoosh.fields.KEYWORD</code><br>此类型专为以空格或逗号分隔的关键字而设计。 这种类型是索引和可搜索的（并且可以选择存储）。 为了节省空间，它不支持短语搜索。</p>
<p><code>whoosh.fields.TEXT</code><br>这种类型用于正文。 它索引（并可选地存储）文本并存储词条位置以允许短语搜索。</p>
<p><code>whoosh.fields.NUMERIC</code><br>这种类型用于数字。 你可以存储整数或浮点数。</p>
<p><code>whoosh.fields.BOOLEAN</code><br>此类型用于布尔 (true&#x2F;false) 值。</p>
<p><code>whoosh.fields.DATETIME</code><br>此类型用于日期时间对象。 有关详细信息，请参阅索引和解析日期&#x2F;时间。</p>
<p><code>whoosh.fields.NGRAM</code> 和 <code>whoosh.fields.NGRAMWORDS</code><br>这些类型将字段文本或单个词条分解为 N-gram。 有关详细信息，请参阅 <a href="#TODO">索引和搜索 N-gram</a>。<br>（作为一种快捷方式，如果你不需要向字段类型传递任何参数，你可以只提供类名，Whoosh 将为你实例化该对象。）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">from</span> whoosh.index <span class="keyword">import</span> create_in</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;index&quot;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&quot;index&quot;</span>)</span><br><span class="line">ix = create_in(<span class="string">&quot;index&quot;</span>, schema)</span><br></pre></td></tr></table></figure>

<p>（在低级别，这会创建一个存储对象来包含索引。<code>Storage</code> 存储对象表示将存储索引的介质。通常这将是 <code>FileStorage</code>，它将索引存储为目录中的一组文件。）</p>
<p>创建索引后，可以使用 <code>open_dir</code> 便捷函数打开它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.index <span class="keyword">import</span> open_dir</span><br><span class="line"></span><br><span class="line">ix = open_dir(<span class="string">&quot;index&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="IndexWriter-对象"><a href="#IndexWriter-对象" class="headerlink" title="IndexWriter 对象"></a>IndexWriter 对象</h2><p>好的，我们已经有了一个 <code>Index</code> 对象，现在我们可以开始添加文档了。 <code>Index</code> 对象的 <code>writer()</code> 方法返回一个 <code>IndexWriter</code> 对象，它允许你将文档添加到索引。 <code>IndexWriter</code> 的 <code>add_document(**kwargs)</code> 方法接受关键字参数，其中字段名称映射到一个值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = ix.writer()</span><br><span class="line">writer.add_document(title=<span class="string">u&quot;My document&quot;</span>, content=<span class="string">u&quot;This is my document!&quot;</span>,</span><br><span class="line">                    path=<span class="string">u&quot;/a&quot;</span>, tags=<span class="string">u&quot;first short&quot;</span>, icon=<span class="string">u&quot;/icons/star.png&quot;</span>)</span><br><span class="line">writer.add_document(title=<span class="string">u&quot;Second try&quot;</span>, content=<span class="string">u&quot;This is the second example.&quot;</span>,</span><br><span class="line">                    path=<span class="string">u&quot;/b&quot;</span>, tags=<span class="string">u&quot;second short&quot;</span>, icon=<span class="string">u&quot;/icons/sheep.png&quot;</span>)</span><br><span class="line">writer.add_document(title=<span class="string">u&quot;Third time&#x27;s the charm&quot;</span>, content=<span class="string">u&quot;Examples are many.&quot;</span>,</span><br><span class="line">                    path=<span class="string">u&quot;/c&quot;</span>, tags=<span class="string">u&quot;short&quot;</span>, icon=<span class="string">u&quot;/icons/book.png&quot;</span>)</span><br><span class="line">writer.commit()</span><br></pre></td></tr></table></figure>

<p>两个重要说明：</p>
<ul>
<li>你不必为每个字段都填写一个值。 Whoosh 不关心你是否遗漏了文档中的某个字段。<br>索引文本字段必须传递一个 unicode 值。 存储但未索引的字段（<code>STORED</code> 字段类型）可以传递给任何 <a href="#TODO">pickle-able 对象</a>。</li>
<li>如果你有一个既被索引又被存储的文本字段，你可以索引一个 unicode 值，但在必要时存储一个不同的对象（通常不是，但有时这真的很有用）使用这个技巧：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.add_document(title=<span class="string">u&quot;Title to be indexed&quot;</span>, _stored_title=<span class="string">u&quot;Stored title&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在 <code>IndexWriter</code> 上调用 <code>commit()</code> 将添加的文档保存到索引中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.commit()</span><br></pre></td></tr></table></figure>

<p>有关详细信息，请参阅 <a href="5_%E5%A6%82%E4%BD%95%E7%B4%A2%E5%BC%95%E6%96%87%E6%A1%A3.md">如何索引文档</a>。</p>
<p>一旦你的文档提交到索引，你就可以搜索它们。</p>
<h2 id="Searcher对象"><a href="#Searcher对象" class="headerlink" title="Searcher对象"></a><code>Searcher</code>对象</h2><p>要开始搜索索引，我们需要一个 <code>Searcher</code> 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">searcher = ix.searcher()</span><br></pre></td></tr></table></figure>

<p>你通常希望使用 <code>with</code> 语句打开搜索器 (Searcher)，以便在你完成搜索后自动关闭搜索器（搜索器对象代表许多打开的文件，因此如果你没有明确关闭它们并且系统也没有快速回收，你可能耗尽文件句柄）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> searcher:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>这当然等同于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    searcher = ix.searcher()</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    searcher.close()</span><br></pre></td></tr></table></figure>

<p><code>Searcher</code> 的 <code>search()</code> 方法接受一个 <code>Query</code> 对象。 你可以直接构造查询对象或使用查询解析器来解析查询字符串。</p>
<p>例如，此查询将匹配在 “content” 字段中同时包含 “apple” 和 “bear” 的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接构造查询对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> whoosh.query <span class="keyword">import</span> *</span><br><span class="line">myquery = And([Term(<span class="string">&quot;content&quot;</span>, <span class="string">u&quot;apple&quot;</span>), Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;bear&quot;</span>)])</span><br></pre></td></tr></table></figure>

<p>要解析查询字符串，你可以使用 <code>qparser</code> 模块中的默认查询解析器。 <code>QueryParser</code> 构造函数的第一个参数是要搜索的默认字段。 这通常是 “正文” 字段。 第二个可选参数是用于理解如何解析字段的模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解析查询字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</span><br><span class="line">parser = QueryParser(<span class="string">&quot;content&quot;</span>, ix.schema)</span><br><span class="line">myquery = parser.parse(querystring)</span><br></pre></td></tr></table></figure>

<p>一旦有了 <code>Searcher</code> 和查询对象，就可以使用 <code>Searcher</code> 的 <code>search()</code> 方法来运行查询并获取 <code>Results</code> 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>results = searcher.search(myquery)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">len</span>(results))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(results[<span class="number">0</span>])</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;Second try&quot;</span>, <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/b&quot;</span>, <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;/icons/sheep.png&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>默认的 <code>QueryParser</code> 实现了一种与 Lucene 非常相似的查询语言。 它允许你使用 <code>AND</code> 或 <code>OR</code> 连接词条，使用 <code>NOT</code> 删除词条，将词条组合成带括号的子句，执行范围、前缀和通配符查询，并指定要搜索的不同字段。 默认情况下，它将子句与 <code>AND</code> 连接在一起（因此默认情况下，你指定的所有词条必须在文档中才能匹配）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(parser.parse(<span class="string">u&quot;render shade animate&quot;</span>))</span><br><span class="line">And([Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;render&quot;</span>), Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;shade&quot;</span>), Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;animate&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(parser.parse(<span class="string">u&quot;render OR (title:shade keyword:animate)&quot;</span>))</span><br><span class="line">Or([Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;render&quot;</span>), And([Term(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;shade&quot;</span>), Term(<span class="string">&quot;keyword&quot;</span>, <span class="string">&quot;animate&quot;</span>)])])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(parser.parse(<span class="string">u&quot;rend*&quot;</span>))</span><br><span class="line">Prefix(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;rend&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Whoosh 包含用于处理搜索结果的额外功能，例如</p>
<ul>
<li>按索引字段的值而不是相关性对结果进行排序。</li>
<li>在原始文档的摘录中高亮显示搜索词。</li>
<li>根据找到的前几个文档扩展查询词。</li>
<li>对结果进行分页（例如“显示结果 1-20，第 1 页，共 4 页”）。</li>
</ul>
<p>请参阅 <a href="6_%E5%A6%82%E4%BD%95%E6%90%9C%E7%B4%A2.md">如何搜索</a> 以获取更多信息。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 02 - 简介</title>
    <url>/whoosh/02-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="关于-Whoosh"><a href="#关于-Whoosh" class="headerlink" title="关于 Whoosh"></a>关于 Whoosh</h2><p>Whoosh 由 Matt Chaput 创建。 它最初是一个快速而杂乱 (dirty) 的搜索服务器，用于搜索 Houdini 3D 动画软件包的在线文档。 Side Effects Software 慷慨地允许 Matt 开源代码，以防它可能对需要非常灵活或纯 Python 搜索引擎（或两者！）的任何其他人有用。</p>
<span id="more"></span>

<ul>
<li>Whoosh 速度很快，但只使用纯 Python，因此它可以在任何 Python 运行的地方运行，而不需要编译器。</li>
<li>默认情况下，Whoosh 使用 Okapi BM25F 排名功能，但与大多数东西一样，排名功能可以轻松定制。</li>
<li>与许多其他搜索库相比，Whoosh 创建的索引相当小。</li>
<li>Whoosh 中的所有索引文本都必须是 unicode。</li>
<li>Whoosh 允许你存储带有索引文档的任意 Python 对象。</li>
</ul>
<h2 id="Whoosh-是什么？"><a href="#Whoosh-是什么？" class="headerlink" title="Whoosh 是什么？"></a>Whoosh 是什么？</h2><p>Whoosh 是一个快速、纯 Python 的搜索引擎库。</p>
<p>Whoosh 的主要设计动力是它是纯 Python。 你应该能够在任何可以使用 Python 的地方使用 Whoosh，不需要编译器或 Java。</p>
<p>与其祖先之一 Lucene 一样，Whoosh 并不是一个真正的搜索引擎，它是一个用于创建搜索引擎的程序员库 [1]。</p>
<p>实际上，Whoosh 的任何重要行为都不是硬编码的。 文本索引、每个字段中每个词条存储的信息级别、搜索查询的解析、允许的查询类型、评分算法等都是可定制的、可替换的和可扩展的。</p>
<p>[1] 当然可以在 Whoosh 之上构建交钥匙搜索引擎，就像 Nutch 和 Solr 使用 Lucene 一样。</p>
<h2 id="Whoosh-能为你做什么？"><a href="#Whoosh-能为你做什么？" class="headerlink" title="Whoosh 能为你做什么？"></a>Whoosh 能为你做什么？</h2><p>Whoosh 让你可以索引自由格式或结构化文本，然后根据简单或复杂的搜索条件快速找到匹配的文档。</p>
<h2 id="获得有关-Whoosh-的帮助"><a href="#获得有关-Whoosh-的帮助" class="headerlink" title="获得有关 Whoosh 的帮助"></a>获得有关 Whoosh 的帮助</h2><p>你可以在 Whoosh Bitbucket 页面上查看未解决的问题，并在 Whoosh 邮件列表上获得帮助。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 03 - 词汇表</title>
    <url>/whoosh/03-%E8%AF%8D%E6%B1%87%E8%A1%A8/</url>
    <content><![CDATA[<p><code>Analysis</code><br>将字段的文本分解为要索引的单个词条 (Term) 的过程。这包括将文本标记为词条 (Term)，然后选择性地过滤标记化的词条（例如，小写和删除停用词）。 Whoosh 包括几个不同的分析器。</p>
<span id="more"></span>

<p><code>Corpus</code><br>你正在编制索引的文档集。</p>
<p><code>Documents</code><br>你希望使其可搜索的个别内容。 “文档” 一词可能意味着文件，但数据源实际上可以是任何东西——内容管理系统中的文章、博客系统中的博客文章、非常大的文件块、从 SQL 查询返回的行、来自邮箱文件，或其他任何东西。当你从 Whoosh 获得搜索结果时，结果是一个文档列表，无论 “文档” 在你的搜索引擎中意味着什么。</p>
<p><code>Fields</code><br>每个文档都包含一组字段 (Fields)。 典型的字段可能是“标题”、“内容”、“url”、“关键字”、“状态”、“日期”等。字段可以被索引（因此它们是可搜索的）和&#x2F;或与文档一起存储。 存储字段使其在搜索结果中可用。 例如，你通常希望存储“标题”字段，以便你的搜索结果可以显示它。</p>
<p><code>Forward index</code><br>列出每个文档和文档中出现的单词的表格。 Whoosh 允许你存储词向量 (term vectors)，这是一种前向索引 (Forward index)。</p>
<p><code>Indexing</code><br>检查语料库中的文档并将其添加到反向索引 (Reverse index) 的过程。</p>
<p><code>Postings</code><br>反向索引 (Reverse index) 列出了语料库 (corpus) 中的每个单词，对于每个单词，还有该单词出现的文档列表，以及一些可选信息（例如该单词在该文档中出现的次数）。 列表中的这些项目，包含文档编号和任何额外信息，称为帖子 (Postings)。 在 Whoosh 中，存储在帖子中的信息可以针对每个字段进行自定义。</p>
<p><code>Reverse index</code><br>基本上是一个表格，列出了语料库 (corpus) 中的每个单词，以及每个单词出现的文档列表。 它可能更复杂（索引还可以列出单词在每个文档中出现的次数、出现的位置等），但这就是它的基本工作原理。</p>
<p><code>Schema</code><br>Whoosh 要求你在开始索引 (indexing) 之前指定索引 (index) 的字段 (fields) 。模式 (Schema) 将字段名称与字段的元数据相关联，例如发布的格式以及字段的内容是否存储在索引中。</p>
<p><code>Term vector</code><br>某个文档中某个字段的正向索引。 你可以在模式 (Schema) 中指定给定字段应存储词向量 (term vectors)。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 04 - 模式设计</title>
    <url>/whoosh/04-%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="关于模式和字段"><a href="#关于模式和字段" class="headerlink" title="关于模式和字段"></a>关于模式和字段</h2><p>模式指定索引中文档的字段。</p>
<p>每个文档可以有多个字段，比如标题、内容、url、日期等。</p>
<span id="more"></span>

<p>一些字段可以被索引，一些字段可以与文档一起存储，以便字段值在搜索结果中可用。一些字段将被索引和存储。</p>
<p>模式是文档中所有可能字段的集合。每个单独的文档可能只使用模式中可用字段的一个子集。</p>
<p>例如，用于索引电子邮件的简单模式可能包含 <code>from_addr</code>、<code>to_addr</code>、<code>subject</code>、<code>body</code> 和 <code>attachments</code> 等字段 ，其中 <code>attachments</code> 字段列出了电子邮件附件的名称。对于没有附件的电子邮件，你可以省略附件字段。</p>
<h2 id="内置字段类型"><a href="#内置字段类型" class="headerlink" title="内置字段类型"></a>内置字段类型</h2><p>Whoosh 提供了一些有用的预定义字段类型：</p>
<p><code>whoosh.fields.TEXT</code><br>这种类型用于正文。它索引（并可选地存储）文本并存储词条位置以允许短语搜索。</p>
<p><code>TEXT</code> 字段默认使用 <code>StandardAnalyzer</code> 分析器。要指定不同的分析器，请在构造函数中使用 <code>analyzer</code> 参数，例如 <code>TEXT(analyzer=analysis.StemmingAnalyzer())</code>. 请参阅 <a href="http">关于分析器</a>。</p>
<p>默认情况下，<code>TEXT</code> 字段存储每个索引词条的位置信息，以允许你搜索短语。如果你不需要能够在文本字段中搜索短语，你可以关闭存储词条位置以节省空间。使用 <code>TEXT(phrase=False)</code>。</p>
<p>默认情况下，<code>TEXT</code> 不存储字段。通常你不想将正文存储在搜索索引中。通常你可以根据搜索结果阅读或链接到索引文档本身，因此你不需要将它们的文本存储在搜索索引中。但是，在某些情况下它可能很有用（请参阅 <a href="http">如何创建高亮显示的搜索结果摘录</a>）。使用 <code>TEXT(stored=True)</code> 指定将文本存储在索引中。</p>
<p><code>whoosh.fields.KEYWORD</code><br>此字段类型专为以空格或逗号分隔的关键字而设计。这种类型是索引和可搜索的（并且可以选择存储）。为了节省空间，它不支持短语搜索。</p>
<p>要将字段的值存储在索引中，请在构造函数中使用 <code>stored=True</code> 。要在索引关键字之前自动将关键字小写，请使用 <code>lowercase=True</code>.</p>
<p>默认情况下，关键字以空格分隔。要改为用逗号分隔关键字（以允许关键字包含空格），请使用 <code>commas=True</code>.</p>
<p>如果你的用户需要使用 <code>KEYWORD</code> 字段进行搜索，请使用 <code>scorable=True</code>.</p>
<p><code>whoosh.fields.ID</code><br>字段 <code>ID</code> 类型只是将字段的整个值作为一个单元进行索引（并可选地存储）也就是说，它不会将其分解为单独的词条。这种类型的字段不存储频率信息，因此它非常紧凑，但对于评分不是很有用。</p>
<p>将 <code>ID</code> 用于 URL 或路径（文档的 URL 或文件路径）、日期、类别等字段，这些字段的值必须作为一个整体来处理，并且每个文档只能有一个值使用此类型。</p>
<p>默认情况下，<code>ID</code> 字段不存储。使用 <code>ID(stored=True)</code> 指定字段的值应与文档一起存储以用于搜索结果。例如，你可能希望存储 URL 字段的值，以便你可以在搜索结果中提供指向原始内容的链接。</p>
<p><code>whoosh.fields.STORED</code><br>该字段与文档一起存储，但未编入索引且不可搜索。这对于你希望在搜索结果中向用户显示但不需要能够搜索到的文档信息很有用。</p>
<p><code>whoosh.fields.NUMERIC</code><br>该字段以紧凑、可排序的格式存储整数、长整数或浮点数。</p>
<p><code>whoosh.fields.DATETIME</code><br>该字段以紧凑、可排序的格式存储日期时间对象。</p>
<p><code>whoosh.fields.BOOLEAN</code><br>这个简单的字段索引布尔值并允许用户搜索 <code>yes</code>, <code>no</code>, <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>,<code>t</code> 或 <code>f</code>。</p>
<p><code>whoosh.fields.NGRAM</code><br>待定。</p>
<p>专家用户可以创建自己的字段类型。</p>
<h2 id="创建模式"><a href="#创建模式" class="headerlink" title="创建模式"></a>创建模式</h2><p>创建一个模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> Schema, TEXT, KEYWORD, ID, STORED</span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> StemmingAnalyzer</span><br><span class="line"></span><br><span class="line">schema = Schema(from_addr=ID(stored=<span class="literal">True</span>),</span><br><span class="line">                to_addr=ID(stored=<span class="literal">True</span>),</span><br><span class="line">                subject=TEXT(stored=<span class="literal">True</span>),</span><br><span class="line">                body=TEXT(analyzer=StemmingAnalyzer()),</span><br><span class="line">                tags=KEYWORD)</span><br></pre></td></tr></table></figure>

<p>如果你不需要为预定义字段构造函数指定任何参数，则可以省略括号（例如，使用 <code>fieldname=TEXT</code> 替代 <code>fieldname=TEXT()</code>）。Whoosh 将为你实例化该类。</p>
<p>或者，你可以使用 <code>SchemaClass</code> 基类以声明方式创建模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> SchemaClass, TEXT, KEYWORD, ID, STORED</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySchema</span>(<span class="title class_ inherited__">SchemaClass</span>):</span><br><span class="line">    path = ID(stored=<span class="literal">True</span>)</span><br><span class="line">    title = TEXT(stored=<span class="literal">True</span>)</span><br><span class="line">    content = TEXT</span><br><span class="line">    tags = KEYWORD</span><br></pre></td></tr></table></figure>

<p>你可以将声明类传递给实例 <code>create_in()</code> 或 <code>create_index()</code> 代替 <code>Schema</code> 实例。</p>
<h2 id="索引后修改架构"><a href="#索引后修改架构" class="headerlink" title="索引后修改架构"></a>索引后修改架构</h2><p>创建索引后，你可以使用 <code>add_field()</code> 和 <code>remove_field()</code> 方法向模式添加或删除字段。这些方法在 <code>Writer</code> 对象上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = ix.writer()</span><br><span class="line">writer.add_field(<span class="string">&quot;fieldname&quot;</span>, fields.TEXT(stored=<span class="literal">True</span>))</span><br><span class="line">writer.remove_field(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">writer.commit()</span><br></pre></td></tr></table></figure>

<p>（如果你要修改模式并使用同一编写器添加文档，则必须在添加任何文档之前调用 <code>add_field()</code> 或 <code>remove_field</code>）</p>
<p>为了方便起见，这些方法也在 <code>Index</code> 对象上，但是当你在 <code>Index</code> 上调用它们时 ，<code>Index</code> 对象只是创建编写器，在其上调用相应的方法，然后提交，因此如果你想要添加或删除多个字段，自己创建编写器效率更高：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ix.add_field(<span class="string">&quot;fieldname&quot;</span>, fields.KEYWORD)</span><br></pre></td></tr></table></figure>

<p>在 <code>filedb</code> 后端，删除字段只是简单的从架构中删除该字段 —— 索引不会变小，有关该字段的数据将保留在索引中，直到你进行优化。优化将压缩索引，同时删除对已删除字段的引用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = ix.writer()</span><br><span class="line">writer.add_field(<span class="string">&quot;uuid&quot;</span>, fields.ID(stored=<span class="literal">True</span>))</span><br><span class="line">writer.remove_field(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">writer.commit(optimize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>因为数据是以字段名存储在磁盘上的，所以在没有优化中间索引的情况下，不要添加与已删除字段同名的新字段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = ix.writer()</span><br><span class="line">writer.delete_field(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="comment"># 不要这样做！！！</span></span><br><span class="line">writer.add_field(<span class="string">&quot;path&quot;</span>, fields.KEYWORD)</span><br></pre></td></tr></table></figure>

<p>（Whoosh 的未来版本可能会自动防止此错误。）</p>
<h2 id="动态字段"><a href="#动态字段" class="headerlink" title="动态字段"></a>动态字段</h2><p>动态字段让你可以将字段类型与任意 “glob”（包含<code>*</code>、<code>?</code>、<code>/</code>、<code>[abc]</code> 等通配符的名称）类型字段相匹配。</p>
<p>你可以使用 <code>add()</code> 方法将动态字段添加到 <code>glob</code> 关键字设置为 <code>True</code> 的新模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = fields.Schema(...)</span><br><span class="line"><span class="comment"># 任何以 &quot;_d&quot; 结尾的字段名，都将被存储为 DATETIME 类型</span></span><br><span class="line">schema.add(<span class="string">&quot;*_d&quot;</span>, fields.DATETIME(stored=<span class="literal">True</span>), glob=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>要在现有索引上设置动态字段，与添加常规字段相同，使用 <code>IndexWriter.add_field</code> 方法，但 <code>glob</code> 关键字参数需要设置为 <code>True</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = ix.writer()</span><br><span class="line">writer.add_field(<span class="string">&quot;*_d&quot;</span>, fields.DATETIME(stored=<span class="literal">True</span>), glob=<span class="literal">True</span>)</span><br><span class="line">writer.commit()</span><br></pre></td></tr></table></figure>

<p>要删除动态字段，请对以 glob 作为名称的字段使用 <code>IndexWriter.remove_field()</code> 方法 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = ix.writer()</span><br><span class="line">writer.remove_field(<span class="string">&quot;*_d&quot;</span>)</span><br><span class="line">writer.commit()</span><br></pre></td></tr></table></figure>

<p>例如，要允许文档包含以 <code>_id</code> 结尾的任何字段名称并将其与 <code>ID</code> 字段类型相关联：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = fields.Schema(path=fields.ID)</span><br><span class="line">schema.add(<span class="string">&quot;*_id&quot;</span>, fields.ID, glob=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">ix = index.create_in(<span class="string">&quot;myindex&quot;</span>, schema)</span><br><span class="line"></span><br><span class="line">w = ix.writer()</span><br><span class="line">w.add_document(path=<span class="string">u&quot;/a&quot;</span>, test_id=<span class="string">u&quot;alfa&quot;</span>)</span><br><span class="line">w.add_document(path=<span class="string">u&quot;/b&quot;</span>, class_id=<span class="string">u&quot;MyClass&quot;</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">w.commit()</span><br><span class="line"></span><br><span class="line">qp = qparser.QueryParser(<span class="string">&quot;path&quot;</span>, schema=schema)</span><br><span class="line">q = qp.parse(<span class="string">u&quot;test_id:alfa&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    results = s.search(q)</span><br></pre></td></tr></table></figure>

<h2 id="高级模式设置"><a href="#高级模式设置" class="headerlink" title="高级模式设置"></a>高级模式设置</h2><h3 id="字段提升-Field-boosts"><a href="#字段提升-Field-boosts" class="headerlink" title="字段提升 (Field boosts)"></a>字段提升 (Field boosts)</h3><p>你可以为字段指定字段提升。这是一个乘数，适用于在该字段中找到的任何词条的分数。例如，要使 <code>title</code> 字段中的词条得分是 <code>body</code> 字段中词条得分的两倍：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = Schema(title=TEXT(field_boost=<span class="number">2.0</span>), body=TEXT)</span><br></pre></td></tr></table></figure>

<h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><p>上面列出的预定义字段类型是 <code>fields.FieldType</code> 的子类。 <code>FieldType</code> 是一个非常简单的类。它的属性包含定义字段行为的信息。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>format</td>
<td>fields.Format</td>
<td>定义字段记录关于每个词条的信息类型，以及信息如何存储在磁盘上。</td>
</tr>
<tr>
<td>vector</td>
<td>fields.Format</td>
<td>可选：如果已定义，则为该字段存储每个文档的前向索引信息的格式。</td>
</tr>
<tr>
<td>scorable</td>
<td>bool</td>
<td>如果为 <code>True</code>，则每个文档中字段存储在索引中的长度（词条的数量）。有点命名错误，因为字段长度不是所有评分所必需的。但是需要字段长度才能从 BM25F 获得正确的结果。</td>
</tr>
<tr>
<td>stored</td>
<td>bool</td>
<td>如果为 <code>True</code>，则此字段的值存储在索引中。</td>
</tr>
<tr>
<td>unique</td>
<td>bool</td>
<td>如果为 <code>True</code>，则当用户在 <code>IndexWriter</code> 上调用 <code>document_update()</code> 时，此字段的值可用于替换具有相同值的文档。</td>
</tr>
</tbody></table>
<p>大多数预定义字段类型的构造函数都具有可让你自定义这些部分的参数。例如：</p>
<ul>
<li>大多数预定义的字段类型都可以在构造函数中使用 <code>FieldType.stored</code> 参数。</li>
<li><code>TEXT()</code> 构造函数可以使用 <code>analyzer</code> 参数设置格式对象。</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>对象 <code>Format</code> 定义字段记录关于每个词条的信息类型，以及信息如何在磁盘上存储。</p>
<p>例如，<code>Existence</code> 格式将存储这样的帖子 (postings)：</p>
<table>
<thead>
<tr>
<th>Doc</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td></td>
</tr>
<tr>
<td>20</td>
<td></td>
</tr>
<tr>
<td>30</td>
<td></td>
</tr>
</tbody></table>
<p>而 <code>Positions</code> 格式将存储这样的帖子：</p>
<table>
<thead>
<tr>
<th>Doc</th>
<th>Positions</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>[1,5,23]</td>
</tr>
<tr>
<td>20</td>
<td>[45]</td>
</tr>
<tr>
<td>30</td>
<td>[7,12]</td>
</tr>
</tbody></table>
<p>索引代码将字段的 <code>unicode</code> 字符串传递给字段的 <code>Format</code> 对象。该 <code>Format</code> 对象调用其分析器（请参阅文本分析）将字符串分解为标记，然后对有关每个标记的信息进行编码。</p>
<p>Whoosh 附带以下预定义格式。</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Stored</td>
<td>存储但未索引的字段的“null”格式。</td>
</tr>
<tr>
<td>Existence</td>
<td>只记录词是否在文档中，而不存储词频。对于标识符字段（例如路径或 ID）和 “tag” 类型字段很有用，这些字段的频率应始终为 0 或 1</td>
</tr>
<tr>
<td>Frequency</td>
<td>存储每个词条在每个文档中出现的次数。</td>
</tr>
<tr>
<td>Positions</td>
<td>存储每个词条在每个文档中出现的次数以及出现的位置。</td>
</tr>
</tbody></table>
<p><code>STORED</code> 字段类型使用 <code>Stored</code> 格式（什么都不做，所以 <code>STORED</code> 字段没有索引）。</p>
<p>类型 <code>ID</code> 使用 <code>Existence</code> 格式。</p>
<p>类型 <code>KEYWORD</code> 使用 <code>Frequency</code> 格式。</p>
<p>类型 <code>TEXT</code> 如果使用 <code>phrase=True</code>（默认值）实例化则使用 <code>Positions</code> 格式 ，如果 <code>phrase=False</code> 则使用 <code>Frequency</code> 格式.</p>
<p>此外，为方便专家用户而实现了以下格式，但目前尚未在 Whoosh 中使用：</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DocBoosts</td>
<td>与 Existence 类似，但额外存储每个文档的提升(boosts)</td>
</tr>
<tr>
<td>Characters</td>
<td>与 Positions 类似，但额外存储每个词条的开始和结束字符索引</td>
</tr>
<tr>
<td>PositionBoosts</td>
<td>与 Positions 类似，但额外存储每个位置的提升</td>
</tr>
<tr>
<td>CharacterBoosts</td>
<td>与 Positions 类似，但额外存储每个词条和每个位置提升的开始和结束字符索引</td>
</tr>
</tbody></table>
<h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><p>主索引是倒排索引。它将词条映射到它们出现的文档。存储前向索引（也称为词向量）有时也很有用，它将文档映射到出现在其中的词条。</p>
<p>例如，想象一个字段的倒排索引：</p>
<table>
<thead>
<tr>
<th>Term</th>
<th>Postings</th>
</tr>
</thead>
<tbody><tr>
<td>apple</td>
<td><code>[(doc=1, freq=2), (doc=2, freq=5), (doc=3, freq=1)]</code></td>
</tr>
<tr>
<td>bear</td>
<td><code>[(doc=2, freq=7)]</code></td>
</tr>
</tbody></table>
<p>相应的前向索引或词向量将是：</p>
<table>
<thead>
<tr>
<th>Doc</th>
<th>Postings</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>[(text=apple, freq=2)]</code></td>
</tr>
<tr>
<td>2</td>
<td><code>[(text=apple, freq=5), (text=&#39;bear&#39;, freq=7)]</code></td>
</tr>
<tr>
<td>3</td>
<td><code>[(text=apple, freq=1)]</code></td>
</tr>
</tbody></table>
<p>如果设置 <code>FieldType.vector</code> 为一个 <code>Format</code> 对象，索引代码将使用该 <code>Format</code> 对象来存储有关每个文档中的词条的信息。目前默认情况下 <code>Whoosh</code> 根本不使用词条向量，但它们可供希望实现自己的字段类型的专家用户使用。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 05 - 如何为文档编制索引</title>
    <url>/whoosh/05-%E5%A6%82%E4%BD%95%E7%B4%A2%E5%BC%95%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h2 id="创建索引对象"><a href="#创建索引对象" class="headerlink" title="创建索引对象"></a>创建索引对象</h2><p>要在目录中创建索引，请使用 <code>index.create_in</code> ：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, os.path</span><br><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;indexdir&quot;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line"></span><br><span class="line">ix = index.create_in(<span class="string">&quot;indexdir&quot;</span>, schema)</span><br></pre></td></tr></table></figure>

<p>要打开目录中的现有索引，请使用 <code>index.open_dir</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> whoosh.index <span class="keyword">as</span> index</span><br><span class="line"></span><br><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这些是简便方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.filedb.filestore <span class="keyword">import</span> FileStorage</span><br><span class="line">storage = FileStorage(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个索引</span></span><br><span class="line">ix = storage.create_index(schema)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个已存在的索引</span></span><br><span class="line">storage.open_index()</span><br></pre></td></tr></table></figure>

<p>创建索引时使用的模式 (schema) 将随索引一起存储。</p>
<p>你可以使用 <code>indexname</code> 关键字将多个索引保留在同一目录中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用简便函数</span></span><br><span class="line">ix = index.create_in(<span class="string">&quot;indexdir&quot;</span>, schema=schema, indexname=<span class="string">&quot;usages&quot;</span>)</span><br><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>, indexname=<span class="string">&quot;usages&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Storage 对象</span></span><br><span class="line">ix = storage.create_index(schema, indexname=<span class="string">&quot;usages&quot;</span>)</span><br><span class="line">ix = storage.open_index(indexname=<span class="string">&quot;usages&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="清除索引"><a href="#清除索引" class="headerlink" title="清除索引"></a>清除索引</h2><p>在一个已存在索引的目录中调用 <code>index.create_in</code> 将清除索引的当前内容。</p>
<p>要测试目录当前是否包含有效索引，请使用 <code>index.exists_in</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exists = index.exists_in(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line">usages_exists = index.exists_in(<span class="string">&quot;indexdir&quot;</span>, indexname=<span class="string">&quot;usages&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>（或者，你可以简单地从目录中删除索引的文件，例如如果目录中只有一个索引，请使用 <code>shutil.rmtree</code> 删除目录，然后重新创建它。）</p>
<h2 id="为文档创建索引"><a href="#为文档创建索引" class="headerlink" title="为文档创建索引"></a>为文档创建索引</h2><p>创建 <code>Index</code> 对象后，可以使用 <code>IndexWriter</code> 对象将文档添加到索引中。获得 <code>IndexWriter</code> 的最简单方法是调用 <code>Index.writer()</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ix = index.open_dir(<span class="string">&quot;index&quot;</span>)</span><br><span class="line">writer = ix.writer()</span><br></pre></td></tr></table></figure>

<p>创建写入器 (writer) 会锁定索引以便进行写入，因此在同一线程或进程中同一时间只能由一个写入器打开。</p>
<blockquote>
<p>注意<br>因为打开写入器 (writer) 会锁定索引以进行写入，在多线程或多进程环境中，你的代码需要非常小心，如果试图打开一个已经被打开的索引将抛出 <code>whoosh.store.LockError</code> 异常。Whoosh 包括几个解决了写入锁 （whoosh.writing.AsyncWriter 和 whoosh.writing.BufferedWriter） 的示例方法。</p>
</blockquote>
<hr>
<blockquote>
<p>注意<br>当写入器 (writer) 处于打开状态并在提交期间，索引仍处于打开状态可供查询。现有读入器 (readers) 不受影响，新的读入器 (readers) 也可以正常打开当前索引。提交完成后，现有读入器 (readers) 继续看到以前版本的索引，他们不会自动看到新提交的更改。新读入器 (readers) 将看到更新后的索引。</p>
</blockquote>
<p>索引写入器 (IndexWriter) 的 <code>add_document(**kwargs)</code> 方法的参数是字段名与字段值组成的键值对：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = ix.writer()</span><br><span class="line">writer.add_document(title=<span class="string">u&quot;My document&quot;</span>, content=<span class="string">u&quot;This is my document!&quot;</span>,</span><br><span class="line">                    path=<span class="string">u&quot;/a&quot;</span>, tags=<span class="string">u&quot;first short&quot;</span>, icon=<span class="string">u&quot;/icons/star.png&quot;</span>)</span><br><span class="line">writer.add_document(title=<span class="string">u&quot;Second try&quot;</span>, content=<span class="string">u&quot;This is the second example.&quot;</span>,</span><br><span class="line">                    path=<span class="string">u&quot;/b&quot;</span>, tags=<span class="string">u&quot;second short&quot;</span>, icon=<span class="string">u&quot;/icons/sheep.png&quot;</span>)</span><br><span class="line">writer.add_document(title=<span class="string">u&quot;Third time&#x27;s the charm&quot;</span>, content=<span class="string">u&quot;Examples are many.&quot;</span>,</span><br><span class="line">                    path=<span class="string">u&quot;/c&quot;</span>, tags=<span class="string">u&quot;short&quot;</span>, icon=<span class="string">u&quot;/icons/book.png&quot;</span>)</span><br><span class="line">writer.commit()</span><br></pre></td></tr></table></figure>

<p>你不必为每个字段填写一个值。Whoosh 不在乎你是否从文档中省略字段。</p>
<p>必须向索引字段传递 unicode 值。已存储但未索引的字段（即 <code>STORED</code> 字段类型）可以传递任何可 pickle 的对象。</p>
<p>Whoosh 并不介意你添加具有相同值的文档，如何使用取决于你的目的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.add_document(path=<span class="string">u&quot;/a&quot;</span>, title=<span class="string">u&quot;A&quot;</span>, content=<span class="string">u&quot;Hello there&quot;</span>)</span><br><span class="line">writer.add_document(path=<span class="string">u&quot;/a&quot;</span>, title=<span class="string">u&quot;A&quot;</span>, content=<span class="string">u&quot;Deja vu!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这会将两个具有相同路径和标题字段的文档添加到索引中。查看下面的 <a href="#%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3">更新文档</a> 以获取有关 <code>update_document</code> 方法的信息，其中被标记为 “unique” 的字段将替换旧文档而不是追加。</p>
<h3 id="为同一字段创建索引和存储不同的值"><a href="#为同一字段创建索引和存储不同的值" class="headerlink" title="为同一字段创建索引和存储不同的值"></a>为同一字段创建索引和存储不同的值</h3><p>如果你需要一个既有索引又有存储的字段，则可以创建一个 unicode 值的索引，并使用另一个特定的关键字参数 <code>_stored_&lt;fieldname&gt;</code> 存储对象（通常不这样做，但有时这很有用）。 正常值将被分析和索引，但 <code>_stored_&lt;fieldname&gt;</code> 字段的值将显示在结果中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.add_document(title=<span class="string">u&quot;Title to be indexed&quot;</span>, _stored_title=<span class="string">u&quot;Stored title&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="完成添加文档"><a href="#完成添加文档" class="headerlink" title="完成添加文档"></a>完成添加文档</h3><p>索引写入器 (<code>IndexWriter</code>) 对象有点像数据库事务。可以对一个索引进行大量更改，然后一次提交 (<code>commit</code>) 它们。</p>
<p>在 <code>IndexWriter</code> 上调用 <code>commit()</code> 将添加的文档保存到索引：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.commit()</span><br></pre></td></tr></table></figure>

<p>当文档添加到索引后，即可搜索它们。</p>
<p>如果要关闭写入器 (writer) 而不提交更改，请调用 <code>cancel()</code> 而非 <code>commit()</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.cancel()</span><br></pre></td></tr></table></figure>

<p>请记住，当你打开了一个写入器（也包括你已经打开，并且在当前范围内仍然有效的写入器），没有其他线程或进程可以获取写入器 (writer) 或修改索引。一个写入器还保留对多个文件的打开状态。所以你应该永远记住在使用完写入器对象后调用 <code>commit()</code> 或 <code>cancel()</code>。</p>
<h2 id="合并段-segments"><a href="#合并段-segments" class="headerlink" title="合并段 (segments)"></a>合并段 (segments)</h2><p>Whoosh 的 <code>filedb</code> 索引实际上是一个或多个被称为段 (segments) 的“子索引”的容器。当你将文档添加到索引时，并不是将新文档与现有文档集成（这可能非常昂贵，因为它涉及对磁盘上的所有索引词条进行重新排序），Whoosh 在现有段旁边创建一个新段。 然后，当你搜索索引时，Whoosh 会分别搜索两个段并合并结果，因此这些段看起来是一个统一的索引。 （这个巧妙的设计是从 Lucene 复制而来的。）</p>
<p>因此，拥有几个段比每次添加一些文档时都重写整个索引更有效。 但是搜索多个段确实会减慢搜索速度，而且你拥有的段越多，搜索速度就越慢。 所以 Whoosh 有一个算法，当你调用 <code>commit()</code> 时会运行该算法，该算法会查找可以合并在一起的小段，从而生成更少、更大的段。</p>
<p>要防止 Whoosh 在提交期间合并段，请使用 <code>merge=False</code> 关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.commit(merge=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>将所有段合并在一起，将索引优化 (<code>optimize</code>) 为单个段，使用 <code>optimize=True</code> 关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.commit(optimize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>由于优化 (<code>optimize</code>) 会重写索引中的所有信息，因此在大型索引上可能会很慢。通常依赖 Whoosh 的合并算法比一直优化要好。</p>
<p>（<code>Index</code> 对象还有一个 <code>optimize()</code> 方法，可以让你优化索引（将所有段合并在一起）。它只是创建一个写入器 (writer) 并在其上调用 <code>commit(optimize=True)</code>。）</p>
<p>为了更好地控制段合并，你可以编写自己的合并策略函数并将其用作 <code>commit()</code> 方法的参数。查看 <code>whoosh.writing</code> 模块中 <code>NO_MERGE</code>、<code>MERGE_SMALL</code> 和 <code>OPTIMIZE</code> 函数的实现。</p>
<h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>你可以在 <code>IndexWriter</code> 对象上使用以下方法删除文档。 然后，你需要调用写入器上的 <code>commit()</code> 方法以将删除内容保存到磁盘。</p>
<p><code>delete_document(docnum)</code><br>通过内部文档编号删除文档的低级方法。</p>
<p><code>is_deleted(docnum)</code><br>低级方法，如果删除具有给定内部编号的文档，则返回 <code>True</code>。</p>
<p><code>delete_by_term(fieldname, termtext)</code><br>删除给定（索引）字段包含给定词条 (<code>term</code>) 的任何文档。 这主要用于 <code>ID</code> 或 <code>KEYWORD</code> 字段。</p>
<p><code>delete_by_query(query)</code><br>删除与给定查询匹配的所有文档。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按路径删除文档 —— 这个字段必须已被索引</span></span><br><span class="line">ix.delete_by_term(<span class="string">&#x27;path&#x27;</span>, <span class="string">u&#x27;/a/b/c&#x27;</span>)</span><br><span class="line"><span class="comment"># 将删除后的内容保存到磁盘</span></span><br><span class="line">ix.commit()</span><br></pre></td></tr></table></figure>

<p>在 <code>filedb</code> 后端，删除文档只是将文档编号添加到与索引一起存储的已删除文档列表中。 当你搜索索引时，它知道不会在结果中返回已删除的文档。 然而，文档的内容仍然存储在索引中，并且某些统计信息（例如词条在文档中的频率）不会更新，直到你合并包含已删除文档的段（参见上面的合并）。 这是因为立即从索引中删除信息实际上会涉及在磁盘上重写整个索引，这将是非常低效的。</p>
<h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>如果要替换（重新索引）文档，可以使用 <code>Index</code> 或 <code>IndexWriter</code> 上的 <code>delete_*</code> 方法之一删除旧文档，然后使用 <code>IndexWriter.add_document</code> 添加新版本。 或者你可以使用 <code>IndexWriter.update_document</code> 一步完成此操作。</p>
<p>要使 <code>update_document</code> 起作用，你必须至少将模式 (schema) 中的一个字段标记为唯一 (<code>unique=True</code>)。 然后 Whoosh 将使用唯一 (<code>unique=True</code>) 字段的内容来搜索要删除的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> Schema, ID, TEXT</span><br><span class="line"></span><br><span class="line">schema = Schema(path = ID(unique=<span class="literal">True</span>), content=TEXT)</span><br><span class="line"></span><br><span class="line">ix = index.create_in(<span class="string">&quot;index&quot;</span>)</span><br><span class="line">writer = ix.writer()</span><br><span class="line">writer.add_document(path=<span class="string">u&quot;/a&quot;</span>, content=<span class="string">u&quot;The first document&quot;</span>)</span><br><span class="line">writer.add_document(path=<span class="string">u&quot;/b&quot;</span>, content=<span class="string">u&quot;The second document&quot;</span>)</span><br><span class="line">writer.commit()</span><br><span class="line"></span><br><span class="line">writer = ix.writer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 &quot;path&quot; 字段被标记为唯一，所以在 path=&quot;/a&quot; 上调用 update_document</span></span><br><span class="line"><span class="comment"># 将删除 &quot;path&quot; 字段包含 &quot;/a&quot; 的任何现有文档。</span></span><br><span class="line">writer.update_document(path=<span class="string">u&quot;/a&quot;</span>, content=<span class="string">&quot;Replacement for the first document&quot;</span>)</span><br><span class="line">writer.commit()</span><br></pre></td></tr></table></figure>

<p>标记为唯一 (<code>unique</code>) 的字段必须被索引。</p>
<p>如果已有文档中不存在一个与更新文档的唯一字段相同值的文档，<code>update_document</code> 就像 <code>add_document</code> 一样。</p>
<p>唯一 (<code>unique</code>) 字段和 <code>update_document</code> 只是删除和添加的快捷方式。 Whoosh 没有唯一标识符的固有概念，并且在你使用 <code>add_document</code> 时绝不会强制执行唯一性。</p>
<h2 id="增量索引"><a href="#增量索引" class="headerlink" title="增量索引"></a>增量索引</h2><p>当你索引一组文档时，你通常需要两种代码路径：一种是从头开始索引所有文档，另一种是只更新已更改的文档。</p>
<p>从头开始索引所有内容非常容易。 这是一个简单的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> index</span><br><span class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> Schema, ID, TEXT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_index</span>(<span class="params">dirname</span>):</span><br><span class="line">  <span class="comment"># 始终从头开始创建索引</span></span><br><span class="line">  ix = index.create_in(dirname, schema=get_schema())</span><br><span class="line">  writer = ix.writer()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 假设我们有一个函数</span></span><br><span class="line">  <span class="comment"># 可以收集要索引的文档的文件名</span></span><br><span class="line">  <span class="keyword">for</span> path <span class="keyword">in</span> my_docs():</span><br><span class="line">    add_doc(writer, path)</span><br><span class="line">  writer.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_schema</span>()</span><br><span class="line">  <span class="keyword">return</span> Schema(path=ID(unique=<span class="literal">True</span>, stored=<span class="literal">True</span>), content=TEXT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_doc</span>(<span class="params">writer, path</span>):</span><br><span class="line">  fileobj = <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">  content = fileobj.read()</span><br><span class="line">  fileobj.close()</span><br><span class="line">  writer.add_document(path=path, content=content)</span><br></pre></td></tr></table></figure>

<p>现在，对于一小部分文档，每次都从头开始索引实际上可能已经足够快了。 但是对于大型集合，你会希望脚本只重新索引已更改的文档。</p>
<p>首先，我们需要存储每个文档的最后修改时间，以便我们检查文件是否已更改。 在此示例中，为简单起见，我们将只使用最后修改时间 (mtime)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_schema</span>()</span><br><span class="line">  <span class="keyword">return</span> Schema(path=ID(unique=<span class="literal">True</span>, stored=<span class="literal">True</span>), time=STORED, content=TEXT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_doc</span>(<span class="params">writer, path</span>):</span><br><span class="line">  fileobj = <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">  content = fileobj.read()</span><br><span class="line">  fileobj.close()</span><br><span class="line">  modtime = os.path.getmtime(path)</span><br><span class="line">  writer.add_document(path=path, content=content, time=modtime)</span><br></pre></td></tr></table></figure>

<p>现在我们可以修改脚本以允许从头开始清理 (<code>clean</code>) 或增量索引：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index_my_docs</span>(<span class="params">dirname, clean=<span class="literal">False</span></span>):</span><br><span class="line">  <span class="keyword">if</span> clean:</span><br><span class="line">    clean_index(dirname)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    incremental_index(dirname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">incremental_index</span>(<span class="params">dirname</span>)</span><br><span class="line">    ix = index.open_dir(dirname)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 索引中所有 path 的集合</span></span><br><span class="line">    indexed_paths = <span class="built_in">set</span>()</span><br><span class="line">    <span class="comment"># 我们需要重新索引的所有 path 的集合</span></span><br><span class="line">    to_index = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> searcher:</span><br><span class="line">      writer = ix.writer()</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 遍历索引中的存储字段</span></span><br><span class="line">      <span class="keyword">for</span> fields <span class="keyword">in</span> searcher.all_stored_fields():</span><br><span class="line">        indexed_path = fields[<span class="string">&#x27;path&#x27;</span>]</span><br><span class="line">        indexed_paths.add(indexed_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(indexed_path):</span><br><span class="line">          <span class="comment"># 这个文件在索引后被删除了</span></span><br><span class="line">          writer.delete_by_term(<span class="string">&#x27;path&#x27;</span>, indexed_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          <span class="comment"># 检查这个文件在索引后是否被修改过</span></span><br><span class="line">          indexed_time = fields[<span class="string">&#x27;time&#x27;</span>]</span><br><span class="line">          mtime = os.path.getmtime(indexed_path)</span><br><span class="line">          <span class="keyword">if</span> mtime &gt; indexed_time:</span><br><span class="line">            <span class="comment"># 文件发生变化，删除并添加到文件列表中重新索引</span></span><br><span class="line">            writer.delete_by_term(<span class="string">&#x27;path&#x27;</span>, indexed_path)</span><br><span class="line">            to_index.add(indexed_path)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 遍历文件系统中的文件</span></span><br><span class="line">      <span class="comment"># 假设我们有一个函数用于收集索引文档的文件名</span></span><br><span class="line">      <span class="keyword">for</span> path <span class="keyword">in</span> my_docs():</span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">in</span> to_index <span class="keyword">or</span> path <span class="keyword">not</span> <span class="keyword">in</span> indexed_paths:</span><br><span class="line">          <span class="comment"># 这要么是一个被改变的文件，</span></span><br><span class="line">          <span class="comment"># 要么是一个没有被索引过的新文件。 所以索引它！</span></span><br><span class="line">          add_doc(writer, path)</span><br><span class="line"></span><br><span class="line">      writer.commit()</span><br></pre></td></tr></table></figure>

<p><code>incremental_index</code> 函数：</p>
<ul>
<li>循环遍历当前索引的所有路径。<ul>
<li>如果任何文件不再存在，请从索引中删除相应的文档。</li>
<li>如果该文件仍然存在，但已被修改，则将其添加到要重新索引的路径列表中。</li>
<li>如果文件存在，不管它是否被修改，都将它添加到所有索引路径的列表中。</li>
</ul>
</li>
<li>循环遍历磁盘上文件的所有路径。<ul>
<li>如果路径不在所有索引路径的集合中，则该文件是新文件，我们需要对其进行索引。</li>
<li>如果路径在要重新索引的路径集中，我们需要对其进行索引。</li>
<li>否则，我们可以跳过索引文件。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> writing</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> myindex.writer() <span class="keyword">as</span> mywriter:</span><br><span class="line">    <span class="comment"># 你可以选择在此处向写入器添加文档，例如 mywriter.add_document(...)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 mergetype=CLEAR 清除所有现有段，</span></span><br><span class="line">    <span class="comment"># 因此索引将只包含你添加到此写入器的任何文档</span></span><br><span class="line">    mywriter.mergetype = writing.CLEAR</span><br></pre></td></tr></table></figure>

<p>或者，如果你不使用 <code>writer</code> 作为上下文管理器并直接调用 <code>commit()</code>，请这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mywriter = myindex.writer()</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">mywriter.commit(mergetype=writing.CLEAR)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意<br>如果你不需要担心现有的读入器 (readers) ，更有效的方法是简单地删除索引目录的内容并重新开始。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 06 - 如何搜索</title>
    <url>/whoosh/06-%E5%A6%82%E4%BD%95%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>创建索引并向其中添加文档后，你可以搜索这些文档。</p>
<h2 id="搜索器-Searcher-对象"><a href="#搜索器-Searcher-对象" class="headerlink" title="搜索器 (Searcher) 对象"></a>搜索器 (<code>Searcher</code>) 对象</h2><p>要获得 <code>whoosh.searching.Searcher</code> 对象，请在 <code>Index</code> 对象上调用 <code>searcher()</code> ：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">searcher = myindex.searcher()</span><br></pre></td></tr></table></figure>

<p>你通常希望使用 <code>with</code> 语句打开搜索器 (Searcher)，以便在你完成搜索后自动关闭搜索器（搜索器对象代表许多打开的文件，因此如果你没有明确关闭它们并且系统也没有快速回收，你可能耗尽文件句柄）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> searcher:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>这当然等同于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    searcher = ix.searcher()</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    searcher.close()</span><br></pre></td></tr></table></figure>

<p><code>Searcher</code> 对象是读取索引的主要高级接口。 它有很多有用的方法来获取有关索引的信息，例如 <code>lexicon(fieldname)</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(searcher.lexicon(<span class="string">&quot;content&quot;</span>))</span><br><span class="line">[<span class="string">u&quot;document&quot;</span>, <span class="string">u&quot;index&quot;</span>, <span class="string">u&quot;whoosh&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>但是，<code>Searcher</code> 对象上最重要的方法是 <code>search()</code>，它接受一个 <code>whoosh.query.Query</code> 对象并返回一个 <code>Results</code> 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</span><br><span class="line"></span><br><span class="line">qp = QueryParser(<span class="string">&quot;content&quot;</span>, schema=myindex.schema)</span><br><span class="line">q = qp.parse(<span class="string">u&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> myindex.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    results = s.search(q)</span><br></pre></td></tr></table></figure>

<p>默认情况下，结果最多包含前 10 个匹配文档。 要获得更多结果，请使用 <code>limit</code> 关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = s.search(q, limit=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<p>如果你想要所有结果，请使用 <code>limit=None</code>。但是，尽可能设置限制可以加快搜索速度，因为 Whoosh 不需要检查和评分每个文档。</p>
<p>由于一次显示一页结果是一种常见模式，因此 <code>search_page</code> 方法可让你方便地仅检索给定页面上的结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = s.search_page(q, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>默认页面长度为 10 。 你可以使用 <code>pagelen</code> 关键字参数来设置不同的页面长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = s.search_page(q, <span class="number">5</span>, pagelen=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h2 id="结果-Results-对象"><a href="#结果-Results-对象" class="headerlink" title="结果 (Results) 对象"></a>结果 (Results) 对象</h2><p><code>Results</code> 对象的作用类似于匹配文档的列表。你可以使用它来访问每个命中文档的存储字段，以显示给用户。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 显示最佳命中的存储字段</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>results[<span class="number">0</span>]</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>: <span class="string">u&quot;Hello World in Python&quot;</span>, <span class="string">&quot;path&quot;</span>: <span class="string">u&quot;/a/b/c&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>results[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">[&#123;<span class="string">&quot;title&quot;</span>: <span class="string">u&quot;Hello World in Python&quot;</span>, <span class="string">&quot;path&quot;</span>: <span class="string">u&quot;/a/b/c&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>: <span class="string">u&quot;Foo&quot;</span>, <span class="string">&quot;path&quot;</span>: <span class="string">u&quot;/bar&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>默认情况下，<code>Searcher.search(myquery)</code> 将命中数限制为 20，因此 <code>Results</code> 对象中得分的命中数可能小于索引中匹配文档的数量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 整个索引中有多少文档会匹配？</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(results)</span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 这个 Results 对象中有多少个评分和排序的文档？</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 如果命中次数有限(默认)，这通常会小于 len()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>results.scored_length()</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>调用 <code>len(Results)</code> 再次运行快速（无评分）版本的查询以计算出匹配文档的总数。 这通常非常快，但对于大型索引，它可能会导致明显的延迟。 如果你想避免在非常大的索引上出现这种延迟，你可以使用 <code>has_exact_length()</code>、<code>estimated_length()</code> 和 <code>estimated_min_length()</code> 方法来估计匹配文档的数量，而无需调用 <code>len()</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">found = results.scored_length()</span><br><span class="line"><span class="keyword">if</span> results.has_exact_length():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Scored&quot;</span>, found, <span class="string">&quot;of exactly&quot;</span>, <span class="built_in">len</span>(results), <span class="string">&quot;documents&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    low = results.estimated_min_length()</span><br><span class="line">    high = results.estimated_length()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Scored&quot;</span>, found, <span class="string">&quot;of between&quot;</span>, low, <span class="string">&quot;and&quot;</span>, high, <span class="string">&quot;documents&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="评分-Scoring-和排序-sorting"><a href="#评分-Scoring-和排序-sorting" class="headerlink" title="评分 (Scoring) 和排序 (sorting)"></a>评分 (Scoring) 和排序 (sorting)</h2><h3 id="评分-Scoring"><a href="#评分-Scoring" class="headerlink" title="评分 (Scoring)"></a>评分 (Scoring)</h3><p>通常结果文档列表按分数排序。 <code>whoosh.scoring</code> 模块包含各种评分算法的实现。 默认为 <code>BM25F</code>。</p>
<p>你可以使用 <code>weighting</code> 关键字参数设置要在创建搜索器时使用的评分对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> scoring</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> myindex.searcher(weighting=scoring.TF_IDF()) <span class="keyword">as</span> s:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>加权模型是一个 <code>WeightingModel</code> 子类，带有一个生成 “scorer” 实例的 scorer() 方法。 该实例有一个获取当前匹配器 (matcher) 并返回浮点分数的方法。</p>
<h3 id="排序-sorting"><a href="#排序-sorting" class="headerlink" title="排序 (sorting)"></a>排序 (sorting)</h3><p>请参阅 <a href="#TODO">排序和分面</a>。</p>
<h3 id="高亮显示片段等"><a href="#高亮显示片段等" class="headerlink" title="高亮显示片段等"></a>高亮显示片段等</h3><p>有关这些主题的信息，请参阅 <a href="#TODO">如何创建高亮显示的搜索结果摘录和查询扩展</a> 和 <a href="#TODO">关键字提取</a>。</p>
<h3 id="筛选结果"><a href="#筛选结果" class="headerlink" title="筛选结果"></a>筛选结果</h3><p>你可以使用 <code>search()</code> 的 <code>filter</code> 关键字参数来指定一组允许出现在结果中的文档。 参数可以是 <code>whoosh.query.Query</code> 对象、<code>whoosh.searching.Results</code> 对象或包含文档编号的类集合对象。 搜索器 (searcher) 缓存过滤器 (filters)，例如，如果你多次对搜索器使用相同的查询过滤器，则额外的搜索会更快，因为搜索器将缓存运行过滤器查询的结果</p>
<p>你还可以指定一个 <code>mask</code> 关键字参数来指定一组不允许出现在结果中的文档。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> myindex.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    qp = qparser.QueryParser(<span class="string">&quot;content&quot;</span>, myindex.schema)</span><br><span class="line">    user_q = qp.parse(query_string)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 仅在 &quot;rendering&quot; 段中显示文档</span></span><br><span class="line">    allow_q = query.Term(<span class="string">&quot;chapter&quot;</span>, <span class="string">&quot;rendering&quot;</span>)</span><br><span class="line">    <span class="comment"># 不要显示任何在 &quot;tag&quot; 字段包含 &quot;todo&quot; 的文档</span></span><br><span class="line">    restrict_q = query.Term(<span class="string">&quot;tag&quot;</span>, <span class="string">&quot;todo&quot;</span>)</span><br><span class="line"></span><br><span class="line">    results = s.search(user_q, <span class="built_in">filter</span>=allow_q, mask=restrict_q)</span><br></pre></td></tr></table></figure>

<p>（如果你同时指定过滤器 (filter) 和掩码 (mask)，并且匹配的文档出现在两者中，则掩码“获胜”并且不允许显示该文档。）</p>
<p>要找出有多少结果被筛选出结果，使用 <code>results.filtered_count</code> 或 <code>resultspage.results.filtered_count</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> myindex.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    qp = qparser.QueryParser(<span class="string">&quot;content&quot;</span>, myindex.schema)</span><br><span class="line">    user_q = qp.parse(query_string)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤超过 7 天的文档</span></span><br><span class="line">    old_q = query.DateRange(<span class="string">&quot;created&quot;</span>, <span class="literal">None</span>, datetime.now() - timedelta(days=<span class="number">7</span>))</span><br><span class="line">    results = s.search(user_q, mask=old_q)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Filtered out %d older documents&quot;</span> % results.filtered_count)</span><br></pre></td></tr></table></figure>

<h3 id="我的查询将匹配哪些字词？"><a href="#我的查询将匹配哪些字词？" class="headerlink" title="我的查询将匹配哪些字词？"></a>我的查询将匹配哪些字词？</h3><p>你可以将 <code>terms=True</code> 关键字参数用于 <code>search()</code> 以获取查询中的哪些词条与哪些文档匹配的搜索记录：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> myindex.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    results = s.seach(myquery, terms=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>然后，你可以从 <code>whoosh.searching.Results</code> 和 <code>whoosh.searching.Hit</code> 对象中获取有关哪些词条匹配的信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个结果对象是用 terms=True 创建的吗？</span></span><br><span class="line"><span class="keyword">if</span> results.has_matched_terms():</span><br><span class="line">    <span class="comment"># 结果中匹配了哪些词条？</span></span><br><span class="line">    <span class="built_in">print</span>(results.matched_terms())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每次命中匹配的词条是什么？</span></span><br><span class="line">    <span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(hit.matched_terms())</span><br></pre></td></tr></table></figure>

<h3 id="折叠-Collapsing-结果"><a href="#折叠-Collapsing-结果" class="headerlink" title="折叠 (Collapsing) 结果"></a>折叠 (Collapsing) 结果</h3><p>Whoosh 允许你从结果中删除除具有相同切面 (facets) 键的前 N 个文档之外的所有文档。 这在某些情况下很有用：</p>
<ul>
<li>在搜索时消除重复项。</li>
<li>限制每个源的匹配数。 例如，在网络搜索应用程序中，你可能希望显示最多三个来自任何网站的匹配项。</li>
</ul>
<p>文档是否应该折叠由 “collapse facet” 的值决定。 如果文档的折叠键为空，则永远不会折叠，否则只有前 N 个具有相同折叠键的文档才会出现在结果中。</p>
<p>有关切面 (facets) 的信息，请参阅 [排序和切面 (facets)]。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> myindex.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    <span class="comment"># 设置要折叠的切面和每个切面值的最大文档数（默认为 1）</span></span><br><span class="line">    results = s.collector(collapse=<span class="string">&quot;hostname&quot;</span>, collapse_limit=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字典将折叠键映射到通过折叠该键过滤掉的文档数量</span></span><br><span class="line">    <span class="built_in">print</span>(results.collapsed_counts)</span><br></pre></td></tr></table></figure>

<p>折叠适用于评分和排序结果。 你可以使用 <code>whoosh.sorting</code> 模块中可用的任何方面类型。</p>
<p>默认情况下，Whoosh 使用结果顺序（分数或排序键）来确定要折叠的文档。 例如，在评分结果中，将保留评分最高的文档。 你可以选择指定 <code>collapse_order</code> 方面来控制折叠时要保留的文档。</p>
<p>例如，在产品搜索中，你可以显示按价格降序排列的结果，并消除每种产品类型中评分最高的项目以外的所有项目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> sorting</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> myindex.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    price_facet = sorting.FieldFacet(<span class="string">&quot;price&quot;</span>, reverse=<span class="literal">True</span>)</span><br><span class="line">    type_facet = sorting.FieldFacet(<span class="string">&quot;type&quot;</span>)</span><br><span class="line">    rating_facet = sorting.FieldFacet(<span class="string">&quot;rating&quot;</span>, reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    results = s.collector(sortedby=price_facet,  <span class="comment"># 按价格逆序排序</span></span><br><span class="line">                          collapse=type_facet,  <span class="comment"># 按产品类型折叠</span></span><br><span class="line">                          collapse_order=rating_facet  <span class="comment"># 折叠到最高评价</span></span><br><span class="line">                          )</span><br></pre></td></tr></table></figure>

<p>折叠发生在搜索过程中，因此它通常比查找所有内容和对结果进行后处理更有效。 但是，如果折叠消除了大量文档，折叠搜索可能需要更长的时间，因为搜索必须考虑更多文档并删除许多已经收集的文档。</p>
<p>由于此收集器有时必须返回并删除已收集的文档，如果你将它与 <code>TermsCollector</code> 和<code>FacetCollector</code> 结合使用，这些收集器可能包含已通过折叠从最终结果中过滤掉的文档的信息。</p>
<h2 id="限时搜索"><a href="#限时搜索" class="headerlink" title="限时搜索"></a>限时搜索</h2><p>要限制搜索所需的时间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.collectors <span class="keyword">import</span> TimeLimitCollector, TimeLimit</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> myindex.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    <span class="comment"># 获取收集器 (collector) 对象</span></span><br><span class="line">    c = s.collector(limit=<span class="literal">None</span>, sortedby=<span class="string">&quot;title_exact&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将其包装在 TimeLimitedCollector 中,并将时间限制设置为 10 秒</span></span><br><span class="line">    tlc = TimeLimitedCollector(c, timelimit=<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 尝试搜索</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s.search_with_collector(myquery, tlc)</span><br><span class="line">    <span class="keyword">except</span> TimeLimit:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Search took too long, aborting!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 你仍然可以从收集器中得到部分结果</span></span><br><span class="line">    results = tlc.results()</span><br></pre></td></tr></table></figure>

<h2 id="便捷方法"><a href="#便捷方法" class="headerlink" title="便捷方法"></a>便捷方法</h2><p><code>Searcher</code> 对象上的 <code>document()</code> 和 <code>documents()</code> 方法使你可以检索与你在关键字参数中传递的词条相匹配的文档的存储字段。</p>
<p>这对于日期&#x2F;时间、标识符、路径等字段特别有用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(searcher.documents(indexeddate=<span class="string">u&quot;20051225&quot;</span>))</span><br><span class="line">[&#123;<span class="string">&quot;title&quot;</span>: <span class="string">u&quot;Christmas presents&quot;</span>&#125;, &#123;<span class="string">&quot;title&quot;</span>: <span class="string">u&quot;Turkey dinner report&quot;</span>&#125;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> searcher.document(path=<span class="string">u&quot;/a/b/c&quot;</span>)</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;Document C&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>这些方法有一些限制：</p>
<ul>
<li>结果不计分。</li>
<li>多个关键字总是用 AND 运算在一起。</li>
<li>每个关键字参数的整个值都被认为是一个词条； 你不能在同一字段中搜索多个词条。</li>
</ul>
<h2 id="组合结果对象"><a href="#组合结果对象" class="headerlink" title="组合结果对象"></a>组合结果对象</h2><p>有时使用另一个查询的结果来影响 <code>whoosh.searching.Results</code> 对象的顺序很有用。</p>
<p>例如，你可能有一个 “最佳选择” 字段。 该字段包含为文档精心挑选的关键字。 当用户搜索这些关键字时，你希望将这些文档放在结果列表的顶部。 你可以尝试通过极大地提升 “最佳选择” 字段来做到这一点，但这会对得分产生不可预测的影响。 简单地运行查询两次并合并结果要容易得多：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解析用户查询</span></span><br><span class="line">userquery = queryparser.parse(querystring)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取搜索的词条</span></span><br><span class="line">termset = <span class="built_in">set</span>()</span><br><span class="line">userquery.existing_terms(termset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为用户在 &quot;content&quot; 字段中搜索的词条制定 “最佳匹配”查询</span></span><br><span class="line">bbq = Or([Term(<span class="string">&quot;bestbet&quot;</span>, text) <span class="keyword">for</span> fieldname, text</span><br><span class="line">          <span class="keyword">in</span> termset <span class="keyword">if</span> fieldname == <span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找与搜索词匹配的文档</span></span><br><span class="line">results = s.search(bbq, limit=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找与原始查询匹配的文档</span></span><br><span class="line">allresults = s.search(userquery, limit=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户查询结果添加到 “best bet” 的末尾结果。</span></span><br><span class="line"><span class="comment"># 如果文档出现在两个结果集中，</span></span><br><span class="line"><span class="comment"># 则推送它们到合并结果的顶部。</span></span><br><span class="line">results.upgrade_and_extend(allresults)</span><br></pre></td></tr></table></figure>

<p>结果 (<code>Results</code>) 对象支持以下方法：</p>
<p><code>Results.extend(results)</code><br>将 “results” 中的文档添加到结果文档列表的末尾。</p>
<p><code>Results.filter(results)</code><br>从结果文档列表中删除 “results” 中的文档。</p>
<p><code>Results.upgrade(results)</code><br>任何也出现在 “results” 中的结果文档都将移至结果文档列表的顶部。</p>
<p><code>Results.upgrade_and_extend(results)</code><br>任何也出现在 “results” 中的结果文档都将移至结果文档列表的顶部。 然后将 “results” 中的任何其他文档添加到结果文档列表中。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 07 - 解析用户查询</title>
    <url>/whoosh/07-%E8%A7%A3%E6%9E%90%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>查询解析器 (query parser) 的工作是将用户提交的查询字符串转换为查询对象（来自 <code>whoosh.query</code> 模块的对象）。</p>
<span id="more"></span>

<p>例如，用户查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rendering shading</span><br></pre></td></tr></table></figure>

<p>可能会被解析成这样的查询对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">And([Term(<span class="string">&quot;content&quot;</span>, <span class="string">u&quot;rendering&quot;</span>), Term(<span class="string">&quot;content&quot;</span>, <span class="string">u&quot;shading&quot;</span>)])</span><br></pre></td></tr></table></figure>

<p>Whoosh 包含一个功能强大的模块化解析器，用于 <code>whoosh.qparser</code> 模块中的用户查询。默认解析器实现了一种类似于 Lucene 附带的查询语言。但是，通过更改插件或使用 <code>whoosh.qparser.MultifieldParser()</code>、<code>whoosh.qparser.SimpleParser()</code> 或 <code>whoosh.qparser.DisMaxParser()</code> 等函数 ，你可以更改解析器的工作方式，获得更简单的解析器或更改查询语言语法。</p>
<p>（在以前版本的 Whoosh 中，查询解析器是基于 <code>pyparsing</code>. 新的手写解析器不那么脆弱，更灵活。）</p>
<blockquote>
<p>笔记</p>
<p>请记住，你可以使用模块中的对象以编程方式直接创建查询对象 <code>whoosh.query</code>。如果你不处理实际的用户查询，这比只是为了解析它而构建查询字符串更可取。</p>
</blockquote>
<h2 id="使用默认解析器"><a href="#使用默认解析器" class="headerlink" title="使用默认解析器"></a>使用默认解析器</h2><p>要创建一个 <code>whoosh.qparser.QueryParser</code> 对象，请将要搜索的默认字段的名称和你要搜索的索引的模式 (schema) 传递给它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</span><br><span class="line"></span><br><span class="line">parser = QueryParser(<span class="string">&quot;content&quot;</span>, schema=myindex.schema)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示<br>你可以在不指定架构的情况下实例化 <code>QueryParser</code> 对象，但是解析器不会处理用户查询的文本。当你想了解 <code>QueryParser</code> 将如何构建查询，但又不想仅仅为了测试而构建模式时，这很有用。</p>
</blockquote>
<p>一旦你有了一个 <code>QueryParser</code> 对象，你就可以调用 <code>parse()</code> 它来将查询字符串解析为查询对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.parse(<span class="string">u&quot;alpha OR beta gamma&quot;</span>)</span><br><span class="line">And([Or([Term(<span class="string">&#x27;content&#x27;</span>, <span class="string">u&#x27;alpha&#x27;</span>), Term(<span class="string">&#x27;content&#x27;</span>, <span class="string">u&#x27;beta&#x27;</span>)]), Term(<span class="string">&#x27;content&#x27;</span>, <span class="string">u&#x27;gamma&#x27;</span>)])</span><br></pre></td></tr></table></figure>

<p>有关默认解析器查询语言的功能和语法，请参阅 <a href="#TODO">查询语言参考</a>。</p>
<h2 id="常见的定制"><a href="#常见的定制" class="headerlink" title="常见的定制"></a>常见的定制</h2><p>默认情况下搜索任何词条 (Terms) 而不是所有词条</p>
<p>如果用户没有明确指定 <code>AND</code> 或 <code>OR</code> 子句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">physically based rendering</span><br></pre></td></tr></table></figure>

<p>…默认情况下，解析器将单词视为由 <code>AND</code> 连接 ，这意味着所有词条 (Terms) 都必须存在才能匹配文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">physically AND based AND rendering</span><br></pre></td></tr></table></figure>

<p>更改解析器以改为使用 <code>OR</code>，以便文档中可能存在任何词条以进行匹配，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">physically OR based OR rendering</span><br></pre></td></tr></table></figure>

<p>…使用关键字参数配置 QueryParser，group 如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> qparser</span><br><span class="line"></span><br><span class="line">parser = qparser.QueryParser(fieldname, schema=myindex.schema,</span><br><span class="line">                             group=qparser.OrGroup)</span><br></pre></td></tr></table></figure>

<p>Or 查询允许你指定包含更多查询词的文档得分更高。例如，如果用户搜索 <code>foo bar</code>，则出现 4 次 <code>foo</code> 的文档通常会比包含 <code>foo</code> 和 <code>bar</code> 各出现一次的文档得分高。但是，用户通常希望包含更多他们搜索的词的文档得分更高。要配置解析器以生成具有此行为的 Or 组，请使用 <code>OrGroup</code> 类的 <code>factory()</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">og = qparser.OrGroup.factory(<span class="number">0.9</span>)</span><br><span class="line">parser = qparser.QueryParser(fieldname, schema, group=og)</span><br></pre></td></tr></table></figure>

<p>其中 <code>factory()</code> 的参数是奖金的比例因子（介于 0 和 1 之间）。</p>
<h3 id="默认让用户搜索多个字段"><a href="#默认让用户搜索多个字段" class="headerlink" title="默认让用户搜索多个字段"></a>默认让用户搜索多个字段</h3><p>默认的 QueryParser 配置采用没有显式字段的词条，并将它们分配给你在创建对象时指定的默认字段，例如，如果你使用以下方法创建对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">physically based rendering</span><br></pre></td></tr></table></figure>

<p>并且用户输入了查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">three blind mice</span><br></pre></td></tr></table></figure>

<p>解析器会将其视为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content:three content:blind content:mice</span><br></pre></td></tr></table></figure>

<p>但是，你可能希望默认情况下让用户搜索多个字段。例如，你可能希望“unfielded”字词同时搜索 <code>title</code> 和 <code>content</code> 字段。</p>
<p>在这种情况下，你可以使用 <code>whoosh.qparser.MultifieldParser</code>. 这就像普通的 QueryParser，但不是默认的字段名称字符串，而是采用一系列字段名称：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> MultifieldParser</span><br><span class="line"></span><br><span class="line">mparser = MultifieldParser([<span class="string">&quot;title&quot;</span>, <span class="string">&quot;content&quot;</span>], schema=myschema)</span><br></pre></td></tr></table></figure>

<p>当此 MultifieldParser 实例解析时，它将其视为：<code>three blind mice</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(title:three OR content:three) (title:blind OR content:blind) (title:mice OR content:mice)</span><br></pre></td></tr></table></figure>

<h3 id="简化查询语言"><a href="#简化查询语言" class="headerlink" title="简化查询语言"></a>简化查询语言</h3><p>一旦你有了解析器 (parser)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = qparser.QueryParser(<span class="string">&quot;content&quot;</span>, schema=myschema)</span><br></pre></td></tr></table></figure>

<p>你可以使用 <code>remove_plugin_class()</code> 方法从中删除特征。</p>
<p>例如，要删除用户指定要搜索的字段的能力：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser.remove_plugin_class(qparser.FieldsPlugin)</span><br></pre></td></tr></table></figure>

<p>要删除搜索通配符的功能，这可能对查询性能有害：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser.remove_plugin_class(qparser.WildcardPlugin)</span><br></pre></td></tr></table></figure>

<p>有关 Whoosh 的查询解析器中包含的插件的信息，请参阅 qparser 模块。</p>
<h3 id="更改-AND、OR、ANDNOT、ANDMAYBE-和-NOT-语法"><a href="#更改-AND、OR、ANDNOT、ANDMAYBE-和-NOT-语法" class="headerlink" title="更改 AND、OR、ANDNOT、ANDMAYBE 和 NOT 语法"></a>更改 AND、OR、ANDNOT、ANDMAYBE 和 NOT 语法</h3><p>默认解析器对 AND、OR、ANDNOT、ANDMAYBE 和 NOT 函数使用英语关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = qparser.QueryParser(<span class="string">&quot;content&quot;</span>, schema=myschema)</span><br></pre></td></tr></table></figure>

<p>你可以替换默认 <code>OperatorsPlugin</code> 对象，用你自己的正则表达式替换默认的英文标记。</p>
<p><code>whoosh.qparser.OperatorsPlugin</code> 实现了在查询中使用 AND、OR、NOT、ANDNOT 和 ANDMAYBE 子句的能力。你可以实例化一个新的 <code>OperatorsPlugin</code> 并使用 And、Or、Not、AndNot 和 AndMaybe 关键字参数来更改标记模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use Spanish equivalents instead of AND and OR</span></span><br><span class="line">op = qparser.OperatorsPlugin(And=<span class="string">&quot; Y &quot;</span>, Or=<span class="string">&quot; O &quot;</span>)</span><br><span class="line">parser.replace_plugin(op)</span><br></pre></td></tr></table></figure>

<p>此外，你可以更改运算符 <code>NOT</code> 的语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np = qparser.OperatorsPlugin(Not=<span class="string">&#x27; NO &#x27;</span>)</span><br><span class="line">parser.replace_plugin(np)</span><br></pre></td></tr></table></figure>

<p>参数可以是模式字符串或预编译的正则表达式对象。</p>
<p>例如，要更改默认解析器以使用印刷符号而不是 AND、OR、ANDNOT、ANDMAYBE 和 NOT 函数的单词：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = qparser.QueryParser(<span class="string">&quot;content&quot;</span>, schema=myschema)</span><br><span class="line"><span class="comment"># These are regular expressions, so we have to escape the vertical bar</span></span><br><span class="line">op = qparser.OperatorsPlugin(And=<span class="string">&quot;&amp;&quot;</span>, Or=<span class="string">&quot;\\|&quot;</span>, AndNot=<span class="string">&quot;&amp;!&quot;</span>, AndMaybe=<span class="string">&quot;&amp;~&quot;</span>, Not=<span class="string">&quot;\\-&quot;</span>)</span><br><span class="line">parser.replace_plugin(op)</span><br></pre></td></tr></table></figure>

<h3 id="添加小于、大于等"><a href="#添加小于、大于等" class="headerlink" title="添加小于、大于等"></a>添加小于、大于等</h3><p>通常，匹配大于 “apple” 的字段中的所有词条的方式是使用开放式范围：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">field:&#123;apple to]</span><br></pre></td></tr></table></figure>

<p><code>whoosh.qparser.GtLtPlugin</code> 允许你指定类似这样的搜索：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">field:&gt;apple</span><br></pre></td></tr></table></figure>

<p>该插件允许你在字段说明符之后使用 <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>=&gt;</code> 或 <code>=&lt;</code>，并将表达式转换为等效范围：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">date:&gt;=<span class="string">&#x27;31 march 2001&#x27;</span></span><br><span class="line"></span><br><span class="line">date:[<span class="number">31</span> march <span class="number">2001</span> to]</span><br></pre></td></tr></table></figure>

<h3 id="添加模糊-fuzzy-词条查询"><a href="#添加模糊-fuzzy-词条查询" class="headerlink" title="添加模糊 (fuzzy) 词条查询"></a>添加模糊 (fuzzy) 词条查询</h3><p>模糊 (fuzzy) 查询有利于捕捉拼写错误和相似词。<code>whoosh.qparser.FuzzyTermPlugin</code> 允许你搜索模糊 (fuzzy) 词条，即不必完全匹配的词条。模糊词条将匹配一定数量的“编辑”（字符插入、删除 和 转置 —— 这称为 “Damerau-Levenshtein 编辑距离”）内的任何相似词条。</p>
<p>添加模糊插件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = qparser.QueryParser(<span class="string">&quot;fieldname&quot;</span>, my_index.schema)</span><br><span class="line">parser.add_plugin(qparser.FuzzyTermPlugin())</span><br></pre></td></tr></table></figure>

<p>将模糊插件添加到解析器后，你可以通过添加 ~ 后跟可选的最大编辑距离 (edit distance) 来指定模糊项。如果不指定编辑距离，则默认为 1.</p>
<p>例如，以下模糊 (fuzzy) 词条查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat~</span><br></pre></td></tr></table></figure>

<p>将匹配 <code>cat</code> 的一次编辑(edit) 后在索引中的所有词条，例如 cast(插入 s)、at(删除 c) 和 act(将 c 与 a 交换)。</p>
<p>如果你想 cat 匹配 bat，它需要两次编辑（删除 c 和插入 b）所以你需要将最大编辑距离设置为 2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat~<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>你允许的每个附加编辑都会增加必须检查的可能性的数量，所以当编辑距离大于 2 时可能会非常慢。</p>
<p>要求模糊词条的前几个字符完全匹配通常很有用。这称为前缀 (prefix)。你可以通过在编辑距离后添加斜杠和数字来设置前缀的长度。例如，要使用最大编辑距离为 2 和前缀长度为 3：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">johannson~<span class="number">2</span>/<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>你可以指定前缀而不指定编辑距离：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">johannson~/<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>默认前缀距离为 0.</p>
<h3 id="允许复杂的短语查询"><a href="#允许复杂的短语查询" class="headerlink" title="允许复杂的短语查询"></a>允许复杂的短语查询</h3><p>默认解析器设置允许短语（邻近）查询，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;whoosh search library&quot;</span></span><br></pre></td></tr></table></figure>

<p>默认将引号之间的文本标记为短语查询，并创建对这些邻近项的搜索。</p>
<p>如果你想进行更复杂的邻近搜索，你可以将短语插件替换为 <code>whoosh.qparser.SequencePlugin</code>，它允许在引号之间进行任何查询。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;(john OR jon OR jonathan~) peters*&quot;</span></span><br></pre></td></tr></table></figure>

<p>序列语法允许你像常规短语一样添加一个“slop”因子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;(john OR jon OR jonathan~) peters*&quot;</span>~<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>用序列插件替换默认的短语插件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = qparser.QueryParser(<span class="string">&quot;fieldname&quot;</span>, my_index.schema)</span><br><span class="line">parser.remove_plugin_class(qparser.PhrasePlugin)</span><br><span class="line">parser.add_plugin(qparser.SequencePlugin())</span><br></pre></td></tr></table></figure>

<p>或者，你可以保留默认的短语插件，并通过在创建序列插件时为开始&#x2F;结束标记指定正则表达式来为序列插件提供不同的语法。正则表达式应该有一个 slop 用于溢出因子的命名组。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = qparser.QueryParser(<span class="string">&quot;fieldname&quot;</span>, my_index.schema)</span><br><span class="line">parser.add_plugin(qparser.SequencePlugin(<span class="string">&quot;!(~(?P&lt;slop&gt;[1-9][0-9]*))?&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>这将允许你同时使用常规短语查询和序列查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;regular phrase&quot;</span> AND !sequence query~<span class="number">2</span>!</span><br></pre></td></tr></table></figure>

<h2 id="高级定制"><a href="#高级定制" class="headerlink" title="高级定制"></a>高级定制</h2><h3 id="QueryParser-参数"><a href="#QueryParser-参数" class="headerlink" title="QueryParser 参数"></a>QueryParser 参数</h3><p>QueryParser 支持两个额外的关键字参数：</p>
<p><code>group</code><br>当用户未明确指定布尔运算符（例如 AND 或 OR）时用于连接子查询的查询类。 这使你可以将默认运算符从 AND 更改为 OR。<br>这将是 <code>whoosh.qparser.AndGroup</code> 或 <code>whoosh.qparser.OrGroup</code> 类（不是实例化对象），除非你编写了自己要使用的自定义分组语法。</p>
<p><code>termclass</code><br>用于包装单个词条的查询类。<br>这必须是 <code>whoosh.query.Query</code> 子类（不是实例化对象），它在其 <code>__init__</code> 方法中接受字段名字符串和词条文本 unicode 字符串。 默认是 <code>whoosh.query.Term</code>。<br>如果你想将默认词条类更改为 <code>whoosh.query.Variations</code>，或者如果你编写了自定义词条类并希望解析器使用而不是 Whoosh 附带的类，这将很有用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser, OrGroup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>orparser = QueryParser(<span class="string">&quot;content&quot;</span>, schema=myschema, group=OrGroup)</span><br></pre></td></tr></table></figure>

<h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>查询解析器的功能由一组插件提供。你可以删除插件以删除功能，添加插件以添加功能，或者用重新配置或重写的版本替换默认插件。</p>
<p><code>whoosh.qparser.QueryParser.add_plugin()</code>、<code>whoosh.qparser.QueryParser.remove_plugin_class()</code> 和 <code>whoosh.qparser.QueryParser.replace_plugin()</code> 方法让你可以操作 <code>QueryParser</code> 对象中的插件。</p>
<p>有关可用插件的信息，请参阅 <a href="#TODO">qparser 模块</a>。</p>
<h3 id="创建自定义运算符"><a href="#创建自定义运算符" class="headerlink" title="创建自定义运算符"></a>创建自定义运算符</h3><ul>
<li>决定你是想要 <code>PrefixOperator</code>、<code>PostfixOperator</code> 还是 <code>InfixOperator</code>。</li>
<li>创建一个新的 <code>whoosh.qparser.syntax.GroupNode</code> 子类来保存受你的操作器 (operator) 影响的节点。该对象负责生成 <code>whoosh.query.Query</code> 语法对应的对象。</li>
<li>为运算符的查询语法创建正则表达式模式。</li>
<li>根据以上信息创建一个 <code>OperatorsPlugin.OpTagger</code> 对象。</li>
<li>创建一个配置了你的自定义运算符的 <code>OperatorsPlugin</code> 新实例。</li>
<li>用新实例替换解析器中 <code>OperatorsPlugin</code> 的默认值。</li>
</ul>
<p>例如，如果你要创建一个 <code>BEFORE</code> 运算符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> qparser, query</span><br><span class="line"></span><br><span class="line">optype = qparser.InfixOperator</span><br><span class="line">pattern = <span class="string">&quot; BEFORE &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BeforeGroup</span>(qparser.GroupNode):</span><br><span class="line">    merging = <span class="literal">True</span></span><br><span class="line">    qclass = query.Ordered</span><br></pre></td></tr></table></figure>

<p>为你的操作器 (operator) 创建一个 OpTagger：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> qparser, query</span><br><span class="line"></span><br><span class="line">optype = qparser.InfixOperator</span><br><span class="line">pattern = <span class="string">&quot; BEFORE &quot;</span></span><br><span class="line"></span><br><span class="line">btagger = qparser.OperatorPlugin.OpTagger(pattern, BeforeGroup,</span><br><span class="line">                                          qparser.InfixOperator)</span><br></pre></td></tr></table></figure>

<p>默认情况下，中缀运算符是左结合的。要创建右结合中缀运算符，请执行以下操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">btagger = qparser.OperatorPlugin.OpTagger(pattern, BeforeGroup,</span><br><span class="line">                                          qparser.InfixOperator,</span><br><span class="line">                                          leftassoc=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>使用新运算符创建一个 <code>OperatorsPlugin</code> 实例，并替换查询解析器中的默认运算符插件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qp = qparser.QueryParser(<span class="string">&quot;text&quot;</span>, myschema)</span><br><span class="line">my_op_plugin = qparser.OperatorsPlugin([(btagger, <span class="number">0</span>)])</span><br><span class="line">qp.replace_plugin(my_op_plugin)</span><br></pre></td></tr></table></figure>

<p>请注意，你使用第一个参数指定的运算符列表是默认运算符（AND、OR 等）的补充。要关闭其中一个默认运算符，你可以将 None 传递给相应的关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cp = qparser.OperatorsPlugin([(optagger, <span class="number">0</span>)], And=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>如果你只需要你的运算符列表而不需要任何默认运算符，请使用 <code>clean</code> 关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cp = qparser.OperatorsPlugin([(optagger, <span class="number">0</span>)], clean=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>列表前面的运算符比列表后面的运算符绑定得更紧密。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 08 - 默认查询语言</title>
    <url>/whoosh/08-%E9%BB%98%E8%AE%A4%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>查询由词条 (terms) 和运算符 (operators) 组成。词条有两种类型：单个词条和短语。多个词条可以与 AND 和 OR 等运算符组合。</p>
<span id="more"></span>

<p>Whoosh 支持索引不同字段的文本。创建对象时必须指定默认字段 <code>whoosh.qparser.QueryParser</code>。这是将搜索用户未明确指定字段的任何词条的字段。</p>
<p>Whoosh 的查询解析器能够通过使用插件来解析不同的附加语法。请参阅 <a href="7_%E8%A7%A3%E6%9E%90%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2.md">解析用户查询</a></p>
<h2 id="个别词条和短语"><a href="#个别词条和短语" class="headerlink" title="个别词条和短语"></a>个别词条和短语</h2><p>查找包含 <code>render</code> 词条的文档 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render</span><br></pre></td></tr></table></figure>

<p>查找包含 <code>all was well</code> 短语的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;all was well&quot;</span></span><br></pre></td></tr></table></figure>

<p>请注意，字段必须存储位置信息，以便短语搜索在该字段中工作。</p>
<p>通常，当你指定一个短语时，短语中每个单词之间的最大位置差为 1（即，这些单词在文档中必须紧挨着彼此）。例如，如果文档 <code>library</code> 在 <code>whoosh</code> 之后 5 个词以内，则以下匹配 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;whoosh library&quot;</span>~<span class="number">5</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p>查找包含 <code>render</code> 与 <code>shading</code> 的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render AND shading</span><br></pre></td></tr></table></figure>

<p>请注意，AND 是项之间的默认关系，因此这相同：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render shading</span><br></pre></td></tr></table></figure>

<p>查找包含 <code>render</code>,以及 <code>shading</code> 或 <code>modeling</code> 其中之一的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render AND shading OR modeling</span><br></pre></td></tr></table></figure>

<p>查找包含 <code>render</code> 但不包含 <code>modeling</code> 的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render NOT modeling</span><br></pre></td></tr></table></figure>

<p>查找包含 <code>alpha</code> 但不包含 <code>betaor</code> 或 <code>gamma</code> 的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha NOT (beta OR gamma)</span><br></pre></td></tr></table></figure>

<p>请注意，当词条之间没有指定布尔运算符时，将插入一个运算符，默认为 AND。所以这个查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render shading modeling</span><br></pre></td></tr></table></figure>

<p>等同于（默认情况下）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render AND shading AND modeling</span><br></pre></td></tr></table></figure>

<p>有关如何将默认运算符更改为 OR 的信息，请参阅 <a href="#TODO">自定义默认操作符</a></p>
<p>将运算符与括号组合在一起。例如，查找同时包含 <code>render</code> 与 <code>shading</code> 或包含 <code>modeling</code> 的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(render AND shading) OR modeling</span><br></pre></td></tr></table></figure>

<h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>在 <code>name</code> 字段中查找词条 <code>ivan</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name:ivan</span><br></pre></td></tr></table></figure>

<p><code>field:</code> 前缀仅为其前面的词条设置字段，因此查询：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">title:open sesame</span><br></pre></td></tr></table></figure>

<p><code>open</code> 将在 <code>title</code> 字段和默认 <code>sesame</code> 字段中搜索。</p>
<p>要将字段前缀应用于多个词条，请将它们用括号分组：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">title:(open sesame)</span><br></pre></td></tr></table></figure>

<p>这与下面的相同：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">title:open title:sesame</span><br></pre></td></tr></table></figure>

<p>当然你也可以为短语指定一个字段：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">title:&quot;open sesame&quot;</span><br></pre></td></tr></table></figure>

<h2 id="不准确的词条"><a href="#不准确的词条" class="headerlink" title="不准确的词条"></a>不准确的词条</h2><p>使用 “globs”（通配符 <code>?</code> 表示单个字符, <code>*</code> 表示任意数量字符）来匹配词条：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">te?t test* *b?g*</span><br></pre></td></tr></table></figure>

<p>请注意，以 <code>?</code> 或 <code>*</code> 开头的通配符非常慢。另请注意，这些通配符仅匹配个别词条。例如，查询：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">my*life</span><br></pre></td></tr></table></figure>

<p>不会匹配像这样的索引短语：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">my so called life</span><br></pre></td></tr></table></figure>

<p>因为那是四个独立的词条。</p>
<h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p>你可以匹配一系列词条。例如，以下查询将匹配包含词汇范围从 <code>apple</code> 到 <code>bear</code> 的词条的文档。例如，它将匹配包含 <code>azores</code> 与 <code>be</code> 但不包含 <code>blur</code> 的文档 ：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[apple TO bear]</span><br></pre></td></tr></table></figure>

<p>例如，当你以词法排序格式（即 YYYYMMDD）存储日期时，这非常有用：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">date:[20050101 TO 20090715]</span><br></pre></td></tr></table></figure>

<p>该范围通常是包含在内的（也就是说，该范围将匹配开始和结束词条之间的所有词条，以及开始和结束词条本身）。你可以使用 <code>&#123;</code> 和 <code>&#125;</code> 字符指定范围的一端或两端排除：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[0000 TO 0025&#125;</span><br><span class="line">&#123;prefix TO suffix&#125;</span><br></pre></td></tr></table></figure>

<p>你还可以通过省略开始或结束词条来指定开放式范围：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[0025 TO]</span><br><span class="line">&#123;TO suffix&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提升-Boosting-查询元素"><a href="#提升-Boosting-查询元素" class="headerlink" title="提升 (Boosting) 查询元素"></a>提升 (Boosting) 查询元素</h2><p>你可以指定查询的某些部分对于计算匹配文档的分数比其他部分更重要。例如，指定 <code>ninja</code> 重要性是其他词的两倍，并且 <code>bear</code> 是其他词的一半：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ninja^2 cowboy bear^0.5</span><br></pre></td></tr></table></figure>

<p>你可以使用分组括号对多个词条应用提升：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(open sesame)^2.5 roc</span><br></pre></td></tr></table></figure>

<h2 id="从文字文本中创建一个词条"><a href="#从文字文本中创建一个词条" class="headerlink" title="从文字文本中创建一个词条"></a>从文字文本中创建一个词条</h2><p>如果你需要在词条中包含通常由解析器特殊处理的字符，例如空格、冒号或方括号，你可以将词条括在单引号中：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">path:&#x27;MacHD:My Documents&#x27;</span><br><span class="line">&#x27;term with spaces&#x27;</span><br><span class="line">title:&#x27;function()&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 09 - 索引和解析日期/时间</title>
    <url>/whoosh/09-%E7%B4%A2%E5%BC%95%E5%92%8C%E8%A7%A3%E6%9E%90%E6%97%A5%E6%9C%9F&amp;%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="索引日期"><a href="#索引日期" class="headerlink" title="索引日期"></a>索引日期</h2><p>Whoosh 允许你使用 <code>whoosh.fields.DATETIME</code> 字段类型索引和搜索日期&#x2F;时间。你没有为 <code>add_document()</code> 中的字段传递文本 ，而是使用 <code>Pythondatetime.datetime</code> 对象：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> fields, index</span><br><span class="line"></span><br><span class="line">schema = fields.Schema(title=fields.TEXT, content=fields.TEXT,</span><br><span class="line">                       date=fields.DATETIME)</span><br><span class="line">ix = index.create_in(<span class="string">&quot;indexdir&quot;</span>, schema)</span><br><span class="line"></span><br><span class="line">w = ix.writer()</span><br><span class="line">w.add_document(title=<span class="string">&quot;Document 1&quot;</span>, content=<span class="string">&quot;Rendering images from the command line&quot;</span>,</span><br><span class="line">               date=datetime.utcnow())</span><br><span class="line">w.add_document(title=<span class="string">&quot;Document 2&quot;</span>, content=<span class="string">&quot;Creating shaders using a node network&quot;</span>,</span><br><span class="line">               date=datetime.utcnow() + timedelta(days=<span class="number">1</span>))</span><br><span class="line">w.commit()</span><br></pre></td></tr></table></figure>

<h2 id="解析日期查询"><a href="#解析日期查询" class="headerlink" title="解析日期查询"></a>解析日期查询</h2><p>有了 <code>DATETIME</code> 索引字段后，你可以使用包含在以下内容中的丰富日期解析器 <code>whoosh.qparser.dateparse.DateParserPlugin</code> 来搜索它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> index</span><br><span class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</span><br><span class="line"><span class="keyword">from</span> whoosh.qparser.dateparse <span class="keyword">import</span> DateParserPlugin</span><br><span class="line"></span><br><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个查询解析器</span></span><br><span class="line">qp = QueryParser(<span class="string">&quot;content&quot;</span>, ix.schema)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将日期解析器插件添加到解析器</span></span><br><span class="line">qp.add_plugin(DateParserPlugin())</span><br></pre></td></tr></table></figure>

<p>通过 <code>DateParserPlugin</code>，用户可以使用日期查询，例如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">20050912</span><br><span class="line">2005 sept 12th</span><br><span class="line">june 23 1978</span><br><span class="line">23 mar 2005</span><br><span class="line">july 1985</span><br><span class="line">sep 12</span><br><span class="line">today</span><br><span class="line">yesterday</span><br><span class="line">tomorrow</span><br><span class="line">now</span><br><span class="line">next friday</span><br><span class="line">last tuesday</span><br><span class="line">5am</span><br><span class="line">10:25:54</span><br><span class="line">23:12</span><br><span class="line">8 PM</span><br><span class="line">4:46 am oct 31 2010</span><br><span class="line">last tuesday to today</span><br><span class="line">today to next friday</span><br><span class="line">jan 2005 to feb 2008</span><br><span class="line">-1 week to now</span><br><span class="line">now to +2h</span><br><span class="line">-1y6mo to +2 yrs 23d</span><br></pre></td></tr></table></figure>

<p>通常，与其他类型的包含空格的查询一样，用户需要使用单引号引用包含空格的日期查询：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">render date:&#x27;last tuesday&#x27; command</span><br><span class="line">date:[&#x27;last tuesday&#x27; to &#x27;next friday&#x27;]</span><br></pre></td></tr></table></figure>

<p>如果你使用 <code>DateParserPlugin</code> 的 <code>free</code> 参数，插件将尝试从日期字段前缀后的未引号文本中解析日期：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qp.add_plugin(DateParserPlugin(free=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<p>这允许用户在日期字段名称和冒号之后键入带有空格和特殊字符的日期查询。日期查询可以与不带引号的其他类型的查询混合使用：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">date:last tuesday</span><br><span class="line">render date:oct 15th 2001 5:20am command</span><br></pre></td></tr></table></figure>

<p>如果你不使用 <code>DateParserPlugin</code>，用户仍然可以使用 <code>DATETIME</code> 字段中内置的简单数字形式 <code>YYYY[MM[DD[hh[mm[ss]]]]]</code> 搜索 <code>DATETIME</code> 字段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> index</span><br><span class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</span><br><span class="line"></span><br><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line">qp = QueryParser(<span class="string">&quot;content&quot;</span>, schema=ix.schema)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find all datetimes in 2005</span></span><br><span class="line">q = qp.parse(<span class="string">u&quot;date:2005&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find all datetimes on June 24, 2005</span></span><br><span class="line">q = qp.parse(<span class="string">u&quot;date:20050624&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find all datetimes from 1am-2am on June 24, 2005</span></span><br><span class="line">q = qp.parse(<span class="string">u&quot;date:2005062401&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find all datetimes from Jan 1, 2005 to June 2, 2010</span></span><br><span class="line">q = qp.parse(<span class="string">u&quot;date:[20050101 to 20100602]&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="关于时区和基准时间"><a href="#关于时区和基准时间" class="headerlink" title="关于时区和基准时间"></a>关于时区和基准时间</h2><p>处理时区的最佳方法是始终以 <code>datetime</code> 本地 UTC 格式索引,索引器忽略 <code>datetime</code> 对象上的任何 <code>tzinfo</code> 属性。如果你使用的是本地日期时间，则应在编制索引之前将它们转换为本机 UTC 日期时间。</p>
<h2 id="日期解析器注释"><a href="#日期解析器注释" class="headerlink" title="日期解析器注释"></a>日期解析器注释</h2><p>请注意，日期解析器仍处于试验阶段。</p>
<h2 id="设置基准日期时间"><a href="#设置基准日期时间" class="headerlink" title="设置基准日期时间"></a>设置基准日期时间</h2><p>当你创建 <code>DateParserPlugin</code> 时， 你可以将一个 <code>datetime</code> 对象传递给 <code>basedate</code> 参数以设置测量相关查询（例如<code>last tuesday</code>和<code>-2 hours</code>）所依据的日期时间。默认情况下，基准时间是在插件被实例化的那一刻的 <code>datetime.utcnow()</code>：</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 10 - 查询对象</title>
    <url>/whoosh/10-%E6%9F%A5%E8%AF%A2%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 11 - 分析器 (analyzers)</title>
    <url>/whoosh/11-%E5%88%86%E6%9E%90%E5%99%A8%20(Analyzers)/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>分析器 (analyzers) 是一个函数或可调用类（具有 <code>__call__</code> 方法的类），它接受一个 unicode 字符串并返回一个标记 (tokens) 生成器。 </p>
<span id="more"></span>

<p>通常标记 (token) 是一个单词，例如字符串 “Mary had a little lamb” 可能会产生 “Mary”、“had”、“a”、“little” 和 “lamb” 标记。 但是，标记不一定对应于单词。 例如，你可以将中文文本标记为单个字符或二元语法。 标记是索引 (index) 的单位，也就是说，它们是你可以在索引中查找的内容。</p>
<p>分析器基本上只是一个分词器 (tokenizer) 和 一组过滤器 (filter) 的包装器 (wrapper)。 分析器 (analyzers) 的 <code>__call__</code> 方法会将其参数传递给分词器 (tokenizer)，而分词器通常会被包裹在几个过滤器中。</p>
<p>分词器是一个可调用的 (callable)，它接受一个 unicode 字符串并产生一系列 <code>analysis.Token</code> 对象。</p>
<p>例如，内置的正则分词器 (<code>whoosh.analysis.RegexTokenizer</code>) 类实现了一个可定制的、基于正则表达式的分词器，它提取单词并忽略空格和标点符号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> RegexTokenizer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tokenizer = RegexTokenizer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> token <span class="keyword">in</span> tokenizer(<span class="string">u&quot;Hello there my friend!&quot;</span>):</span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span> <span class="built_in">repr</span>(token.text)</span><br><span class="line"><span class="string">u&#x27;Hello&#x27;</span></span><br><span class="line"><span class="string">u&#x27;there&#x27;</span></span><br><span class="line"><span class="string">u&#x27;my&#x27;</span></span><br><span class="line"><span class="string">u&#x27;friend&#x27;</span></span><br></pre></td></tr></table></figure>

<p>过滤器 (filter) 是一个可调用对象，它接受标记生成器 (generator of tokens) 或另一个过滤器，然后生成一系列标记。</p>
<p>例如，内置的小写字母过滤器 (<code>whoosh.analysis.LowercaseFilter()</code>) 通过将文本转换为小写来过滤标记。 其内部实现非常简单：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">LowercaseFilter</span>(<span class="params">tokens</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 lower() 将标记文本小写。例如，标记</span></span><br><span class="line"><span class="string">    &quot;This&quot;,&quot;is&quot;,&quot;a&quot;,&quot;TEST&quot; 转换成 &quot;this&quot;,&quot;is&quot;,&quot;a&quot;,&quot;test&quot;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tokens:</span><br><span class="line">        t.text = t.text.lower()</span><br><span class="line">        <span class="keyword">yield</span> t</span><br></pre></td></tr></table></figure>

<p>你可以将过滤器 (filter) 包裹在分词器 (tokenizer) 外以查看其运行情况：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> LowercaseFilter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> token <span class="keyword">in</span> LowercaseFilter(tokenizer(<span class="string">u&quot;These ARE the things I want!&quot;</span>)):</span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span> <span class="built_in">repr</span>(token.text)</span><br><span class="line"><span class="string">u&#x27;these&#x27;</span></span><br><span class="line"><span class="string">u&#x27;are&#x27;</span></span><br><span class="line"><span class="string">u&#x27;the&#x27;</span></span><br><span class="line"><span class="string">u&#x27;things&#x27;</span></span><br><span class="line"><span class="string">u&#x27;i&#x27;</span></span><br><span class="line"><span class="string">u&#x27;want&#x27;</span></span><br></pre></td></tr></table></figure>

<p>分析器只是将分词器和一些过滤器组合到一个包 (package) 中的一种方法。</p>
<p>你可以将分析器实现为自定义类或函数，或者使用 <code>|</code> 将分词器和过滤器组合在一起。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_analyzer = RegexTokenizer() | LowercaseFilter() | StopFilter()</span><br></pre></td></tr></table></figure>

<p>第一项必须是分词器，其余必须是过滤器（不能先放过滤器，也不能在第一项后放分词器）。 请注意，这仅在分词器是 <code>whoosh.analysis.Composable</code> 的子类时才有效，因为 Whoosh 附带的所有分词器和过滤器都是。</p>
<p>有关 Whoosh 附带的可用分析器、分词器和过滤器的信息，请参阅 <code>whoosh.analysis</code> 模块。</p>
<h2 id="使用分析器"><a href="#使用分析器" class="headerlink" title="使用分析器"></a>使用分析器</h2><p>在模式 (schema) 中创建字段时，可以将分析器作为参数传递给字段 (field) 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = Schema(content=TEXT(analyzer=StemmingAnalyzer()))</span><br></pre></td></tr></table></figure>

<h2 id="高级解析-Analysis"><a href="#高级解析-Analysis" class="headerlink" title="高级解析 (Analysis)"></a>高级解析 (Analysis)</h2><h3 id="标记-Token-对象"><a href="#标记-Token-对象" class="headerlink" title="标记 (Token) 对象"></a>标记 (Token) 对象</h3><p><code>Token</code> 类没有方法。 它只是一个记录某些属性的地方。 <code>Token</code> 对象实际上有两种属性：记录 <code>Token</code> 对象包含或应该包含什么样的信息的设置，以及关于当前标记 (token) 的信息。</p>
<h3 id="标记设置属性"><a href="#标记设置属性" class="headerlink" title="标记设置属性"></a>标记设置属性</h3><p>标记对象应始终具有以下属性。 标记器或过滤器可以检查这些属性以查看可用的信息类型和它们应该在标记对象上设置的信息类型。</p>
<p>这些属性由分词器在创建分词时根据从分析器传递给它的参数设置。</p>
<p>过滤器不应更改这些属性的值。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>属性名称</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody><tr>
<td>str</td>
<td>mode</td>
<td>调用分析器的模式，例如 索引 (indexing) 期间的 索引 (index) 或解析 (parsing) 期间的查询(query)</td>
<td>‘’</td>
</tr>
<tr>
<td>bool</td>
<td>positions</td>
<td>词条 (term) 位置 (position) 是否记录在标记中</td>
<td>False</td>
</tr>
<tr>
<td>bool</td>
<td>chars</td>
<td>标记中是否记录了词条开始和结束字符索引</td>
<td>False</td>
</tr>
<tr>
<td>bool</td>
<td>boosts</td>
<td>每词条的提升 (boosts) 是否被记录在标记中</td>
<td>False</td>
</tr>
<tr>
<td>bool</td>
<td>removestops</td>
<td>是否应该从标记流中删除停用词</td>
<td>True</td>
</tr>
</tbody></table>
<h3 id="标记信息属性"><a href="#标记信息属性" class="headerlink" title="标记信息属性"></a>标记信息属性</h3><p><code>Token</code> 对象可能具有以下任何属性。 文本 (<code>text</code>) 属性应该始终存在。原文本 (<code>original</code>) 属性可以由分词器设置。 所有其他属性只能根据上述 <code>settings</code> 属性的值进行访问或设置。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>unicode</td>
<td>text</td>
<td>标记的文本（这应该始终存在）</td>
</tr>
<tr>
<td>unicode</td>
<td>original</td>
<td>标记的原始（过滤前）文本。 分词器可能会记录这一点，过滤器不应该修改它。</td>
</tr>
<tr>
<td>int</td>
<td>pos</td>
<td>标记在流中的位置，从 0 开始（仅当 positions 为 True 时设置）</td>
</tr>
<tr>
<td>int</td>
<td>startchar</td>
<td>原文本中标记开始的字符索引（仅当 chars 为 True 时设置）</td>
</tr>
<tr>
<td>int</td>
<td>endchar</td>
<td>原文本中标记结尾的字符索引（仅当 chars 为 True 时设置）</td>
</tr>
<tr>
<td>float</td>
<td>boost</td>
<td>该标记的提升（仅当 boosts 为 True 时设置）</td>
</tr>
<tr>
<td>bool</td>
<td>stopped</td>
<td>此标记是否为停止 (stop) 词（仅在 removestops 为 False 时设置）</td>
</tr>
</tbody></table>
<p>那么为什么大部分信息属性都是可选的呢？ 不同的字段格式需要关于每个标记的不同级别的信息。 例如，频率 (<code>Frequency</code>) 格式只需要标记文本。 位置 (<code>Positions</code>) 格式记录了词条位置，因此它需要在 <code>Token</code> 上使用它们。 特征 (<code>Characters</code>) 格式记录词条位置以及每个词条的开始和结束字符索引，因此它需要它们在标记上，等等。</p>
<p>表示每个字段格式的 <code>Format</code> 对象调用该字段的分析器，并向其传递与其所需信息类型对应的参数，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">analyzer(unicode_string, positions=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>然后，分析器可以将该信息传递给分词器，以便分词器在它生成的标记对象上初始化所需的属性。</p>
<h3 id="对索引和查询解析执行不同的分析"><a href="#对索引和查询解析执行不同的分析" class="headerlink" title="对索引和查询解析执行不同的分析"></a>对索引和查询解析执行不同的分析</h3><p>Whoosh 设置 <code>mode</code> 的设置 (setting) 属性以指示分析器是由索引器 (<code>mode=&#39;index&#39;</code>) 还是查询解析器 (<code>mode=&#39;query&#39;</code>) 调用的。 如果你只想在索引或查询解析中应用转换，这将很有用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyFilter</span>(<span class="title class_ inherited__">Filter</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, tokens</span>):</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> tokens:</span><br><span class="line">            <span class="keyword">if</span> t.mode == <span class="string">&#x27;query&#x27;</span>:</span><br><span class="line">                ...</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<p><code>whoosh.analysis.MultiFilter</code> 过滤器类允许你根据模式设置指定要使用的不同过滤器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">intraword = MultiFilter(index=IntraWordFilter(mergewords=<span class="literal">True</span>, mergenums=<span class="literal">True</span>),</span><br><span class="line">                        query=IntraWordFilter(mergewords=<span class="literal">False</span>, mergenums=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<h3 id="停止-Stop-词"><a href="#停止-Stop-词" class="headerlink" title="停止 (Stop) 词"></a>停止 (Stop) 词</h3><p>停止 (Stop) 词是非常常见的词，索引它们通常会适得其反，例如 “and”、“or”、“if”等。内置的停止词过滤器 <code>analysis.StopFilter</code> 可让你过滤掉停止词，并包含一个常见停用词的默认列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> StopFilter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stopper = StopFilter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> token <span class="keyword">in</span> stopper(LowercaseFilter(tokenizer(<span class="string">u&quot;These ARE the things I want!&quot;</span>))):</span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span> <span class="built_in">repr</span>(token.text)</span><br><span class="line"><span class="string">u&#x27;these&#x27;</span></span><br><span class="line"><span class="string">u&#x27;things&#x27;</span></span><br><span class="line"><span class="string">u&#x27;want&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然而，这个看似简单的过滤器想法引发了一些小但略微棘手的问题：重新编号词条位置以及保留或删除停用词。</p>
<h3 id="重新编号词条位置"><a href="#重新编号词条位置" class="headerlink" title="重新编号词条位置"></a>重新编号词条位置</h3><p>请记住，有时会要求分析器记录标记流中每个标记的位置：</p>
<table>
<thead>
<tr>
<th>Token.text</th>
<th>u’Mary’</th>
<th>u’had’</th>
<th>u’a’</th>
<th>u’lamb’</th>
</tr>
</thead>
<tbody><tr>
<td>Token.pos</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody></table>
<p>那么，如果 <code>StopFilter</code> 从流中删除单词 <code>had</code> 和 <code>a</code>，标记的 <code>pos</code> 属性会发生什么情况？ 它是否应该重新编号位置以假装“停止”的词从未存在过？ 这样：</p>
<table>
<thead>
<tr>
<th>Token.text</th>
<th>u’Mary’</th>
<th>u’lamb’</th>
</tr>
</thead>
<tbody><tr>
<td>Token.pos</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>还是应该保留单词的原始位置？ 这样：</p>
<table>
<thead>
<tr>
<th>Token.text</th>
<th>u’Mary’</th>
<th>u’lamb’</th>
</tr>
</thead>
<tbody><tr>
<td>Token.pos</td>
<td>0</td>
<td>3</td>
</tr>
</tbody></table>
<p>事实证明，不同的情况需要不同的解决方案，因此提供的 <code>StopFilter</code> 类支持上述两种行为。 重新编号是默认设置，因为这通常是最有用的并且是支持短语搜索所必需的。 但是，你可以在 <code>StopFilter</code> 的构造函数中设置一个参数，告诉它不要对位置重新编号：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stopper = StopFilter(renumber=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="删除或留下停用词"><a href="#删除或留下停用词" class="headerlink" title="删除或留下停用词"></a>删除或留下停用词</h3><p>使用 <code>StopFilter</code> 的目的是去除停用词，对吧？ 好吧，实际上在某些情况下，你可能希望将标记 (mark) 标记 (token) 为“已停止”，但不想将它们从标记流中删除。</p>
<p>例如，如果你正在编写自己的查询解析器，则可以通过字段的分析器运行用户的查询，将其分解为标记。 在这种情况下，你可能想知道哪些词被“停止”，以便你可以向最终用户提供有用的反馈,例如“以下词太常见而无法搜索：” (“The following words are too common to search for:”)。</p>
<p>在其他情况下，你可能希望在流中为某些过滤步骤保留停用词（例如，你可能有一个查看先前标记的步骤，并希望停用标记成为该过程的一部分），然后将其删除之后。</p>
<p>分析模块提供了一些工具来保留和删除流中的停用词。</p>
<p>传递给分析器的 <code>__call__</code> 方法（并作为属性复制到 <code>Token</code> 对象）的 <code>removestops</code> 参数指定停用词是从流中删除还是留在流中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> StandardAnalyzer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>analyzer = StandardAnalyzer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(t.text, t.stopped) <span class="keyword">for</span> t <span class="keyword">in</span> analyzer(<span class="string">u&quot;This is a test&quot;</span>)]</span><br><span class="line">[(<span class="string">u&#x27;test&#x27;</span>, <span class="literal">False</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(t.text, t.stopped) <span class="keyword">for</span> t <span class="keyword">in</span> analyzer(<span class="string">u&quot;This is a test&quot;</span>, removestops=<span class="literal">False</span>)]</span><br><span class="line">[(<span class="string">u&#x27;this&#x27;</span>, <span class="literal">True</span>), (<span class="string">u&#x27;is&#x27;</span>, <span class="literal">True</span>), (<span class="string">u&#x27;a&#x27;</span>, <span class="literal">True</span>), (<span class="string">u&#x27;test&#x27;</span>, <span class="literal">False</span>)]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>笔记</p>
<p>即使你在用于索引的分析器的流中留下停止词，索引器也会忽略停止属性 (<code>stopped</code>) 为 <code>True</code> 的任何标记。</p>
</blockquote>
<h3 id="实施说明"><a href="#实施说明" class="headerlink" title="实施说明"></a>实施说明</h3><p>因为在 Python 中创建对象很慢，所以分词器不会为每个标记的对象创建新的 <code>analysis.Token</code> 对象。而是创建一个 <code>Token</code> 对象并一遍又一遍地产生 (yield) 它。 这是一个很好的性能捷径，但如果你的代码试图记住生成器循环之间的标记，则可能会导致奇怪的行为。</p>
<p>因为分析器只有一个 <code>Token</code> 对象，它会不断更改其属性，如果你保留一份从生成器循环中获得的 <code>Token</code> 的副本，它不应这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(tokenizer(<span class="string">u&quot;Hello there my friend&quot;</span>))</span><br><span class="line">[Token(<span class="string">u&quot;friend&quot;</span>), Token(<span class="string">u&quot;friend&quot;</span>), Token(<span class="string">u&quot;friend&quot;</span>), Token(<span class="string">u&quot;friend&quot;</span>)]</span><br></pre></td></tr></table></figure>

<p>而是这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[t.text <span class="keyword">for</span> t <span class="keyword">in</span> tokenizer(<span class="string">u&quot;Hello there my friend&quot;</span>)]</span><br></pre></td></tr></table></figure>

<p>也就是说，保存标记对象的属性，而不是保存标记对象。</p>
<p>如果你将自己的分词器、过滤器或分析器实现为类，则应实现 <code>__eq__</code> 方法。 这对于允许比较模式 (<code>Schema</code>) 对象很重要。</p>
<p>在 <code>Token</code> 对象上混合 (mixing) 持久设置 (<code>setting</code>) 和瞬态信息 (<code>information</code>) 属性并不是特别优雅。 如果我有更好的想法，我可能会改变它。 ;) 不需要通过调用分词器和过滤器来实现分析器。 分词器和过滤器只是一种构造代码的便捷方式。 你可以随意编写分析器，只要它实现了 <code>__call__</code> 即可。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 12 - 词干提取 (stemming)、变体 (variations) 和重音折叠 (accent folding)</title>
    <url>/whoosh/12-Stemming/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>索引文本通常包含与用户搜索的形式不同的词。 例如，如果用户搜索 <code>render</code>，我们希望搜索不仅匹配包含 <code>render</code> 的文档，还匹配 <code>renders</code>、<code>rendering</code>、<code>rendered</code> 等。</p>
<span id="more"></span>

<p>相关问题之一是口音。 名称和外来词可能在原始文本中包含重音符号，但在用户查询中不包含重音符号，反之亦然。 例如，我们希望用户能够搜索 <code>cafe</code> 并找到包含 <code>café</code> 的文档。</p>
<p><code>whoosh.fields.TEXT</code> 字段的默认分析器不进行词干提取或重音折叠。</p>
<h2 id="词干提取-Stemming"><a href="#词干提取-Stemming" class="headerlink" title="词干提取 (Stemming)"></a>词干提取 (Stemming)</h2><p>词干提取 (Stemming) 是一种启发式过程，它从单词中删除前缀或后缀以到达基本单词。 Whoosh 包括多种词干提取算法，例如 Porter 和 Porter2、Paice Husk 和 Lovins。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.lang.porter <span class="keyword">import</span> stem</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stem(<span class="string">&quot;rendering&quot;</span>)</span><br><span class="line"><span class="string">&#x27;render&#x27;</span></span><br></pre></td></tr></table></figure>

<p>词干过滤器将词干提取功能应用于它索引的词条以及用户查询中的词。 因此理论上，词根的所有变体（“render”、“rendered”、“renders”、“rendering”等）都被缩减为索引中的单个词条，从而节省了空间。 并且用户在查询中可能使用的所有可能变体都被简化为根，因此词干提取增强了“召回率”。</p>
<p><code>whoosh.analysis.StemFilter</code> 允许你将词干过滤器添加到分析器链。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rext = RegexTokenizer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stream = rext(<span class="string">u&quot;fundamentally willows&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stemmer = StemFilter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[token.text <span class="keyword">for</span> token <span class="keyword">in</span> stemmer(stream)]</span><br><span class="line">[<span class="string">u&quot;fundament&quot;</span>, <span class="string">u&quot;willow&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><code>whoosh.analysis.StemmingAnalyzer()</code> 是一个预打包的分析器，结合了分词器、小写过滤器、可选的停止过滤器和词干过滤器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> fields</span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> StemmingAnalyzer</span><br><span class="line"></span><br><span class="line">stem_ana = StemmingAnalyzer()</span><br><span class="line">schema = fields.Schema(title=TEXT(analyzer=stem_ana, stored=<span class="literal">True</span>),</span><br><span class="line">                       content=TEXT(analyzer=stem_ana))</span><br></pre></td></tr></table></figure>

<p>词干提取有利也有弊。</p>
<ul>
<li>它允许用户查找文档而不用担心单词形式。</li>
<li>它减少了索引的大小，因为它减少了通过将多个单词形式“折叠”为单个基本单词而索引的单独词条的数量。</li>
<li>它比使用变体更快（见下文）</li>
<li>词干提取算法有时会错误地合并单词或通过删除后缀来更改单词的含义。</li>
<li>词干形式通常不是正确的词，因此该字段中的词条对于创建拼写词典等事情没有用。</li>
</ul>
<h2 id="变体-Variations"><a href="#变体-Variations" class="headerlink" title="变体 (Variations)"></a>变体 (Variations)</h2><p>词干提取以基本形式对索引中的单词进行编码，而当你使用变体 (variations) 时，你改为“按原样”索引单词，并在查询时使用启发式算法扩展用户查询中的单词以生成单词的形态变体。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> whoosh.lang.morph_en <span class="keyword">import</span> variations</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>variations(<span class="string">&quot;rendered&quot;</span>)</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;rendered&#x27;</span>, <span class="string">&#x27;rendernesses&#x27;</span>, <span class="string">&#x27;render&#x27;</span>, <span class="string">&#x27;renderless&#x27;</span>, <span class="string">&#x27;rendering&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;renderness&#x27;</span>, <span class="string">&#x27;renderes&#x27;</span>, <span class="string">&#x27;renderer&#x27;</span>, <span class="string">&#x27;renderements&#x27;</span>, <span class="string">&#x27;rendereless&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;renderenesses&#x27;</span>, <span class="string">&#x27;rendere&#x27;</span>, <span class="string">&#x27;renderment&#x27;</span>, <span class="string">&#x27;renderest&#x27;</span>, <span class="string">&#x27;renderement&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;rendereful&#x27;</span>, <span class="string">&#x27;renderers&#x27;</span>, <span class="string">&#x27;renderful&#x27;</span>, <span class="string">&#x27;renderings&#x27;</span>, <span class="string">&#x27;renders&#x27;</span>, <span class="string">&#x27;renderly&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;renderely&#x27;</span>, <span class="string">&#x27;rendereness&#x27;</span>, <span class="string">&#x27;renderments&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>为给定单词生成的许多变体将不是有效单词，但 Whoosh 可以相当快地检查索引中实际存在哪些变体并仅搜索这些变体。</p>
<p><code>whoosh.query.Variations</code> 查询对象允许你搜索单词的变体。 普通的 <code>whoosh.query.Term</code> 对象只搜索给定的词条，而变体查询就像一个 Or 查询，用于索引中给定单词的变体。 例如，查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.Variations(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;rendered&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>…可能会像这样（取决于索引中的单词）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.Or([query.Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;render&quot;</span>), query.Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;rendered&quot;</span>),</span><br><span class="line">          query.Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;renders&quot;</span>), query.Term(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;rendering&quot;</span>)])</span><br></pre></td></tr></table></figure>

<p>要让查询解析器对单个词条使用 <code>whoosh.query.Variations</code> 而不是 <code>whoosh.query.Term</code>，请使用解析器初始化方法的 <code>termclass</code> 关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> qparser, query</span><br><span class="line"></span><br><span class="line">qp = qparser.QueryParser(<span class="string">&quot;content&quot;</span>, termclass=query.Variations)</span><br></pre></td></tr></table></figure>

<p>变体 (Variations) 有利也有弊。</p>
<ul>
<li>它允许用户查找文档而不用担心单词形式。</li>
<li>字段中的词条是实际单词，而不是词干，因此你可以将该字段的内容用于其他目的，例如拼写检查查询。</li>
<li>它增加了相对于词干提取的索引大小，因为不同的单词形式分别被索引。</li>
<li>它的作用类似于 Or 搜索所有变体，这比搜索单个词条要慢。</li>
</ul>
<h2 id="词形还原-Lemmatization"><a href="#词形还原-Lemmatization" class="headerlink" title="词形还原 (Lemmatization)"></a>词形还原 (Lemmatization)</h2><p>词干提取是一种有点“蛮力”的机械尝试，使用简单的规则将单词简化为基本形式，而词形还原通常是指使用语言模型找到单词基本形式（“引理”）的更复杂的方法，通常涉及分析 周围上下文和词性标注。<br>Whoosh 不包含任何词形还原函数，但如果你有单独的词形还原代码，你可以编写自定义 whoosh.analysis.Filter 以将其集成到 Whoosh 分析器中。</p>
<h2 id="字符折叠-Character-folding"><a href="#字符折叠-Character-folding" class="headerlink" title="字符折叠(Character folding)"></a>字符折叠(Character folding)</h2><p>你可以设置一个分析器来处理 <code>á</code>、<code>a</code>、<code>å</code> 和 <code>â</code> 等同于提高召回率。 这通常非常有用，例如，允许用户键入 <code>cafe</code> 或 <code>resume</code> 并查找包含 <code>café</code> 和 <code>resumé</code> 的文档。</p>
<p>字符折叠对于可能出现在亚洲语言文本中的 unicode 字符特别有用，这些字符应该被视为等同于它们的 ASCII 等效字符，例如“半角”字符。</p>
<p>字符折叠并不总是灵丹妙药。 请参阅这篇文章，了解重音折叠可能在何处崩溃的警告。</p>
<p><a href="http://www.alistapart.com/articles/accent-folding-for-auto-complete/">http://www.alistapart.com/articles/accent-folding-for-auto-complete/</a></p>
<p>Whoosh 包含多种用于向分析器添加字符折叠的机制。</p>
<p><code>whoosh.analysis.CharsetFilter</code> 将字符映射应用于标记文本。 例如，它会将标记 <code>u&#39;café&#39;, u&#39;resumé&#39;, ...</code> 过滤为 <code>u&#39;cafe&#39;, u&#39;resume&#39;, ...</code>。这通常是你想要使用的方法，除非你需要 使用字符集来标记词条：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> CharsetFilter, StemmingAnalyzer</span><br><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> fields</span><br><span class="line"><span class="keyword">from</span> whoosh.support.charset <span class="keyword">import</span> accent_map</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如，将重音折叠过滤器添加到词干分析器：</span></span><br><span class="line">my_analyzer = StemmingAnalyzer() | CharsetFilter(accent_map)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在你的模式中使用这个分析器：</span></span><br><span class="line">my_schema = fields.Schema(content=fields.TEXT(analyzer=my_analyzer))</span><br></pre></td></tr></table></figure>

<p><code>whoosh.analysis.CharsetTokenizer</code> 使用 Sphinx 字符集表来分隔词条和执行字符折叠。 此分词器比 <code>whoosh.analysis.RegexTokenizer</code> 慢，因为它循环遍历 Python 中的每个字符。 如果你正在索引的语言可以使用正则表达式进行标记化，那么结合使用 <code>RegexTokenizer</code> 和 <code>CharsetFilter</code> 会比使用 <code>CharsetTokenizer</code> 快得多。</p>
<p><code>whoosh.support.charset</code> 模块包含对大多数西方语言有用的重音折叠映射，以及更广泛的 Sphinx 字符集表和将 Sphinx 字符集表转换为 <code>CharsetTokenizer</code> 和 <code>CharsetFilter</code> 所需的字符映射的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用大量字符映射为大多数语言创建过滤器</span></span><br><span class="line"><span class="comment"># 从 Sphinx 字符集表生成</span></span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> CharsetFilter</span><br><span class="line"><span class="keyword">from</span> whoosh.support.charset <span class="keyword">import</span> default_charset, charset_table_to_dict</span><br><span class="line">charmap = charset_table_to_dict(default_charset)</span><br><span class="line">my_analyzer = StemmingAnalyzer() | CharsetFilter(charmap)</span><br></pre></td></tr></table></figure>

<p>（Sphinx 字符集表格式在 <a href="http://www.sphinxsearch.com/docs/current.html#conf-charset-table">http://www.sphinxsearch.com/docs/current.html#conf-charset-table</a> 中有描述）</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 13 - 索引和搜索 N-gram</title>
    <url>/whoosh/13-%E7%B4%A2%E5%BC%95%E5%92%8C%E6%90%9C%E7%B4%A2%20N-gram/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>N-gram 索引是获得快速“键入时搜索”功能（如 iTunes）的强大方法。 它还可用于快速有效地索引中文和日语等语言而无需分词。</p>
<p>N-grams 是指 N 个字符的组…bigrams 是两个字符的组，trigrams 是三个字符的组，等等。</p>
<span id="more"></span>

<p>Whoosh 包含两种分析 N-gram 字段的方法：N-gram 标记器和将标记分解为 N-gram 的过滤器。</p>
<p><code>whoosh.analysis.NgramTokenizer</code> 将整个字段标记为 N-gram。 这对于中文&#x2F;日语&#x2F;韩语更有用，在这些语言中，索引字符的双字母而不是单个字符很有用。 将此标记器与罗马语言一起使用会导致标记中出现空格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ngt = NgramTokenizer(minsize=<span class="number">2</span>, maxsize=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[token.text <span class="keyword">for</span> token <span class="keyword">in</span> ngt(<span class="string">u&quot;hi there&quot;</span>)]</span><br><span class="line">[<span class="string">u&#x27;hi&#x27;</span>, <span class="string">u&#x27;hi &#x27;</span>, <span class="string">u&#x27;hi t&#x27;</span>,<span class="string">u&#x27;i &#x27;</span>, <span class="string">u&#x27;i t&#x27;</span>, <span class="string">u&#x27;i th&#x27;</span>, <span class="string">u&#x27; t&#x27;</span>, <span class="string">u&#x27; th&#x27;</span>, <span class="string">u&#x27; the&#x27;</span>, <span class="string">u&#x27;th&#x27;</span>,</span><br><span class="line"><span class="string">u&#x27;the&#x27;</span>, <span class="string">u&#x27;ther&#x27;</span>, <span class="string">u&#x27;he&#x27;</span>, <span class="string">u&#x27;her&#x27;</span>, <span class="string">u&#x27;here&#x27;</span>, <span class="string">u&#x27;er&#x27;</span>, <span class="string">u&#x27;ere&#x27;</span>, <span class="string">u&#x27;re&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><code>whoosh.analysis.NgramFilter</code> 将单个标记分解为 N-gram 作为分析管道的一部分。 这对于有分词的语言更有用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_analyzer = StandardAnalyzer() | NgramFilter(minsize=<span class="number">2</span>, maxsize=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[token.text <span class="keyword">for</span> token <span class="keyword">in</span> my_analyzer(<span class="string">u&quot;rendering shaders&quot;</span>)]</span><br><span class="line">[<span class="string">u&#x27;ren&#x27;</span>, <span class="string">u&#x27;rend&#x27;</span>, <span class="string">u&#x27;end&#x27;</span>, <span class="string">u&#x27;ende&#x27;</span>, <span class="string">u&#x27;nde&#x27;</span>, <span class="string">u&#x27;nder&#x27;</span>, <span class="string">u&#x27;der&#x27;</span>, <span class="string">u&#x27;deri&#x27;</span>, <span class="string">u&#x27;eri&#x27;</span>,</span><br><span class="line"><span class="string">u&#x27;erin&#x27;</span>, <span class="string">u&#x27;rin&#x27;</span>, <span class="string">u&#x27;ring&#x27;</span>, <span class="string">u&#x27;ing&#x27;</span>, <span class="string">u&#x27;sha&#x27;</span>, <span class="string">u&#x27;shad&#x27;</span>, <span class="string">u&#x27;had&#x27;</span>, <span class="string">u&#x27;hade&#x27;</span>, <span class="string">u&#x27;ade&#x27;</span>,</span><br><span class="line"><span class="string">u&#x27;ader&#x27;</span>, <span class="string">u&#x27;der&#x27;</span>, <span class="string">u&#x27;ders&#x27;</span>, <span class="string">u&#x27;ers&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>Whoosh 包含两种预配置的 N-gram 字段类型：whoosh.fields.NGRAM 和 whoosh.fields.NGRAMWORDS。 唯一的区别是 NGRAM 通过 N-gram 过滤器运行所有文本，包括空格和标点符号，而 NGRAMWORDS 使用分词器从文本中提取单词，然后通过 N-gram 过滤器运行每个单词。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 14 - 排序和分面 (faceting)</title>
    <url>/whoosh/14-%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E9%9D%A2%20(faceting)/</url>
    <content><![CDATA[<blockquote>
<p>笔记</p>
<p>Whoosh 3.0 中用于排序和分面的 API 发生了变化。</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Whoosh 中的排序和分面搜索结果是基于分面的。 每个方面都将一个值与搜索结果中的每个文档相关联，允许你按键排序或使用它们对文档进行分组。 Whoosh 包含多种可用于排序和分组的方面类型（见下文）。</p>
<span id="more"></span>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>默认情况下，搜索结果首先按照得分最高的文档排序。 你可以使用 sortedby 关键字参数来按其他一些标准对结果进行排序，例如字段的值。</p>
<h3 id="使字段可排序"><a href="#使字段可排序" class="headerlink" title="使字段可排序"></a>使字段可排序</h3><p>为了对字段进行排序，你应该使用 sortable&#x3D;True 关键字参数创建字段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = fields.Schema(title=fields.TEXT(sortable=<span class="literal">True</span>),</span><br><span class="line">                       content=fields.TEXT,</span><br><span class="line">                       modified=fields.DATETIME(sortable=<span class="literal">True</span>)</span><br><span class="line">                       )</span><br></pre></td></tr></table></figure>

<p>可以对没有 <code>sortable=True</code> 的字段进行排序，但这需要 Whoosh 将字段中的唯一词条加载到内存中。 使用 <code>sortable</code> 效率更高。</p>
<h3 id="关于列类型"><a href="#关于列类型" class="headerlink" title="关于列类型"></a>关于列类型</h3><p>当你使用 <code>sortable=True</code> 创建一个字段时，你是在告诉 Whoosh 将该字段的每个文档值存储在一个列中。 列对象指定用于在磁盘上存储每个文档值的格式。</p>
<p>whoosh.columns 模块包含几个不同的列对象实现。 每个字段类型指定一个合理的默认列类型（例如，文本字段的默认值是 whoosh.columns.VarBytesColumn，数字字段的默认值是 whoosh.columns.NumericColumn）。 但是，如果你想要最大效率，你可能希望为字段使用不同的列类型。</p>
<p>例如，如果字段中的所有文档值都是固定长度，则可以使用 whoosh.columns.FixedBytesColumn。 如果你有一个字段，其中许多文档共享相对较少的可能值（示例可能是“类别”字段，或“月份”或其他枚举类型字段），你可能希望使用 whoosh.columns.RefBytesColumn（ 可以处理可变和固定长度的值）。 有用于存储每个文档位值、结构、腌制对象和压缩字节值的列类型。</p>
<p>要为字段指定自定义列对象，请将其作为 sortable 关键字参数而不是 True 传递：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> columns, fields</span><br><span class="line"></span><br><span class="line">category_col = columns.RefBytesColumn()</span><br><span class="line">schema = fields.Schema(title=fields.TEXT(sortable=<span class="literal">True</span>),</span><br><span class="line">                       category=fields.KEYWORD(sortable=category_col)</span><br></pre></td></tr></table></figure>

<h2 id="使用-COLUMN-字段作为自定义排序键"><a href="#使用-COLUMN-字段作为自定义排序键" class="headerlink" title="使用 COLUMN 字段作为自定义排序键"></a>使用 COLUMN 字段作为自定义排序键</h2><p>当你添加带有可排序字段的文档时，Whoosh 使用你为该字段传递的值作为可排序值。 例如，如果“标题”是一个可排序的字段，并且你添加了这个文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer.add_document(title=<span class="string">&quot;Mr. Palomar&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>…然后将 Palomar 先生作为文档的排序键存储在字段列中。</p>
<p>这通常很好，但有时你需要“修改”可排序键，使其与用户在界面中搜索和&#x2F;或看到的值不同。 例如，如果你允许用户按标题排序，你可能希望对可见标题和用于排序的值使用不同的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可见标题</span></span><br><span class="line">title = <span class="string">&quot;The Unbearable Lightness of Being&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可排序的标题：转换为小写（以防止排序不同</span></span><br><span class="line"><span class="comment"># 取决于大写/小写），开头的文章移到末尾</span></span><br><span class="line">sort_title = <span class="string">&quot;unbearable lightness of being, the&quot;</span></span><br></pre></td></tr></table></figure>

<p>最好的方法是使用一个额外的字段来进行排序。 你可以使用 whoosh.fields.COLUMN 字段类型来创建一个没有索引或存储的字段，它只包含每个文档的列值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = fields.Schema(title=fields.TEXT(stored=<span class="literal">True</span>),</span><br><span class="line">                       sort_title=fields.COLUMN(columns.VarBytesColumn())</span><br><span class="line">                       )</span><br></pre></td></tr></table></figure>

<p>whoosh.fields.COLUMN 初始值设定项的单个参数是 whoosh.columns.ColumnType 对象。 你可以在 whoosh.columns 模块中使用各种列类型中的任何一种。</p>
<p>再举一个例子，假设你要索引的文档具有与每个文档关联的自定义排序顺序，例如“优先级”编号：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=Big Wheel</span><br><span class="line">price=<span class="number">100</span></span><br><span class="line">priority=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">name=Toss Across</span><br><span class="line">price=<span class="number">40</span></span><br><span class="line">priority=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">name=Slinky</span><br><span class="line">price=<span class="number">25</span></span><br><span class="line">priority=<span class="number">2</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>你可以使用带有数字列对象的列字段来保存“优先级”并将其用于排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = fields.Schema(name=fields.TEXT(stored=<span class="literal">True</span>),</span><br><span class="line">                       price=fields.NUMERIC(stored=<span class="literal">True</span>),</span><br><span class="line">                       priority=fields.COLUMN(columns.NumericColumn(<span class="string">&quot;i&quot;</span>),</span><br><span class="line">                       )</span><br></pre></td></tr></table></figure>

<p>（请注意，columns.NumericColumn 采用类型代码字符，就像 Python 的结构和数组模块使用的代码一样。）</p>
<h3 id="使现有字段可排序"><a href="#使现有字段可排序" class="headerlink" title="使现有字段可排序"></a>使现有字段可排序</h3><p>如果在 Whoosh 3.0 中添加可排序参数之前你有一个现有索引，或者你认为不需要某个字段可排序但现在你发现需要对其进行排序，则可以将“可排序性”添加到现有索引中 使用 whoosh.sorting.add_sorta 索引 ble() 效用函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> columns, fields, index, sorting</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设我们有一个具有此模式的现有索引</span></span><br><span class="line">schema = fields.Schema(title=fields.TEXT,</span><br><span class="line">                       price=fields.NUMERIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要使用 add_sortable，首先要为索引打开一个 writer</span></span><br><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> ix.writer() <span class="keyword">as</span> w:</span><br><span class="line">    <span class="comment"># 将 sortable=True 添加到“价格”字段，使用字段词条作为</span></span><br><span class="line">    <span class="comment"># 可排序的值</span></span><br><span class="line">    sorting.add_sortable(w, <span class="string">&quot;price&quot;</span>, sorting.FieldFacet(<span class="string">&quot;price&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 sortable=True 添加到“标题”字段</span></span><br><span class="line">    <span class="comment"># 存储字段值作为可排序值</span></span><br><span class="line">    sorting.add_sortable(w, <span class="string">&quot;title&quot;</span>, sorting.StoredFieldFacet(<span class="string">&quot;title&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>你可以在使用 column 关键字参数调用 add_sortable 时指定自定义列类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_sortable(w, <span class="string">&quot;chapter&quot;</span>, sorting.FieldFacet(<span class="string">&quot;chapter&quot;</span>),</span><br><span class="line">             column=columns.RefBytesColumn())</span><br></pre></td></tr></table></figure>

<p>有关详细信息，请参阅 add_sortable() 的文档。</p>
<h3 id="排序搜索结果"><a href="#排序搜索结果" class="headerlink" title="排序搜索结果"></a>排序搜索结果</h3><p>当你告诉 Whoosh 按一个（或多个）字段排序时，它使用字段列中的每个文档值作为文档的排序键。</p>
<p>通常，搜索结果按相关性得分降序排列。 你可以通过将 sortedby 关键字参数传递给 search() 方法来告诉 Whoosh 使用不同的顺序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> fields, index, qparser</span><br><span class="line"></span><br><span class="line">schema = fields.Schema(title=fields.TEXT(stored=<span class="literal">True</span>),</span><br><span class="line">                       price=fields.NUMERIC(sortable=<span class="literal">True</span>))</span><br><span class="line">ix = index.create_in(<span class="string">&quot;indexdir&quot;</span>, schema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> ix.writer() <span class="keyword">as</span> w:</span><br><span class="line">    w.add_document(title=<span class="string">&quot;Big Deal&quot;</span>, price=<span class="number">20</span>)</span><br><span class="line">    w.add_document(title=<span class="string">&quot;Mr. Big&quot;</span>, price=<span class="number">10</span>)</span><br><span class="line">    w.add_document(title=<span class="string">&quot;Big Top&quot;</span>, price=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    qp = qparser.QueryParser(<span class="string">&quot;big&quot;</span>, ix.schema)</span><br><span class="line">    q = qp.parse(user_query_string)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将搜索结果从低到高排序</span></span><br><span class="line">    results = s.search(q, sortedby=<span class="string">&quot;price&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(hit[<span class="string">&quot;title&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>你可以使用以下任何对象作为 sortedby 值：</p>
<p>一个 <code>FacetType</code> 对象<br>使用此对象对文档进行排序。 有关可用的构面类型，请参见下文。</p>
<p>字段名称字符串<br>将字段名称转换为 FieldFacet（见下文）并使用它对文档进行排序。</p>
<p><code>FacetType</code> 对象和&#x2F;或字段名称字符串的列表<br>将各个方面捆绑在一起成为一个 MultiFacet，以便你可以按多个键进行排序。 请注意，此快捷方式不允许你反转单个构面的排序方向。 为此，你需要自己构造 MultiFacet 对象。</p>
<blockquote>
<p>笔记</p>
<p>你可以使用 Searcher.search() 方法的 reverse&#x3D;True 关键字参数来反转整体排序方向。 这比反转每个单独的面更有效。</p>
</blockquote>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>按大小字段的值排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = searcher.search(myquery, sortedby=<span class="string">&quot;size&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>按“价格”字段的相反（从高到低）顺序排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">facet = sorting.FieldFacet(<span class="string">&quot;price&quot;</span>, reverse=<span class="literal">True</span>)</span><br><span class="line">results = searcher.search(myquery, sortedby=facet)</span><br></pre></td></tr></table></figure>

<p>按大小升序排序，然后按价格降序排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mf = sorting.MultiFacet()</span><br><span class="line">mf.add_field(<span class="string">&quot;size&quot;</span>)</span><br><span class="line">mf.add_field(<span class="string">&quot;price&quot;</span>, reverse=<span class="literal">True</span>)</span><br><span class="line">results = searcher.search(myquery, sortedby=mf)</span><br><span class="line"></span><br><span class="line">＃ 或者...</span><br><span class="line">sizes = sorting.FieldFacet(<span class="string">&quot;size&quot;</span>)</span><br><span class="line">prices = sorting.FieldFacet(<span class="string">&quot;price&quot;</span>, reverse=<span class="literal">True</span>)</span><br><span class="line">results = searcher.search(myquery, sortedby=[sizes, prices])</span><br></pre></td></tr></table></figure>

<p>按“类别”字段排序，然后按文档的分数排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cats = sorting.FieldFacet(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">scores = sorting.ScoreFacet()</span><br><span class="line">results = searcher.search(myquery, sortedby=[cats, scores])</span><br></pre></td></tr></table></figure>

<h3 id="访问列值"><a href="#访问列值" class="headerlink" title="访问列值"></a>访问列值</h3><p>每个文档的列值在 Hit 对象中可用，就像存储的字段值一样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = fields.Schema(title=fields.TEXT(stored=<span class="literal">True</span>),</span><br><span class="line">                       price=fields.NUMERIC(sortable=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">results = searcher.search(myquery)</span><br><span class="line"><span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(hit[<span class="string">&quot;title&quot;</span>], hit[<span class="string">&quot;price&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>高级：如果你想快速访问每个文档的任意值，你可以获得一个列阅读器对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    reader = s.reader()</span><br><span class="line"></span><br><span class="line">    colreader = s.reader().column_reader(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> docnum <span class="keyword">in</span> reader.all_doc_ids():</span><br><span class="line">        <span class="built_in">print</span>(colreader[docnum])</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>向用户呈现“多面”搜索结果通常非常有用。 分面是将搜索结果动态分组到类别中。 这些类别让用户可以根据他们感兴趣的类别查看总结果的一部分。</p>
<p>例如，如果你正在编写一个购物网站，你可能希望显示带有制造商和价格范围等搜索结果的类别。</p>
<table>
<thead>
<tr>
<th>制造商</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>苹果 (5)</td>
<td>$0 - $100 (2)</td>
</tr>
<tr>
<td>三洋 (1)</td>
<td>$101 - $500 (10)</td>
</tr>
<tr>
<td>索尼 (2)</td>
<td>$501 - $1000 (1)</td>
</tr>
<tr>
<td>东芝 (5)</td>
<td></td>
</tr>
</tbody></table>
<p>你可以让你的用户单击不同的构面值以仅显示给定类别中的结果。</p>
<p>另一个有用的 UI 模式是显示不同类型的已找到文档的前 5 个结果，并让用户单击以查看他们感兴趣的类别的更多结果，类似于 Spotlight 快速结果在 Mac OS 上的工作方式 X。</p>
<h3 id="groupedby-关键字参数"><a href="#groupedby-关键字参数" class="headerlink" title="groupedby 关键字参数"></a><code>groupedby</code> 关键字参数</h3><p>你可以使用以下对象作为 groupedby 值：</p>
<p><strong>一个 <code>FacetType</code> 对象</strong><br>使用此对象对文档进行分组。 有关可用的构面类型，请参见下文。</p>
<p><strong>字段名称字符串</strong><br>将字段名称转换为 FieldFacet（见下文）并使用它对文档进行排序。 字段名称用作构面名称。</p>
<p><strong>字段名称字符串的列表或元组</strong><br>设置多个字段分组条件。</p>
<p><strong>将构面名称映射到 FacetType 对象的字典</strong><br>设置多个分组标准。</p>
<p><strong>一个 Facets 对象</strong><br>这个对象很像使用字典，但有一些方便的方法可以更容易地设置多个分组。</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>按“类别”字段的值分组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = searcher.search(myquery, groupedby=<span class="string">&quot;category&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>按“类别”字段的值以及“标签”字段的值和日期范围分组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cats = sorting.FieldFacet(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">tags = sorting.FieldFacet(<span class="string">&quot;tags&quot;</span>, allow_overlap=<span class="literal">True</span>)</span><br><span class="line">results = searcher.search(myquery, groupedby=&#123;<span class="string">&quot;category&quot;</span>: cats, <span class="string">&quot;tags&quot;</span>: tags&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...或者，使用 Facets 对象会减少一些重复</span></span><br><span class="line">facets = sorting.Facets()</span><br><span class="line">facets.add_field(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">facets.add_field(<span class="string">&quot;tags&quot;</span>, allow_overlap=<span class="literal">True</span>)</span><br><span class="line">results = searcher.search(myquery, groupedby=facets)</span><br></pre></td></tr></table></figure>

<p>要按多个字段的相交值对结果进行分组，请使用 MultiFacet 对象（见下文）。 例如，如果你有两个名为 tag 和 size 的字段，则可以按 tag 和 size 字段的所有组合对结果进行分组，例如 (‘tag1’, ‘small’), (‘tag2’, ‘small’), (‘tag1’, ‘medium’), 等等：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据“tag”和“size”字段的组合生成一个分组</span></span><br><span class="line">mf = MultiFacet([<span class="string">&quot;tag&quot;</span>, <span class="string">&quot;size&quot;</span>])</span><br><span class="line">results = searcher.search(myquery, groupedby=&#123;<span class="string">&quot;tag/size&quot;</span>: mf&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="获取分面组"><a href="#获取分面组" class="headerlink" title="获取分面组"></a>获取分面组</h3><p>Results.groups(“facetname”) 方法返回一个将类别名称映射到文档 ID 列表的字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myfacets = sorting.Facets().add_field(<span class="string">&quot;size&quot;</span>).add_field(<span class="string">&quot;tag&quot;</span>)</span><br><span class="line">results = mysearcher.search(myquery, groupedby=myfacets)</span><br><span class="line">results.groups(<span class="string">&quot;size&quot;</span>)</span><br><span class="line"><span class="comment"># &#123;&quot;small&quot;: [8, 5, 1, 2, 4], &quot;medium&quot;: [3, 0, 6], &quot;large&quot;: [7, 9]&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果只有一个方面，你可以只使用不带参数的 Results.groups() 来访问其组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mysearcher.search(myquery, groupedby=myfunctionfacet)</span><br><span class="line">results.groups()</span><br></pre></td></tr></table></figure>

<p>默认情况下，groups() 返回的字典中的值是文档编号列表，其相对顺序与结果中的顺序相同。 你可以使用 Searcher 对象的 stored_fields() 方法获取文档编号并将文档的存储字段作为字典返回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> category_name <span class="keyword">in</span> categories:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Top 5 documents in the %s category&quot;</span> % category_name</span><br><span class="line">    doclist = categories[category_name]</span><br><span class="line">    <span class="keyword">for</span> docnum, score <span class="keyword">in</span> doclist[:<span class="number">5</span>]:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;  &quot;</span>, searcher.stored_fields(docnum)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(doclist) &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;  (%s more)&quot;</span> % (<span class="built_in">len</span>(doclist) - <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>如果你想要有关组的不同信息，例如只需要每个组中的文档数，或者你不需要对组进行排序，则可以指定 whoosh.sorting.FacetMap 类型或带有 maptype 关键字参数的实例 创建 FacetType：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个和默认的一样</span></span><br><span class="line">myfacet = FieldFacet(<span class="string">&quot;size&quot;</span>, maptype=sorting.OrderedList)</span><br><span class="line">results = mysearcher.search(myquery, groupedby=myfacet)</span><br><span class="line">results.groups()</span><br><span class="line"><span class="comment"># &#123;&quot;small&quot;: [8, 5, 1, 2, 4], &quot;medium&quot;: [3, 0, 6], &quot;large&quot;: [7, 9]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要对组进行排序以匹配结果中文档的顺序（快点）</span></span><br><span class="line">myfacet = FieldFacet(<span class="string">&quot;size&quot;</span>, maptype=sorting.UnorderedList)</span><br><span class="line">results = mysearcher.search(myquery, groupedby=myfacet)</span><br><span class="line">results.groups()</span><br><span class="line"><span class="comment"># &#123;&quot;small&quot;: [1, 2, 4, 5, 8], &quot;medium&quot;: [0, 3, 6], &quot;large&quot;: [7, 9]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只统计每组中的文档</span></span><br><span class="line">myfacet = FieldFacet(<span class="string">&quot;size&quot;</span>, maptype=sorting.Count)</span><br><span class="line">results = mysearcher.search(myquery, groupedby=myfacet)</span><br><span class="line">results.groups()</span><br><span class="line"><span class="comment"># &#123;&quot;small&quot;: 5, &quot;medium&quot;: 3, &quot;large&quot;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只记住每组中“最好”的文档</span></span><br><span class="line">myfacet = FieldFacet(<span class="string">&quot;size&quot;</span>, maptype=sorting.Best)</span><br><span class="line">results = mysearcher.search(myquery, groupedby=myfacet)</span><br><span class="line">results.groups()</span><br><span class="line"><span class="comment"># &#123;&quot;small&quot;: 8, &quot;medium&quot;: 3, &quot;large&quot;: 7&#125;</span></span><br></pre></td></tr></table></figure>

<p>或者，你可以在适用于所有方面的 Searcher.search() 方法调用中指定 maptype 参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mysearcher.search(myquery, groupedby=[<span class="string">&quot;size&quot;</span>, <span class="string">&quot;tag&quot;</span>],</span><br><span class="line">                            maptype=sorting.Count)</span><br></pre></td></tr></table></figure>

<p>（你也可以通过为它们指定 maptype 参数来覆盖各个方面的这个整体 maptype 参数。）</p>
<h3 id="刻面类型"><a href="#刻面类型" class="headerlink" title="刻面类型"></a>刻面类型</h3><h3 id="场面"><a href="#场面" class="headerlink" title="场面"></a>场面</h3><p>这是最常见的刻面类型。 它根据每个文档中特定字段中的值进行排序或分组。 如果每个文档在字段中只有一个词条（例如 ID 字段），这通常效果最好（或根本没有）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据“路径”字段的值对搜索结果进行排序</span></span><br><span class="line">facet = sorting.FieldFacet(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">results = searcher.search(myquery, sortedby=facet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据“parent”字段的值对搜索结果进行分组</span></span><br><span class="line">facet = sorting.FieldFacet(<span class="string">&quot;parent&quot;</span>)</span><br><span class="line">results = searcher.search(myquery, groupedby=facet)</span><br><span class="line">parent_groups = results.groups(<span class="string">&quot;parent&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>默认情况下，FieldFacet 仅支持非重叠分组，其中文档不能 t 同时属于多个方面（每个文档将被任意分类到一个类别中。）要获得具有多值字段的重叠组，请使用 allow_overlap&#x3D;True 关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">facet = sorting.FieldFacet(fieldname, allow_overlap=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>这支持重叠的组成员资格，其中文档在一个字段中有多个词条（例如 KEYWORD 字段）。 如果不需要重叠，请不要使用 allow_overlap，因为它的速度要慢得多并且会占用更多内存（请参阅下面有关 allow_overlap 的部分）。</p>
<h3 id="查询面"><a href="#查询面" class="headerlink" title="查询面"></a>查询面</h3><p>你可以设置由任意查询定义的类别。 例如，你可以使用前缀查询对名称进行分组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用查询来定义每个类别</span></span><br><span class="line"><span class="comment">#（这里我假设“价格”是一个数字字段，所以我将使用数值范围）</span></span><br><span class="line">qdict = &#123;&#125;</span><br><span class="line">qdict[<span class="string">&quot;A-D&quot;</span>] = query.TermRange(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">qdict[<span class="string">&quot;E-H&quot;</span>] = query.TermRange(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;h&quot;</span>)</span><br><span class="line">qdict[<span class="string">&quot;I-L&quot;</span>] = query.TermRange(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;l&quot;</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">qfacet = sorting.QueryFacet(qdict)</span><br><span class="line">r = searcher.search(myquery, groupedby=&#123;<span class="string">&quot;firstltr&quot;</span>: qfacet&#125;)</span><br></pre></td></tr></table></figure>

<p>默认情况下，QueryFacet 仅支持非重叠分组，即一个文档不能同时属于多个切面（每个文档将被任意归入一个类别）。 要获得具有多值字段的重叠组，请使用 allow_overlap&#x3D;True 关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">facet = sorting.QueryFacet(querydict, allow_overlap=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="范围面"><a href="#范围面" class="headerlink" title="范围面"></a>范围面</h3><p>RangeFacet 适用于 NUMERIC 字段类型。 它将一系列可能的值分成几组。 例如，根据价格将文档分组到“宽”100 美元的桶中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pricefacet = sorting.RangeFacet(<span class="string">&quot;price&quot;</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>第一个参数是字段的名称。 接下来的两个参数是要划分的完整范围。 超出此范围的值（在此示例中，小于 0 和大于 1000 的值）将被分类到“缺失”（无）组中。 第四个参数是“间隙大小”，即范围内划分的大小。</p>
<p>“差距”可以是一个列表而不是单个值。 在这种情况下，列表中的值将用于设置初始分区的大小，列表中的最后一个值是所有后续分区的大小。 例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pricefacet = sorting.RangeFacet(<span class="string">&quot;price&quot;</span>, <span class="number">0</span>, <span class="number">1000</span>, [<span class="number">5</span>, <span class="number">10</span>, <span class="number">35</span>, <span class="number">50</span>])</span><br></pre></td></tr></table></figure>

<p>…将设置 0-5、5-15、15-50、50-100 的划分，然后使用 50 作为所有后续划分的大小（即 100-150、150-200 等）。</p>
<p>hardend 关键字参数控制最后一个除法是被限制在范围的末尾还是允许超过范围的末尾。 例如，这个：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">facet = sorting.RangeFacet(<span class="string">&quot;num&quot;</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>, hardend=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>…给出分区 0-4、4-8 和 8-12，同时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">facet = sorting.RangeFacet(<span class="string">&quot;num&quot;</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>, hardend=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>…给出分区 0-4、4-8 和 8-10。 （默认为 hardend&#x3D;False。）</p>
<blockquote>
<p>笔记</p>
<p>范围&#x2F;桶总是在开始时包含在内，在结束时不包含在内。</p>
</blockquote>
<h3 id="日期范围面"><a href="#日期范围面" class="headerlink" title="日期范围面"></a>日期范围面</h3><p>这类似于 RangeFacet，但适用于 DATETIME 字段。 起始值和结束值必须是 datetime.datetime 对象，间隙是 datetime.timedelta 对象。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">start = datetime(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">end = datetime.now()</span><br><span class="line">gap = timedelta(days=<span class="number">365</span>)</span><br><span class="line">bdayfacet = sorting.DateRangeFacet(<span class="string">&quot;birthday&quot;</span>, start, end, gap)</span><br></pre></td></tr></table></figure>

<p>与 RangeFacet 一样，你可以使用间隙列表和 hardend 关键字参数。</p>
<h3 id="分数面"><a href="#分数面" class="headerlink" title="分数面"></a>分数面</h3><p>这个方面有时对排序很有用。</p>
<p>例如，要按“类别”字段排序，然后对于具有相同类别的文档，按文档的分数排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cats = sorting.FieldFacet(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">scores = sorting.ScoreFacet()</span><br><span class="line">results = searcher.search(myquery, sortedby=[cats, scores])</span><br></pre></td></tr></table></figure>

<p>ScoreFacet 始终将较高的分数排在较低的分数之前。</p>
<blockquote>
<p>笔记</p>
<p>虽然使用 sortedby&#x3D;ScoreFacet() 应该给出与使用默认评分排序 (sortedby&#x3D;None) 相同的结果，但使用 facet 会更慢，因为排序时 Whoosh 会自动关闭许多优化。</p>
</blockquote>
<h3 id="功能面"><a href="#功能面" class="headerlink" title="功能面"></a>功能面</h3><p>此方面允许你传递自定义函数来计算文档的排序&#x2F;分组键。 （使用此方面类型可能比子类化 FacetType 和 Categorizer 更容易设置一些自定义行为。）</p>
<p>该函数将以索引搜索器和索引文档 ID 作为参数调用。 例如，如果你有一个包含词条向量的索引：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = fields.Schema(<span class="built_in">id</span>=fields.STORED,</span><br><span class="line">                       text=fields.TEXT(stored=<span class="literal">True</span>, vector=<span class="literal">True</span>))</span><br><span class="line">ix = RamStorage().create_index(schema)</span><br></pre></td></tr></table></figure>

<p>…你可以使用函数对文档进行排序，它们越接近两个词条的相等出现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">searcher, docnum</span>):</span><br><span class="line">    v = <span class="built_in">dict</span>(searcher.vector_as(<span class="string">&quot;frequency&quot;</span>, docnum, <span class="string">&quot;text&quot;</span>))</span><br><span class="line">    <span class="comment"># Sort documents that have equal number of &quot;alfa&quot; and &quot;bravo&quot; first</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> - (<span class="number">1.0</span> / (<span class="built_in">abs</span>(v.get(<span class="string">&quot;alfa&quot;</span>, <span class="number">0</span>) - v.get(<span class="string">&quot;bravo&quot;</span>, <span class="number">0</span>)) + <span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line">facet = sorting.FunctionFacet(fn)</span><br><span class="line">results = searcher.search(myquery, sortedby=facet)</span><br></pre></td></tr></table></figure>

<h3 id="StoredFieldFacet"><a href="#StoredFieldFacet" class="headerlink" title="StoredFieldFacet"></a>StoredFieldFacet</h3><p>此方面允许你使用存储的字段值作为文档的排序&#x2F;分组键。 这通常比使用索引字段慢，但是 w 当使用 allow_overlap 时，它对于大型索引实际上可以更快，因为它避免了读取发布列表的开销。</p>
<p>StoredFieldFacet 通过将存储值拆分为单独的键来支持 allow_overlap。 默认情况下，它调用值的 split() 方法（因为大多数存储值都是字符串），但你可以提供自定义拆分函数。 请参阅下面有关 allow_overlap 的部分。</p>
<h3 id="多方面"><a href="#多方面" class="headerlink" title="多方面"></a>多方面</h3><p>此构面类型返回由两个或多个子构面返回的键的组合，允许你按多个构面的相交值进行排序&#x2F;分组。</p>
<p>MultiFacet 有添加分面的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myfacet = sorting.RangeFacet(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">mf = sorting.MultiFacet()</span><br><span class="line">mf.add_field(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">mf.add_field(<span class="string">&quot;price&quot;</span>, reverse=<span class="literal">True</span>)</span><br><span class="line">mf.add_facet(myfacet)</span><br><span class="line">mf.add_score()</span><br></pre></td></tr></table></figure>

<p>你还可以将字段名称列表和&#x2F;或 FacetType 对象传递给初始化程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prices = sorting.FieldFacet(<span class="string">&quot;price&quot;</span>, reverse=<span class="literal">True</span>)</span><br><span class="line">scores = sorting.ScoreFacet()</span><br><span class="line">mf = sorting.MultiFacet([<span class="string">&quot;category&quot;</span>, prices, myfacet, scores])</span><br></pre></td></tr></table></figure>

<h3 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h3><ul>
<li>排序时，在给定字段中没有任何词条的文档，或任何其他构成不同方面类型的“缺失”的文档，将始终排序到最后。</li>
<li>分组时，“丢失”的文档将出现在一个键为 None 的组中。</li>
</ul>
<h3 id="使用重叠组"><a href="#使用重叠组" class="headerlink" title="使用重叠组"></a>使用重叠组</h3><p>用于分组和排序的常见支持工作流是给定字段具有一个文档值，例如包含原始文档文件路径的路径字段。 默认情况下，构面设置为支持这种单值方法。</p>
<p>当然，在某些情况下，你希望根据每个文档具有多个词条的字段将文档分类到多个组中。 最常见的示例是标签字段。 FieldFacet、QueryFacet 和 StoredFieldFacet 的 allow_overlap 关键字参数允许这种多值方法。</p>
<p>但是，有一个重要的警告：使用 allow_overlap&#x3D;True 比默认值慢，对于非常大的结果集可能慢得多。 这是因为 Whoosh 必须读取该字段中每个词条的每个帖子，以创建一个临时的“前向索引”映射文档到词条。</p>
<p>如果一个字段使用词条向量进行索引，FieldFacet 将使用它们来加速小型结果集的 allow_overlap 分面，但对于大型结果集，Whoosh 必须为每个匹配的文档打开向量列表，这仍然可能非常慢。</p>
<p>对于非常大的索引和结果集，如果存储了一个字段，你可以使用 StoredFieldFacet 而不是 FieldFacet 获得更快的重叠分面。 虽然读取存储值通常比使用索引慢，但在这种情况下，避免打开大量发布阅读器的开销是值得的。</p>
<p>StoredFieldFacet 通过加载给定字段的存储值并将其拆分为多个值来支持 allow_overlap。 默认是调用值的 split() 方法。</p>
<p>例如，如果你将标签字段存储为类似“tag1 tag2 tag3”的字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schema = fields.Schema(name=fields.TEXT(stored=<span class="literal">True</span>),</span><br><span class="line">                       tags=fields.KEYWORD(stored=<span class="literal">True</span>))</span><br><span class="line">ix = index.create_in(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> ix.writer() <span class="keyword">as</span> w:</span><br><span class="line">    w.add_document(name=<span class="string">&quot;A Midsummer Night&#x27;s Dream&quot;</span>, tags=<span class="string">&quot;comedy fairies&quot;</span>)</span><br><span class="line">    w.add_document(name=<span class="string">&quot;Hamlet&quot;</span>, tags=<span class="string">&quot;tragedy denmark&quot;</span>)</span><br><span class="line">    <span class="comment"># etc.</span></span><br></pre></td></tr></table></figure>

<p>…然后你可以像这样使用 StoredFieldFacet：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    sff = sorting.StoredFieldFacet(<span class="string">&quot;tags&quot;</span>, allow_overlap=<span class="literal">True</span>)</span><br><span class="line">    results = s.search(myquery, groupedby=&#123;<span class="string">&quot;tags&quot;</span>: sff&#125;)</span><br></pre></td></tr></table></figure>

<p>对于字符串以外的存储 Python 对象，你可以提供一个拆分函数（使用 StoredFieldFacet 的 split_fn 关键字参数）。 该函数应接受单个参数（存储的值）并返回分组键的列表或元组。</p>
<h2 id="使用自定义排序顺序"><a href="#使用自定义排序顺序" class="headerlink" title="使用自定义排序顺序"></a>使用自定义排序顺序</h2><p>每次搜索自定义排序顺序有时很有用。 例如，不同的语言使用不同的排序顺序。 如果你有一个函数可以为给定的字段值返回你想要的排序顺序，例如 Unicode 归类算法 (UCA) 的实现，你可以为用户的语言自定义排序顺序。</p>
<p>whoosh.sorting.TranslateFacet 允许你将函数应用于另一个方面的值。 这使你可以将字段值“翻译”为任意排序键，例如使用 UCA：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyuca <span class="keyword">import</span> Collator</span><br><span class="line"></span><br><span class="line"><span class="comment"># Collator 对象有一个 sort_key() 方法，它接受一个 unicode</span></span><br><span class="line"><span class="comment"># 字符串并返回一个排序键</span></span><br><span class="line">c = Collator(<span class="string">&quot;allkeys.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为要排序的字段创建一个 facet 对象</span></span><br><span class="line">nf = sorting.FieldFacet(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用翻译函数将构面包装在 TranslateFacet 中</span></span><br><span class="line"><span class="comment">#（Collator 对象的 sort_key 方法）</span></span><br><span class="line">tf = sorting.TranslateFacet(facet, c.sort_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用切面对搜索结果进行排序</span></span><br><span class="line">results = searcher.search(myquery, sortedby=tf)</span><br></pre></td></tr></table></figure>

<p>（你可以将多个“包装的”面传递给 TranslateFacet，它会使用面的值作为多个参数调用该函数。）</p>
<p>TranslateFacet 对于数字字段也非常有用，可以根据 o 进行排序<br>一些公式的输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据两个数字字段的平均值排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> (a + b) / <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为字段创建两个方面，并将它们与函数一起传递给翻译面</span></span><br><span class="line">af = sorting.FieldFacet(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">wf = sorting.FieldFacet(<span class="string">&quot;weight&quot;</span>)</span><br><span class="line">facet = sorting.TranslateFacet(average, af, wf)</span><br><span class="line"></span><br><span class="line">results = searcher.search(myquery. sortedby=facet)</span><br></pre></td></tr></table></figure>

<p>请记住，你仍然可以按多个方面进行排序。 例如，你可以先按量化函数转换的数值排序，然后如果相等，则按另一个字段的值排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先按量化大小排序，然后按名称排序</span></span><br><span class="line">tf = sorting.TranslateFacet(quantize, sorting.FieldFacet(<span class="string">&quot;size&quot;</span>))</span><br><span class="line">results = searcher.search(myquery, sortedby=[tf, <span class="string">&quot;name&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>专家：写自己的切面<br>待定。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 15 - 高亮显示 (highlighted) 搜索结果</title>
    <url>/whoosh/15-%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%20(highlighted)%20%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>高亮显示 (highlighted) 系统以管道 (pipeline) 方式进行工作，具有四种组件类型。</p>
<span id="more"></span>

<p><code>Fragmenters</code> (分段组件)<br>根据文本中匹配词条 (term) 的位置将原始文本分成 <code>__fragments__</code>。</p>
<p><code>Scorers</code> (评分组件)<br>为每个片段 (fragment) 分配一个分数，允许系统根据任何标准对最佳片段进行排名。</p>
<p><code>Order functions</code> (排序组件)<br>排序函数控制得分最高的片段以何种顺序呈现给用户。 例如，你可以按照片段在文档中出现的顺序 (FIRST) 显示片段，或者首先显示得分较高的片段 (SCORE)</p>
<p><code>Formatters</code> (格式化组件)<br>程序将片段对象转换为人类可读的输出，例如 HTML 字符串。</p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>高亮显示要求你具有可用的索引文档的文本。你可以将文本保存在存储字段中，或者如果原始文本在文件、数据库列等中可用，只需即时重新加载它。请注意，你可能需要处理文本以删除例如 HTML 标签、wiki 标记等。</p>
<h2 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h2><p>获取搜索结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mysearcher.search(myquery)</span><br><span class="line"><span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(hit[<span class="string">&quot;title&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>你可以在 <code>whoosh.searching.Hit</code> 对象上使用 <code>highlights()</code> 方法从包含搜索词的文档中获取高亮显示的片段。</p>
<p>第一个参数是要高亮显示的字段的名称。 如果该字段已存储，这是你需要提供的唯一参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mysearcher.search(myquery)</span><br><span class="line"><span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(hit[<span class="string">&quot;title&quot;</span>])</span><br><span class="line">    <span class="comment"># 假设存储了 &quot;content&quot; 字段</span></span><br><span class="line">    <span class="built_in">print</span>(hit.highlights(<span class="string">&quot;content&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>如果该字段未存储，你需要通过其他方式检索该字段的文本。 例如，从原始文件或数据库中读取它。 然后你可以使用文本参数提供要高亮显示的文本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mysearcher.search(myquery)</span><br><span class="line"><span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(hit[<span class="string">&quot;title&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 假设“path”存储字段包含原始文件的路径</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(hit[<span class="string">&quot;path&quot;</span>]) <span class="keyword">as</span> fileobj:</span><br><span class="line">        filecontents = fileobj.read()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(hit.highlights(<span class="string">&quot;content&quot;</span>, text=filecontents))</span><br></pre></td></tr></table></figure>

<h2 id="字数限制"><a href="#字数限制" class="headerlink" title="字数限制"></a>字数限制</h2><p>默认情况下，Whoosh 仅从文本的前 32K 个字符中提取片段。这可以防止非常长的文本过多地拖延高亮显示过程，并且通常是合理的，因为重要&#x2F;摘要信息通常位于文档的开头。但是，如果你发现亮点缺少信息（例如，词条出现在后面部分的很长的百科全书文章），你可以增加分段器 (fragmenter) 的字符数限制。</p>
<p>你可以像这样更改结果对象的字符限制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mysearcher.search(myquery)</span><br><span class="line">results.fragmenter.charlimit = <span class="number">100000</span></span><br></pre></td></tr></table></figure>

<p>要关闭字符限制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results.fragmenter.charlimit = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>如果你实例化一个自定义片段，你可以直接设置它的字符限制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sf = highlight.SentenceFragmenter(charlimit=<span class="number">100000</span>)</span><br><span class="line">results.fragmenter = sf</span><br></pre></td></tr></table></figure>

<p>如果你增加或禁用字符限制以高亮显示长文档，你可能需要使用下面 <a href="#%E5%8A%A0%E9%80%9F%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA">加速高亮显示</a> 部分中的提示来更快地高亮显示。</p>
<h2 id="自定义高亮显示"><a href="#自定义高亮显示" class="headerlink" title="自定义高亮显示"></a>自定义高亮显示</h2><h3 id="片段-Fragment-数量"><a href="#片段-Fragment-数量" class="headerlink" title="片段 (Fragment) 数量"></a>片段 (Fragment) 数量</h3><p>你可以使用 <code>top</code> 关键字参数来控制每个片段中返回的片段数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最多显示文档中的 5 个片段</span></span><br><span class="line"><span class="built_in">print</span> hit.highlights(<span class="string">&quot;content&quot;</span>, top=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="片段长度"><a href="#片段长度" class="headerlink" title="片段长度"></a>片段长度</h3><p>默认的分片器有一个 <code>maxchars</code> 属性（默认 200）控制片段的最大长度，以及一个 <code>surround</code> 属性（默认 20）控制在片段的开头和结尾添加的上下文的最大字符数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许更大的片段长度</span></span><br><span class="line">results.fragmenter.maxchars = <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在前后显示更多上下文</span></span><br><span class="line">results.fragmenter.surround = <span class="number">50</span></span><br></pre></td></tr></table></figure>

<h3 id="分段器-Fragmenter"><a href="#分段器-Fragmenter" class="headerlink" title="分段器 (Fragmenter)"></a>分段器 (Fragmenter)</h3><p>分段器 (Fragmenter) 控制如何从原始文本中提取摘录。</p>
<p>高亮 (<code>highlight</code>) 模块具有以下内置的分段器：</p>
<p><code>whoosh.highlight.ContextFragmenter</code>（默认）<br>这是一个“智能”分段器，可以找到匹配的词条，然后拉入环绕文本以形成片段。 此分段器仅生成包含匹配项的片段。</p>
<p><code>whoosh.highlight.SentenceFragmenter</code><br>尝试根据句子标点符号（“.”、“!” 和 “?”）将文本分成片段。 该对象的工作原理是在原始文本中查找句子结尾作为每个标记的“结束字符”之后的下一个字符。 可以用于源代码、小数点等</p>
<p><code>whoosh.highlight.WholeFragmenter</code><br>将整个文本作为一个“片段”返回。 如果你要高亮显示一小段文本并且不需要将其分段，这将很有用。</p>
<p>不同的分片器有不同的选择。 例如，默认的 <code>ContextFragmenter</code> 允许你设置最大片段大小和要添加到任一侧的上下文的大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_cf = highlight.ContextFragmenter(maxchars=<span class="number">100</span>,surround=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>有关详细信息，请参阅 <code>whoosh.highlight</code> 文档。</p>
<p>要使用不同的分段器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results.fragmenter = my_cf</span><br></pre></td></tr></table></figure>

<h3 id="评分器-Scorer"><a href="#评分器-Scorer" class="headerlink" title="评分器 (Scorer)"></a>评分器 (Scorer)</h3><p>评分器 (Scorer) 是可调用的 (callable) , 它接受一个 <code>whoosh.highlight.Fragment</code> 对象并返回一个可排序的值（其中较高的值表示更好的片段）。 默认评分器将片段中匹配项的数量相加，并为不同的 (different) 匹配项的数量添加奖励 (bonus)。 高亮显示系统使用此分数来选择最佳片段以显示给用户。</p>
<p>作为自定义评分器的示例，按片段中匹配项位置的最低标准差对片段进行排名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">StandardDeviationScorer</span>(<span class="params">fragment</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对匹配项接近的片段给予更高的分数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 由于在这种情况下值越低越好，我们需要取反该值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> - stddev([t.pos <span class="keyword">for</span> t <span class="keyword">in</span> fragment.matched])</span><br></pre></td></tr></table></figure>

<p>要使用不同的评分器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results.scorer = StandardDeviationScorer</span><br></pre></td></tr></table></figure>

<h3 id="排序-Order"><a href="#排序-Order" class="headerlink" title="排序 (Order)"></a>排序 (Order)</h3><p>排序 (Order) 是一个函数，它接受一个片段并返回一个可排序的值，用于在将它们呈现给用户之前对得分最高的片段进行排序（其中具有较低值的片段出现在具有较高值的片段之前）。</p>
<p>高亮 (<code>highlight</code>) 模块有以下排序 (Order) 函数。</p>
<p><code>FIRST</code>（默认）<br>按片段在文档中出现的顺序显示片段。</p>
<p><code>SCORE</code><br>首先显示得分最高的片段。<br>高亮显示模块还包括 <code>LONGER</code>（较长的片段优先）和 <code>SHORTER</code>（较短的片段优先），但它们可能不是很有用。</p>
<p>要使用不同的排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results.order = highlight.SCORE</span><br></pre></td></tr></table></figure>

<h3 id="格式化器-Formatter"><a href="#格式化器-Formatter" class="headerlink" title="格式化器 (Formatter)"></a>格式化器 (Formatter)</h3><p>格式化器 (Formatter) 控制如何将得分最高的片段转换为格式化的文本以显示给用户。 它可以返回任何内容（例如纯文本、HTML、Genshi 事件流、SAX 事件生成器或对调用系统有用的任何其他内容）。</p>
<p>高亮模块包含以下内置格式化程序。</p>
<p><code>whoosh.highlight.HtmlFormatter</code><br>输出一个包含 HTML 标签（带有 class 属性）的字符串。</p>
<p><code>whoosh.highlight.UppercaseFormatter</code><br>将匹配项转换为大写。</p>
<p><code>whoosh.highlight.GenshiFormatter</code><br>输出 Genshi 事件流，匹配项包含在可配置元素中。</p>
<p>创建自定义格式化程序的最简单方法是子类化 <code>highlight.Formatter</code> 并覆盖 <code>format_token</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BracketFormatter</span>(highlight.Formatter):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将匹配项括在方括号中。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">format_token</span>(<span class="params">self, text, token, replace=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="comment"># 使用 get_text 函数获取 token 对应的文本</span></span><br><span class="line">        tokentext = highlight.get_text(text, token, replace)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回你希望它出现在高亮字符串中的文本</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[%s]&quot;</span> % tokentext</span><br></pre></td></tr></table></figure>

<p>要使用不同的格式化程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">brf = BracketFormatter()</span><br><span class="line">results.formatter = brf</span><br></pre></td></tr></table></figure>

<p>如果你需要更多地控制格式或想要输出字符串以外的内容，你将需要重写其他方法。 请参阅 <a href="https://whoosh.readthedocs.io/en/latest/api/highlight.html#formatters"><code>whoosh.highlight.Formatter</code></a> 类的文档。</p>
<h3 id="高亮-Highlighter-对象"><a href="#高亮-Highlighter-对象" class="headerlink" title="高亮 (Highlighter) 对象"></a>高亮 (Highlighter) 对象</h3><p>你可以创建一个可重用的 <code>whoosh.highlight.Highlighter</code> 对象，而不是在结果对象上设置属性。 关键字参数可让你更改分段器(<code>fragmenter</code>)、评分器(<code>scorer</code>)、排序(<code>order</code>) 和 格式化器(<code>formatter</code>)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hi = highlight.Highlighter(fragmenter=my_cf, scorer=sds)</span><br></pre></td></tr></table></figure>

<p>然后，你可以使用 <code>whoosh.highlight.Highlighter.highlight_hit()</code> 方法获取 <code>Hit</code> 对象的高亮显示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(hit[<span class="string">&quot;title&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(hi.highlight_hit(hit))</span><br></pre></td></tr></table></figure>

<p>（当你分配给 <code>Results</code> 对象的 <code>fragmenter</code>、<code>scorer</code>、<code>order</code> 或 <code>formatter</code> 属性时，你实际上是在更改结果对象的默认 <code>Highlighter</code> 对象的值。）</p>
<h2 id="加速高亮显示"><a href="#加速高亮显示" class="headerlink" title="加速高亮显示"></a>加速高亮显示</h2><p>在搜索过程中记录哪些词与哪些文档匹配可以使高亮显示更快，因为它会跳过它知道在给定字段中不包含任何匹配词的文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记录每个文档的词条匹配</span></span><br><span class="line">results = searcher.search(myquery, terms=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="精准分段器-Pinpoint-Fragmenter"><a href="#精准分段器-Pinpoint-Fragmenter" class="headerlink" title="精准分段器 (Pinpoint Fragmenter)"></a>精准分段器 (Pinpoint Fragmenter)</h3><p>通常，高亮系统使用字段的分析器来重新标记文档的文本，以在上下文中找到匹配的词条。 如果你的文档很长并且增加或禁用了字符限制，或者该字段具有非常复杂的分析器，则重新标记可能会很慢。</p>
<p>Whoosh 无需重新标记，而是可以在索引中查找匹配项的字符位置。 查找字符位置不是即时的，但通常比分析大量文本要快。</p>
<p>要使用 <code>whoosh.highlight.PinpointFragmenter</code> 并避免重新标记文档文本，你必须执行以下所有操作：</p>
<p>使用字符信息索引字段（这将需要重新索引现有索引）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 索引每个词条的开始和结束字符</span></span><br><span class="line">schema = fields.Schema(content=fields.TEXT(stored=<span class="literal">True</span>, chars=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<p>在结果中记录每个文档的词条匹配：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记录每个文档的词条匹配</span></span><br><span class="line">results = searcher.search(myquery, terms=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>将 whoosh.highlight.PinpointFragmenter 设置为分段器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results.fragmenter = highlight.PinpointFragmenter()</span><br></pre></td></tr></table></figure>

<h3 id="精准分段器-Pinpoint-Fragmenter-的局限性"><a href="#精准分段器-Pinpoint-Fragmenter-的局限性" class="headerlink" title="精准分段器 (Pinpoint Fragmenter) 的局限性"></a>精准分段器 (Pinpoint Fragmenter) 的局限性</h3><p>当高亮显示系统不重新标记文本时，它不知道文本中除了它在索引中查找的匹配词条之外的任何其他单词。 因此分段器在添加上下文时，只是盲目地添加一定数量的字符，不区分内容和空格，或者打破单词边界，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hit.highlights(<span class="string">&quot;content&quot;</span>)</span><br><span class="line"><span class="string">&#x27;re when the &lt;b&gt;fragmenter&lt;/b&gt;\n       ad&#x27;</span></span><br></pre></td></tr></table></figure>

<p>（当单词片段形成脏话时，这可能会很尴尬！）</p>
<p>避免这种情况的一种方法是不显示任何周围的上下文，但是只有一个包含该匹配项的片段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hit.highlights(<span class="string">&quot;content&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&lt;b&gt;fragmenter&lt;/b&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>或者，你可以在将文本传递给高亮显示系统之前规范化文本中的空格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = searcher.stored_</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">&quot;[\t\r\n ]+&quot;</span>, <span class="string">&quot; &quot;</span>, text)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hit.highlights(<span class="string">&quot;content&quot;</span>, text=text)</span><br></pre></td></tr></table></figure>

<p>…并使用 <code>PinpointFragmenter</code> 的 <code>autotrim</code> 选项自动去除片段前后重复的空格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>results.fragmenter = highlight.PinpointFragmenter(autotrim=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hit.highlights(<span class="string">&quot;content&quot;</span>)</span><br><span class="line"><span class="string">&#x27;when the &lt;b&gt;fragmenter&lt;/b&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用低级-API"><a href="#使用低级-API" class="headerlink" title="使用低级 API"></a>使用低级 API</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>以下函数允许你使用分析器重新标记 (retokenize) 和高亮显示一段文本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.highlight <span class="keyword">import</span> highlight</span><br><span class="line"></span><br><span class="line">excerpts = highlight(text, terms, analyzer, fragmenter, formatter, top=<span class="number">3</span>,</span><br><span class="line">                     scorer=BasicFragmentScorer, minscore=<span class="number">1</span>, order=FIRST)</span><br></pre></td></tr></table></figure>

<p><code>text</code><br>文档的原始文本。</p>
<p><code>terms</code><br>包含要匹配的查询词的序列或集合，例如 （“渲染”，“着色器”）。</p>
<p><code>analyzer</code><br>用于将文档文本分解为标记以匹配查询词的分析器。 这通常是查询词所在字段的分析器。</p>
<p><code>fragmenter</code><br>一个 whoosh.highlight.Fragmenter 对象，见下文。</p>
<p><code>formatter</code><br>一个 whoosh.highlight.Formatter 对象，见下文。</p>
<p><code>top</code><br>要包含在输出中的片段数。</p>
<p><code>scorer</code><br>一个 whoosh.highlight.FragmentScorer 对象。 Whoosh 当前包含的唯一记分器是默认的 BasicFragmentScorer。</p>
<p><code>minscore</code><br>必须考虑包含一个片段的最低分数。</p>
<p><code>order</code><br>确定输出文本中“顶部”片段顺序的排序函数。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 16 - 查询扩展和关键词提取</title>
    <url>/whoosh/16-%E6%9F%A5%E8%AF%A2%E6%89%A9%E5%B1%95%E5%92%8C%E5%85%B3%E9%94%AE%E8%AF%8D%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Whoosh 提供了计算一组文档的“关键术语”的方法。 对于这些方法，“关键术语”基本上是指在给定文档中频繁出现但在整个索引集合中相对不常见的术语。</p>
<span id="more"></span>

<p>因为这是一个纯粹的统计操作，而不是自然语言处理或 AI 功能，所以结果的质量会根据内容、文档集合的大小以及您提取关键字的文档数量而有所不同。</p>
<p>这些方法可用于为用户提供以下功能：</p>
<ul>
<li>搜索词扩展。 您可以从查询中提取前 N 个结果的关键术语，并将它们作为附加&#x2F;替代查询术语建议给用户尝试。</li>
<li>标签建议。 提取单个文档的关键术语可能会为标记文档提供有用的建议。</li>
<li>“更像这样”。 您可以从查询中提取前十个左右结果的关键术语（并删除原始查询术语），并将这些关键字用作另一个查询的基础，该查询可能会使用用户没有想到的术语找到更多文档。</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li><p>获取更多文档，例如某个搜索结果。 这要求您要匹配的字段是矢量或存储的，或者您可以访问原始文本（例如来自数据库）。</p>
<p>使用 more_like_this()：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mysearcher.search(myquery)</span><br><span class="line">first_hit = results[<span class="number">0</span>]</span><br><span class="line">more_results = first_hit.more_like_this(<span class="string">&quot;content&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在 <code>whoosh.searching.Results</code> 对象中提取前 N 个文档的关键字。 这要求该字段是向量化的或存储的。</p>
<p>使用 <code>whoosh.searching.Results</code> 对象的 <code>key_terms()</code> 方法从结果集的前 N 个文档中提取关键字。</p>
<p>例如，要从结果对象的前十个文档的内容字段中提取五个关键术语：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keywords = [keyword <span class="keyword">for</span> keyword, score</span><br><span class="line">            <span class="keyword">in</span> results.key_terms(<span class="string">&quot;content&quot;</span>, docs=<span class="number">10</span>, numterms=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>为任意一组文档提取关键字。 这要求该字段是向量化的或存储的。</p>
<p>使用 <code>whoosh.searching.Searcher</code> 对象的 <code>document_number()</code> 或 <code>document_numbers()</code> 方法获取要从中提取关键字的文档的文档编号。</p>
<p>给定文档编号列表，使用 <code>whoosh.searching.Searcher</code> 的 <code>key_terms()</code> 方法提取关键字。</p>
<p>例如，假设您有一个电子邮件索引。 从 <code>emailto</code> 字段包含 <code>matt@whoosh.ca</code> 的电子邮件的内容字段中提取关键术语：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> email_index.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    docnums = s.document_numbers(emailto=<span class="string">u&quot;matt@whoosh.ca&quot;</span>)</span><br><span class="line">    keywords = [keyword <span class="keyword">for</span> keyword, score</span><br><span class="line">                <span class="keyword">in</span> s.key_terms(docnums, <span class="string">&quot;body&quot;</span>)]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>从不在索引中的任意文本中提取关键字。</p>
<p>给定文本，使用 whoosh.searching.Searcher 的 key_terms_from_text() 方法提取关键字：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> email_index.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    keywords = [keyword <span class="keyword">for</span> keyword, score</span><br><span class="line">                <span class="keyword">in</span> s.key_terms_from_text(<span class="string">&quot;body&quot;</span>, mytext)]</span><br></pre></td></tr></table></figure>

<h2 id="扩展模型"><a href="#扩展模型" class="headerlink" title="扩展模型"></a>扩展模型</h2><p><code>whoosh.classify</code> 模块中的 <code>ExpansionModel</code> 子类对关键词实现了不同的权重函数。 这些模型从 Terrier 中的原始 Java 实现转换为 Python。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 17 - 更正用户查询中的错误 “你的意思... ？”</title>
    <url>/whoosh/17-%E6%9B%B4%E6%AD%A3%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF./</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Whoosh 可以通过从索引（或字典）中返回与错误键入的单词接近的单词列表来快速建议替换错误键入的单词：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    corrector = s.corrector(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> mistyped_word <span class="keyword">in</span> mistyped_words:</span><br><span class="line">        <span class="built_in">print</span> corrector.suggest(mistyped_word, limit=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>有关参数的信息，请参阅 <code>whoosh.spelling.Corrector.suggest()</code> 方法文档。</p>
<p>目前，建议引擎更像是一个“拼写错误纠正器”，而不是真正的“拼写检查器”，因为它不进行良好的拼写检查器可能进行的那种复杂的语音匹配或语义&#x2F;上下文分析。 但是，它仍然非常有用。</p>
<p>纠正单词的策略主要有两种：</p>
<ul>
<li>使用索引字段中的词条。</li>
<li>使用单词列表中的单词。</li>
</ul>
<h2 id="从索引字段中提取建议"><a href="#从索引字段中提取建议" class="headerlink" title="从索引字段中提取建议"></a>从索引字段中提取建议</h2><p>在 Whoosh 2.7 及更高版本中，拼写建议适用于所有字段。 但是，如果你有一个修改索引词的分析器（例如词干提取），你可以将 spelling&#x3D;True 添加到一个字段，让它存储单独的未修改版本的拼写建议词条：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ana = analysis.StemmingAnalyzer()</span><br><span class="line">schema = fields.Schema(text=TEXT(analyzer=ana, spelling=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<p>然后，你可以使用 whoosh.searching.Searcher.corrector() 方法获取字段的校正器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">corrector = searcher.corrector(<span class="string">&quot;content&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>使用索引字段内容的优点是，当你对该索引进行拼写检查查询时，建议会根据索引的内容量身定制。 缺点是如果索引文档包含拼写错误，那么拼写建议也将是错误的。</p>
<h2 id="从单词列表中提取建议"><a href="#从单词列表中提取建议" class="headerlink" title="从单词列表中提取建议"></a>从单词列表中提取建议</h2><p>互联网上有大量可用的单词列表，你可以使用它们来填充拼写词典。</p>
<p>（在下面的示例中，word_list 可以是 unicode 字符串列表，也可以是每行一个单词的文件对象。）</p>
<p>从排序的单词列表创建 whoosh.spelling.Corrector 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.spelling <span class="keyword">import</span> ListCorrector</span><br><span class="line"></span><br><span class="line"><span class="comment"># word_list 必须是 unicocde 字符串的排序列表</span></span><br><span class="line">corrector = ListCorrector(word_list)</span><br></pre></td></tr></table></figure>

<h2 id="合并两个或多个校正器"><a href="#合并两个或多个校正器" class="headerlink" title="合并两个或多个校正器"></a>合并两个或多个校正器</h2><p>你可以使用 <code>whoosh.spelling.MultiCorrector</code> 组合来自两个来源的建议（例如，索引字段的内容和单词列表）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = searcher.corrector(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">c2 = spelling.ListCorrector(word_list)</span><br><span class="line">corrector = MultiCorrector([c1, c2])</span><br></pre></td></tr></table></figure>

<h2 id="更正用户查询"><a href="#更正用户查询" class="headerlink" title="更正用户查询"></a>更正用户查询</h2><p>你可以使用 whoosh.searching.Searcher.correct_query() 方法对用户查询进行拼写检查：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> qparser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析用户查询字符串</span></span><br><span class="line">qp = qparser.QueryParser(<span class="string">&quot;content&quot;</span>, myindex.schema)</span><br><span class="line">q = qp.parse(qstring)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试更正查询</span></span><br><span class="line"><span class="keyword">with</span> myindex.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    corrected = s.correct_query(q, qstring)</span><br><span class="line">    <span class="keyword">if</span> corrected.query != q:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Did you mean:&quot;</span>, corrected.string)</span><br></pre></td></tr></table></figure>

<p><code>correct_query</code> 方法返回具有以下属性的对象：</p>
<p><code>query</code><br>更正的 whoosh.query.Query 树。 你可以测试这是否等于 (&#x3D;&#x3D;) 原始解析查询，以检查校正器是否实际更改了任何内容。</p>
<p><code>string</code><br>用户查询字符串的更正版本。</p>
<p><code>tokens</code><br>表示更正词条的更正标记对象列表。 你可以使用它来重新格式化用户查询（见下文）。</p>
<p>你可以使用 <code>whoosh.highlight.Formatter</code> 对象来格式化更正后的查询字符串。 例如，使用 <code>HtmlFormatter</code> 将更正后的字符串格式化为 HTML：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> highlight</span><br><span class="line"></span><br><span class="line">hf = highlight.HtmlFormatter()</span><br><span class="line">corrected = s.correct_query(q, qstring, formatter=hf)</span><br></pre></td></tr></table></figure>

<p>有关默认值和参数的信息，请参阅 <code>whoosh.searching.Searcher.correct_query()</code> 的文档。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 18 - 字段缓存</title>
    <url>/whoosh/18-%E5%AD%97%E6%AE%B5%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>默认 (filedb) 后端在某些情况下使用字段缓存。 字段缓存基本上预先计算索引中文档的顺序以加速排序和分面。</p>
<p>第一次对大型索引进行排序&#x2F;分面时，生成字段缓存可能会花费一些时间。 字段缓存保存在内存中（默认情况下在生成时写入磁盘）因此后续的排序&#x2F;分面搜索应该更快。</p>
<span id="more"></span>

<p>默认的缓存策略永远不会使字段缓存过期，因此重复使用的搜索器和&#x2F;或对大量不同的字段进行排序可能会占用大量索引的内存。</p>
<h2 id="自定义缓存行为"><a href="#自定义缓存行为" class="headerlink" title="自定义缓存行为"></a>自定义缓存行为</h2><p>（以下 API 示例引用默认的 filedb 后端。）</p>
<p>默认情况下，Whoosh 将字段缓存保存到磁盘。 为防止读者或搜索者写出字段缓存，请在开始使用它之前执行此操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">searcher.set_caching_policy(save=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>默认情况下，如果将缓存写入磁盘，它们将保存在索引目录中。 要告诉读者或搜索者将缓存文件保存到不同的位置，请创建一个存储对象并将其传递给 storage 关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.filedb.filestore <span class="keyword">import</span> FileStorage</span><br><span class="line"></span><br><span class="line">mystorage = FileStorage(<span class="string">&quot;path/to/cachedir&quot;</span>)</span><br><span class="line">reader.set_caching_policy(storage=mystorage)</span><br></pre></td></tr></table></figure>

<h2 id="创建自定义缓存策略"><a href="#创建自定义缓存策略" class="headerlink" title="创建自定义缓存策略"></a>创建自定义缓存策略</h2><p>想要实现自定义缓存策略（例如，添加缓存过期）的专家用户应该继承 <code>whoosh.filedb.fieldcache.FieldCachingPolicy</code>。 然后你可以将策略对象的实例传递给 <code>set_caching_policy</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">searcher.set_caching_policy(MyPolicy())</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 19 - 加快批量索引的技巧</title>
    <url>/whoosh/19-%E5%8A%A0%E5%BF%AB%E6%89%B9%E9%87%8F%E7%B4%A2%E5%BC%95%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>索引文档往往分为两种一般模式：在创建文档时一次添加一个文档（如在 Web 应用程序中），以及一次添加一堆文档（批量索引）。</p>
<p>以下设置和备用工作流可以使批量索引更快。</p>
<span id="more"></span>

<h2 id="词干分析器缓存"><a href="#词干分析器缓存" class="headerlink" title="词干分析器缓存"></a>词干分析器缓存</h2><p>默认情况下，词干分析器使用最近最少使用 (LRU) 缓存来限制它使用的内存量，以防止在长时间重复使用分析器时缓存变得非常大。 但是，与具有“无界”缓存的词干分析器相比，LRU 缓存可以使索引速度降低近 200%。</p>
<p>当你使用分析器的一次性实例进行大批量索引时，请考虑使用无界缓存：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = myindex.writer()</span><br><span class="line"><span class="comment"># 从文本字段中获取分析器对象</span></span><br><span class="line">stem_ana = w.schema[<span class="string">&quot;content&quot;</span>].<span class="built_in">format</span>.analyzer</span><br><span class="line"><span class="comment"># 设置 cachesize 为-1 表示无界缓存</span></span><br><span class="line">stem_ana.cachesize = -<span class="number">1</span></span><br><span class="line"><span class="comment"># 重置分析器以获取更改的属性</span></span><br><span class="line">stem_ana.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 writer 来索引文档...</span></span><br></pre></td></tr></table></figure>

<h2 id="limitmb-参数"><a href="#limitmb-参数" class="headerlink" title="limitmb 参数"></a><code>limitmb</code> 参数</h2><p>whoosh.index.Index.writer() 的 limitmb 参数控制编写器将用于索引池的最大内存（以兆字节为单位）。 数字越大，索引速度越快。</p>
<p>考虑到如今许多人拥有数 GB 的 RAM，默认值 128 实际上有点低。 将它设置得更高可以大大加快索引速度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line">writer = ix.writer(limitmb=<span class="number">256</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>笔记</p>
<p>由于解释器开销（高达两倍！），实际使用的内存将高于此值。 它作为调整参数非常有用，但不能用于尝试精确控制 Whoosh 的内存使用。</p>
</blockquote>
<h2 id="过程-procs-参数"><a href="#过程-procs-参数" class="headerlink" title="过程 (procs) 参数"></a>过程 (<code>procs</code>) 参数</h2><p><code>whoosh.index.Index.writer()</code> 的 <code>procs</code> 参数控制编写器将用于索引的处理器数量（通过多处理模块）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line">writer = ix.writer(procs=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>请注意，当你使用多处理时，<code>limitmb</code> 参数控制每个进程使用的内存量，因此实际使用的内存将是 <code>limitmb * procs</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个进程最多使用 128 个，总共 512 个</span></span><br><span class="line">writer = ix.writer(procs=<span class="number">4</span>, limitmb=<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

<h2 id="多段-multisegment-参数"><a href="#多段-multisegment-参数" class="headerlink" title="多段 (multisegment) 参数"></a>多段 (<code>multisegment</code>) 参数</h2><p><code>procs</code> 参数导致默认编写器使用多个处理器来执行大部分索引，但仍然使用单个进程将每个子编写器的池合并到一个段中。</p>
<p>你还可以通过使用 multisegment&#x3D;True 关键字参数来获得更好的索引速度，而不是合并每个子编写器的结果，只是让它们各自写出一个新段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">ix = index.open_dir(<span class="string">&quot;indexdir&quot;</span>)</span><br><span class="line">writer = ix.writer(procs=<span class="number">4</span>, multisegment=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>缺点是，此选项不会创建单个新段，而是会创建多个新段，这些新段的数量至少等于你使用的进程数。</p>
<p>例如，如果你使用 <code>procs=4</code>，编写器将创建四个新段。 （如果你合并旧段或在父写入器上调用 <code>add_reader</code>，父写入器也会写入一个段，这意味着你将获得五个新段。）</p>
<p>因此，虽然 <code>multisegment=True</code> 比普通编写器快得多，但你应该只将它用于大批量索引作业（或者可能只用于从头开始索引）。 它不应该是你用于索引的唯一方法，否则段数将永远增加！</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 20 - 并发、锁定和版本控制</title>
    <url>/whoosh/20-%E5%B9%B6%E5%8F%91%E3%80%81%E9%94%81%E5%AE%9A%E5%92%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p><code>FileIndex</code> 对象是“无状态”的，应该可以在线程之间共享。</p>
<span id="more"></span>

<p><code>Reader</code> 对象（位于 <code>Searcher</code> 对象的基础上）包装打开的文件，并且通常各个方法依赖于一致的文件光标位置（例如，它们连续执行两个 file.read()s，因此如果另一个线程在两个读取调用之间移动光标 坏事会发生）。 你应该在代码中为每个线程使用一个阅读器&#x2F;搜索器。</p>
<p>读者&#x2F;搜索者倾向于缓存信息（例如用于排序的字段缓存），因此如果你可以在多个搜索请求之间共享一个信息，那将是一个巨大的性能胜利。</p>
<h2 id="锁定"><a href="#锁定" class="headerlink" title="锁定"></a>锁定</h2><p>一次只有一个线程&#x2F;进程可以写入索引。 当你打开编写器时，它会锁定索引。 如果你尝试在另一个线程&#x2F;进程中打开同一索引上的编写器，它将引发 whoosh.store.LockError。</p>
<p>在多线程或多进程环境中，你的代码需要注意，如果编写器已经打开，则打开编写器可能会引发此异常。 Whoosh 包括几个示例实现（whoosh.writing.AsyncWriter 和 whoosh.writing.BufferedWriter）来解决写锁问题。</p>
<p>当写入器处于打开状态且在提交期间，索引仍可用于读取。 现有读者不受影响，新读者可以正常打开当前索引。</p>
<h2 id="锁定文件"><a href="#锁定文件" class="headerlink" title="锁定文件"></a>锁定文件</h2><p>锁定索引是通过在索引目录中的 <code>&lt;indexname&gt;\_WRITELOCK</code> 文件上获取独占文件锁来实现的。 释放文件锁后，文件并没有被删除，所以文件存在并不代表索引被锁定。</p>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>当你打开阅读器&#x2F;搜索器时，阅读器代表索引当前版本的视图。 如果有人对索引进行更改，任何已经打开的读者都不会自动获取更改。 阅读器看到的索引始终与打开阅读器时的索引相同。</p>
<p>如果你在多个搜索请求中重复使用 <code>Searcher</code>，你可以使用 <code>whoosh.searching.Searcher.up_to_date()</code> 检查 <code>Searcher</code> 是否是最新版本索引的视图。 如果搜索器不是最新的，你可以使用 <code>whoosh.searching.Searcher.refresh()</code> 获取搜索器的最新副本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果&#x27;searcher&#x27;不是最新的，替换它</span></span><br><span class="line">searcher = searcher.refresh()</span><br></pre></td></tr></table></figure>

<p>（如果搜索者有最新版本的索引，<code>refresh()</code> 简单地返回它。）</p>
<p>调用 <code>Searcher.refresh()</code> 比关闭搜索器并打开一个新搜索器更有效，因为它将重新使用任何未更改的底层读取器和缓存。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 21 - 索引和搜索文档层次结构</title>
    <url>/whoosh/21-%E7%B4%A2%E5%BC%95%E5%92%8C%E6%90%9C%E7%B4%A2%E6%96%87%E6%A1%A3%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Whoosh 的全文索引本质上是一个平面文档数据库。 但是，Whoosh 支持两种技术来模拟分层文档的索引和查询，即形成父子层次结构的文档集，例如“章节 - 部分 - 段落”或“模块 - 类 - 方法”。</p>
<span id="more"></span>

<p>你可以在索引时指定父子关系，方法是将文档分组在同一层次结构中，然后使用 <code>whoosh.query.NestedParent</code> 和 <code>whoosh.query.NestedChildren</code> 根据其子项查找父项，反之亦然。</p>
<p>或者，你可以使用查询时连接，本质上类似于数据库中的外部键连接，你可以在其中执行一次搜索以查找相关文档，然后使用该文档上的存储值（例如，父字段）来查找另一个文档 .</p>
<p>这两种方法各有利弊。</p>
<h2 id="使用嵌套文档索引"><a href="#使用嵌套文档索引" class="headerlink" title="使用嵌套文档索引"></a>使用嵌套文档索引</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>此方法通过将“父”文档及其所有“子”文档索引为一个“组”来工作，因此可以保证它们最终位于同一段中。 你可以使用 <code>IndexWriter.group()</code> 返回的上下文管理器对文档进行分组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> ix.writer() <span class="keyword">as</span> w:</span><br><span class="line">    <span class="keyword">with</span> w.group():</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;class&quot;</span>, name=<span class="string">&quot;Index&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add document&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add reader&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> w.group():</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;class&quot;</span>, name=<span class="string">&quot;Accumulator&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;get result&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> w.group():</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;class&quot;</span>, name=<span class="string">&quot;Calculator&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add all&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add some&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;multiply&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> w.group():</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;class&quot;</span>, name=<span class="string">&quot;Deleter&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add&quot;</span>)</span><br><span class="line">        w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;delete&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>或者，你可以使用 start_group() 和 end_group() 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> ix.writer() <span class="keyword">as</span> w:</span><br><span class="line">    w.start_group()</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;class&quot;</span>, name=<span class="string">&quot;Index&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add document&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;add reader&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, name=<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    w.end_group()</span><br></pre></td></tr></table></figure>

<p>层次结构的每一层都应该有一个区别于其他层次的查询（例如，在上面的索引中，可以使用 kind:class 或 kind:method 来匹配层次结构的不同层次）。</p>
<p>为文档的层次结构编制索引后，你可以使用两种查询类型根据子项查找父项，反之亦然。</p>
<p>（目前默认查询解析器不支持嵌套查询。）</p>
<h3 id="嵌套父查询"><a href="#嵌套父查询" class="headerlink" title="嵌套父查询"></a>嵌套父查询</h3><p><code>whoosh.query.NestedParent</code> 查询类型允许你指定对子文档的查询，但让查询返回层次结构中更高层的“祖先”文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先，我们需要一个查询来匹配层次结构中我们想要的“父”</span></span><br><span class="line"><span class="comment"># 级别中的所有文档</span></span><br><span class="line">all_parents = query.Term(<span class="string">&quot;kind&quot;</span>, <span class="string">&quot;class&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，我们需要一个匹配我们想要找到的孩子的查询</span></span><br><span class="line">wanted_kids = query.Term(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;close&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们可以进行查询来匹配“name”为“close”的文档，</span></span><br><span class="line"><span class="comment"># 但查询将返回匹配子项的“父”文档</span></span><br><span class="line">q = query.NestedParent(all_parents, wanted_kids)</span><br><span class="line"><span class="comment"># results = Index, Calculator</span></span><br></pre></td></tr></table></figure>

<p>请注意，在多于两层的层次结构中，你可以指定匹配层次结构任何层级的“parents”查询，这样你就可以返回匹配子级的顶级祖先，或第二层、第三层等 .</p>
<p>该查询首先构建一个表示哪些文档是“父”的位向量：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">索引</span><br><span class="line">|      计算器</span><br><span class="line">|      |</span><br><span class="line">1000100100000100</span><br><span class="line">    |        |</span><br><span class="line">    |        累加器</span><br><span class="line">    累加器</span><br></pre></td></tr></table></figure>

<p>然后对于“child”查询的每个匹配项，它从位向量计算前一个父项并将其作为匹配项返回（无论有多少子项匹配，它只返回每个父项一次）。 这个父查找非常有效：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1000100100000100</span><br><span class="line">   |</span><br><span class="line">|&lt;-+ close</span><br></pre></td></tr></table></figure>

<h3 id="嵌套子查询"><a href="#嵌套子查询" class="headerlink" title="嵌套子查询"></a>嵌套子查询</h3><p><code>NestedParent</code> 的对立面是 <code>whoosh.query.NestedChildren</code>。 此查询允许你匹配父母但返回他们的孩子。 这很有用，例如，搜索专辑标题并返回专辑中的歌曲：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询匹配我们想要匹配的“父”级别的所有文档</span></span><br><span class="line">all_parents = query.Term(<span class="string">&quot;kind&quot;</span>, <span class="string">&quot;album&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们要匹配的父文档</span></span><br><span class="line">wanted_parents = query.Term(<span class="string">&quot;album_title&quot;</span>, <span class="string">&quot;heaven&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们可以查询匹配父文档，其中“album_title”包含“heaven”，</span></span><br><span class="line"><span class="comment"># 但查询将返回匹配父文档的“子”文档</span></span><br><span class="line">q1 = query.NestedChildren(all_parents, wanted_parents)</span><br></pre></td></tr></table></figure>

<p>然后，你可以将该查询与 <code>AND</code> 子句结合起来，例如，查找出现在专辑名称为“天堂”的专辑中歌曲名称中带有“heaven”的歌曲：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q2 = query.And([q1, query.Term(<span class="string">&quot;song_title&quot;</span>, <span class="string">&quot;hell&quot;</span>)])</span><br></pre></td></tr></table></figure>

<h3 id="删除和更新分层文档"><a href="#删除和更新分层文档" class="headerlink" title="删除和更新分层文档"></a>删除和更新分层文档</h3><p>索引时间方法的缺点是更新和删除。 因为查询的实现依赖于段中连续的父文档和子文档，所以你不能只更新&#x2F;删除一个子文档。 你一次只能更新&#x2F;删除整个顶级文档（例如，如果你的层次结构是“章节 - 部分 - 段落”，则你只能更新或删除整个章节，而不是部分或段落）。 如果层次结构的顶层代表非常大的文本块，这可能涉及大量删除和重建索引。</p>
<p>目前 <code>Writer.update_document()</code> 不会自动处理嵌套文档。 你必须手动删除并重新添加文档组才能更新它们。</p>
<p>要删除嵌套文档组，请使用 Writer.delete_by_query() 方法和 NestedParent 查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除“累加器”类</span></span><br><span class="line">all_parents = query.Term(<span class="string">&quot;kind&quot;</span>, <span class="string">&quot;class&quot;</span>)</span><br><span class="line">to_delete = query.Term(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Accumulator&quot;</span>)</span><br><span class="line">q = query.NestedParent(all_parents, to_delete)</span><br><span class="line"><span class="keyword">with</span> myindex.writer() <span class="keyword">as</span> w:</span><br><span class="line">    w.delete_by_query(q)</span><br></pre></td></tr></table></figure>

<h2 id="使用查询时连接"><a href="#使用查询时连接" class="headerlink" title="使用查询时连接"></a>使用查询时连接</h2><p>在 Whoosh 中模拟分层文档的第二种技术涉及使用每个文档上的存储字段指向其父文档，然后在查询时使用该字段的值来查找父文档和子文档。</p>
<p>例如，如果我们使用指向父类的指针而不是嵌套来索引类和方法的层次结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在每个“方法”文档上存储一个指向父级的指针</span></span><br><span class="line"><span class="keyword">with</span> ix.writer() <span class="keyword">as</span> w:</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;class&quot;</span>, c_name=<span class="string">&quot;Index&quot;</span>, docstring=<span class="string">&quot;...&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;add document&quot;</span>, parent=<span class="string">&quot;Index&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;add reader&quot;</span>, parent=<span class="string">&quot;Index&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;close&quot;</span>, parent=<span class="string">&quot;Index&quot;</span>)</span><br><span class="line"></span><br><span class="line">    w.add_document(kind=<span class="string">&quot;class&quot;</span>, c_name=<span class="string">&quot;Accumulator&quot;</span>, docstring=<span class="string">&quot;...&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;add&quot;</span>, parent=<span class="string">&quot;Accumulator&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;get result&quot;</span>, parent=<span class="string">&quot;Accumulator&quot;</span>)</span><br><span class="line"></span><br><span class="line">    w.add_document(kind=<span class="string">&quot;class&quot;</span>, c_name=<span class="string">&quot;Calculator&quot;</span>, docstring=<span class="string">&quot;...&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;add&quot;</span>, parent=<span class="string">&quot;Calculator&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;add all&quot;</span>, parent=<span class="string">&quot;Calculator&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;add some&quot;</span>, parent=<span class="string">&quot;Calculator&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;multiply&quot;</span>, parent=<span class="string">&quot;Calculator&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;close&quot;</span>, parent=<span class="string">&quot;Calculator&quot;</span>)</span><br><span class="line"></span><br><span class="line">    w.add_document(kind=<span class="string">&quot;class&quot;</span>, c_name=<span class="string">&quot;Deleter&quot;</span>, docstring=<span class="string">&quot;...&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;add&quot;</span>, parent=<span class="string">&quot;Deleter&quot;</span>)</span><br><span class="line">    w.add_document(kind=<span class="string">&quot;method&quot;</span>, m_name=<span class="string">&quot;delete&quot;</span>, parent=<span class="string">&quot;Deleter&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在在查询时进行手动连接</span></span><br><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> s:</span><br><span class="line">    <span class="comment"># 提示：与使用 Searcher.search() 相比，</span></span><br><span class="line">    <span class="comment"># Searcher.document() 和 Searcher.documents()</span></span><br><span class="line">    <span class="comment"># 可让你更轻松地按字段值查找文档</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子到父：</span></span><br><span class="line">    <span class="comment"># 当&quot;close&quot;方法触发时，打印类的文档字符串</span></span><br><span class="line">    <span class="keyword">for</span> child_doc <span class="keyword">in</span> s.documents(m_name=<span class="string">&quot;close&quot;</span>):</span><br><span class="line">        <span class="comment"># 使用“parent”字段的存储值查找父文档</span></span><br><span class="line">        parent_doc = s.document(c_name=child_doc[<span class="string">&quot;parent&quot;</span>])</span><br><span class="line">        <span class="comment"># 打印父文档存储的文档字符串字段</span></span><br><span class="line">        <span class="built_in">print</span>(parent_doc[<span class="string">&quot;docstring&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 父到子:</span></span><br><span class="line">    <span class="comment"># 在文档字符串中查找带有“big”的类并打印它们的方法</span></span><br><span class="line">    q = query.Term(<span class="string">&quot;kind&quot;</span>, <span class="string">&quot;class&quot;</span>) &amp; query.Term(<span class="string">&quot;docstring&quot;</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> hit <span class="keyword">in</span> s.search(q, limit=<span class="literal">None</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Class name=&quot;</span>, hit[<span class="string">&quot;c_name&quot;</span>], <span class="string">&quot;methods:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> child_doc <span class="keyword">in</span> s.documents(parent=hit[<span class="string">&quot;c_name&quot;</span>]):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  Method name=&quot;</span>, child_doc[<span class="string">&quot;m_name&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>这种技术比索引时间嵌套更灵活，因为你可以逐个删除&#x2F;更新层次结构中的单个文档，尽管它不支持轻松查找不同的父级别。 它也比索引时间嵌套慢（可能慢得多），因为你必须对每个找到的文档执行额外的搜索。</p>
<p>Whoosh 的未来版本可能会包含“加入”查询，以使此过程更高效（或至少更自动化）。</p>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Whoosh 22 - Whoosh 食谱</title>
    <url>/whoosh/22-Whoosh%20%E9%A3%9F%E8%B0%B1/</url>
    <content><![CDATA[<p>从文档编号中获取文档的存储字段</p>
<h2 id="一般的"><a href="#一般的" class="headerlink" title="一般的"></a>一般的</h2><p>从文档编号中获取文档的存储字段</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stored_fields = searcher.stored_fields(docnum)</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>剔除比 N 短&#x2F;长的单词</p>
<p>使用 <code>StopFilter</code> 以及 <code>minsize</code> 和 <code>maxsize</code> 关键字参数。 如果你只想根据大小而不是常用词进行过滤，请将非索引字表设置为无：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sf = analysis.StopFilter(stoplist=<span class="literal">None</span>, minsize=<span class="number">2</span>, maxsize=<span class="number">40</span>)</span><br></pre></td></tr></table></figure>

<h3 id="允许可选的区分大小写的搜索"><a href="#允许可选的区分大小写的搜索" class="headerlink" title="允许可选的区分大小写的搜索"></a>允许可选的区分大小写的搜索</h3><p>一个快速简单的方法是索引每个单词的原始版本和小写版本。 如果用户搜索一个全小写的单词，它会作为一个不区分大小写的搜索，但如果他们搜索一个包含任何大写字符的单词，它会作为一个区分大小写的搜索：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CaseSensitivizer</span>(analysis.Filter):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, tokens</span>):</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> tokens:</span><br><span class="line">            <span class="keyword">yield</span> t</span><br><span class="line">            <span class="keyword">if</span> t.mode == <span class="string">&quot;index&quot;</span>:</span><br><span class="line">               low = t.text.lower()</span><br><span class="line">               <span class="keyword">if</span> low != t.text:</span><br><span class="line">                   t.text = low</span><br><span class="line">                   <span class="keyword">yield</span> t</span><br><span class="line"></span><br><span class="line">ana = analysis.RegexTokenizer() | CaseSensitivizer()</span><br><span class="line">[t.text <span class="keyword">for</span> t <span class="keyword">in</span> ana(<span class="string">&quot;The new SuperTurbo 5000&quot;</span>, mode=<span class="string">&quot;index&quot;</span>)]</span><br><span class="line"><span class="comment"># [&quot;The&quot;, &quot;the&quot;, &quot;new&quot;, &quot;SuperTurbo&quot;, &quot;superturbo&quot;, &quot;5000&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="搜索中"><a href="#搜索中" class="headerlink" title="搜索中"></a>搜索中</h2><p>查找每个文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myquery = query.Every()</span><br></pre></td></tr></table></figure>

<p>myquery &#x3D; query.Every()<br>iTunes 风格的即输入即搜索<br>使用 whoosh.analysis.NgramWordAnalyzer 作为你要在用户键入时搜索的字段的分析器。 你可以通过使用 phrase&#x3D;False 关闭字段中的位置来节省索引空间，因为在 N-gram 字段上搜索短语通常没有多大意义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如，在用户键入时搜索“title”字段</span></span><br><span class="line">analyzer = analysis.NgramWordAnalyzer()</span><br><span class="line">title_field = fields.TEXT(analyzer=analyzer, phrase=<span class="literal">False</span>)</span><br><span class="line">schema = fields.Schema(title=title_field)</span><br></pre></td></tr></table></figure>

<p>有关可用选项的信息，请参阅 <code>NgramWordAnalyzer</code> 类的文档。</p>
<h2 id="捷径"><a href="#捷径" class="headerlink" title="捷径"></a>捷径</h2><p>按字段值查找文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个文档（唯一字段值）</span></span><br><span class="line">stored_fields = searcher.document(<span class="built_in">id</span>=<span class="string">&quot;bacon&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个文档</span></span><br><span class="line"><span class="keyword">for</span> stored_fields <span class="keyword">in</span> searcher.documents(tag=<span class="string">&quot;cake&quot;</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h2 id="排序和评分"><a href="#排序和评分" class="headerlink" title="排序和评分"></a>排序和评分</h2><p>请参阅排序和分面。</p>
<h3 id="根据匹配项的位置对结果进行评分"><a href="#根据匹配项的位置对结果进行评分" class="headerlink" title="根据匹配项的位置对结果进行评分"></a>根据匹配项的位置对结果进行评分</h3><p>以下评分函数使用词条在每个文档中首次出现的位置来计算分数，因此在文档中较早出现给定词条的文档得分较高：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh <span class="keyword">import</span> scoring</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pos_score_fn</span>(<span class="params">searcher, fieldname, text, matcher</span>):</span><br><span class="line">    poses = matcher.value_as(<span class="string">&quot;positions&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (poses[<span class="number">0</span>] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pos_weighting = scoring.FunctionWeighting(pos_score_fn)</span><br><span class="line"><span class="keyword">with</span> myindex.searcher(weighting=pos_weighting) <span class="keyword">as</span> s:</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><h3 id="有多少点击率？"><a href="#有多少点击率？" class="headerlink" title="有多少点击率？"></a>有多少点击率？</h3><p>得分命中数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">found = results.scored_length()</span><br></pre></td></tr></table></figure>

<p>根据搜索的参数，可以知道准确的总命中数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> results.has_exact_length():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Scored&quot;</span>, found, <span class="string">&quot;of exactly&quot;</span>, <span class="built_in">len</span>(results), <span class="string">&quot;documents&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>然而，通常与查询匹配的文档的确切数量是未知的，因为搜索者可以跳过它知道不会出现在“前 N 个”列表中的文档块。 如果你在确切长度未知的查询上调用 len(results)，Whoosh 将运行原始查询的未评分版本以获取确切的数字。 这比评分搜索快，但在非常大的索引或复杂查询上可能仍然明显慢。</p>
<p>作为替代方案，你可以显示估计的总点击数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">found = results.scored_length()</span><br><span class="line"><span class="keyword">if</span> results.has_exact_length():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Scored&quot;</span>, found, <span class="string">&quot;of exactly&quot;</span>, <span class="built_in">len</span>(results), <span class="string">&quot;documents&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    low = results.estimated_min_length()</span><br><span class="line">    high = results.estimated_length()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Scored&quot;</span>, found, <span class="string">&quot;of between&quot;</span>, low, <span class="string">&quot;and&quot;</span>, high, <span class="string">&quot;documents&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="每次命中匹配哪些词条？"><a href="#每次命中匹配哪些词条？" class="headerlink" title="每次命中匹配哪些词条？"></a>每次命中匹配哪些词条？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 terms=True 来记录每次命中的词条匹配</span></span><br><span class="line">results = searcher.search(myquery, terms=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">    <span class="comment"># 哪些词在这次命中中匹配？</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Matched:&quot;</span>, hit.matched_terms())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询中的哪些词在此匹配中不匹配？</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Didn&#x27;t match:&quot;</span>, myquery.all_terms() - hit.matched_terms())</span><br></pre></td></tr></table></figure>

<h2 id="全局信息"><a href="#全局信息" class="headerlink" title="全局信息"></a>全局信息</h2><p>索引中有多少文档？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 包括已删除但尚未优化掉的文档</span></span><br><span class="line">numdocs = searcher.doc_count_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不包括删除的文件</span></span><br><span class="line">numdocs = searcher.doc_count()</span><br></pre></td></tr></table></figure>

<p>索引中有哪些字段？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> myindex.schema.names()</span><br></pre></td></tr></table></figure>

<p>词条 X 在索引中吗？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (<span class="string">&quot;content&quot;</span>, <span class="string">&quot;wobble&quot;</span>) <span class="keyword">in</span> searcher</span><br></pre></td></tr></table></figure>

<p>词条 X 在索引中出现了多少次？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># content:wobble 在所有文档中出现的次数</span></span><br><span class="line">freq = searcher.frequency(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;wobble&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含内容的文档数：wobble</span></span><br><span class="line">docfreq = searcher.doc_frequency(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;wobble&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>词条 X 在文档 Y 中吗？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查文档 500 的“content”字段是否包含词条“wobble”</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有词条向量，跳过列表...</span></span><br><span class="line">postings = searcher.postings(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;wobble&quot;</span>)</span><br><span class="line">postings.skip_to(<span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span> postings.<span class="built_in">id</span>() == <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...或者更慢但更简单的方法</span></span><br><span class="line">docset = <span class="built_in">set</span>(searcher.postings(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;wobble&quot;</span>).all_ids())</span><br><span class="line"><span class="keyword">return</span> <span class="number">500</span> <span class="keyword">in</span> docset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果字段有词向量，跳过列表...</span></span><br><span class="line">vector = searcher.vector(<span class="number">500</span>, <span class="string">&quot;content&quot;</span>)</span><br><span class="line">vector.skip_to(<span class="string">&quot;wobble&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> vector.<span class="built_in">id</span>() == <span class="string">&quot;wobble&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...或者更慢但更简单的方法</span></span><br><span class="line">wordset = <span class="built_in">set</span>(searcher.vector(<span class="number">500</span>, <span class="string">&quot;content&quot;</span>).all_ids())</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;wobble&quot;</span> <span class="keyword">in</span> wordset</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>Next SEO 插件</title>
    <url>/Next-SEO-%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>NextSeo</code> 的工作原理是将其包含在您希望添加 SEO 属性的页面上。一旦包含在页面上，您就可以向它传递一个具有页面 SEO 属性的配置对象。这可以在页面级别动态生成，或者在某些情况下，您的 API 可能会返回一个 SEO 对象。</p>
<span id="more"></span>

<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>首先，安装它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install next-seo</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add next-seo</span><br></pre></td></tr></table></figure>

<h3 id="将-SEO-添加到页面"><a href="#将-SEO-添加到页面" class="headerlink" title="将 SEO 添加到页面"></a>将 SEO 添加到页面</h3><hr>
<p>使用 Next.js 13 中引入的 <code>app</code> 目录？</p>
<p>如果您使用的是 Next.js <code>app</code> 目录，那么强烈建议您使用内置的 <code>generateMetaData</code> 方法。您可以在 <a href="https://beta.nextjs.org/docs/guides/seo#usage">此处</a> 查看文档</p>
<p>如果您使用的是 <code>pages</code> 目录，那么 <code>NextSeo</code> 正是您 SEO 所需要的！</p>
<hr>
<p>然后您需要导入 <code>NextSeo</code> 并添加所需的属性。这将为 SEO 渲染出 <code>&lt;head&gt;</code> 中的标签。至少，您应该添加标题和说明。</p>
<p><strong>只有标题和描述的例子：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&#x27;Simple Usage Example&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&#x27;A short description goes here.&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Simple Usage<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<p>但是 <code>NextSeo</code> 为您提供了更多可以添加的选项。有关页面的典型示例，请参见下文。</p>
<p><strong>典型页面示例：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&#x27;Using More of Config&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&#x27;This example uses more of the available config options.&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">canonical</span>=<span class="string">&#x27;https://www.canonical.ie/&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">openGraph</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.url.ie</span>/<span class="attr">a</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title:</span> &#x27;<span class="attr">Open</span> <span class="attr">Graph</span> <span class="attr">Title</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">description:</span> &#x27;<span class="attr">Open</span> <span class="attr">Graph</span> <span class="attr">Description</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">images:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.ie</span>/<span class="attr">og-image-01.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> <span class="attr">800</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> <span class="attr">600</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alt:</span> &#x27;<span class="attr">Og</span> <span class="attr">Image</span> <span class="attr">Alt</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type:</span> &#x27;<span class="attr">image</span>/<span class="attr">jpeg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.ie</span>/<span class="attr">og-image-02.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> <span class="attr">900</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> <span class="attr">800</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alt:</span> &#x27;<span class="attr">Og</span> <span class="attr">Image</span> <span class="attr">Alt</span> <span class="attr">Second</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type:</span> &#x27;<span class="attr">image</span>/<span class="attr">jpeg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123; <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.ie</span>/<span class="attr">og-image-03.jpg</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123; <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.ie</span>/<span class="attr">og-image-04.jpg</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">siteName:</span> &#x27;<span class="attr">SiteName</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">twitter</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">handle:</span> &#x27;@<span class="attr">handle</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">site:</span> &#x27;@<span class="attr">site</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">cardType:</span> &#x27;<span class="attr">summary_large_image</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面已添加 SEO<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Twitter-标签的注释"><a href="#Twitter-标签的注释" class="headerlink" title="Twitter 标签的注释"></a>Twitter 标签的注释</h3><p><code>cardType</code>、<code>site</code>、<code>handle</code> 等同于 <code>twitter:card</code>、<code>twitter:site</code>、<code>twitter:creator</code>。可以在 <a href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/summary">此处</a> 找到文档。</p>
<p>Twitter 会读取卡片的 <code>og:title</code>、<code>og:image</code> 和 <code>og:description</code> 标签。<code>next-seo</code> 省略了 <code>twitter:title</code>、<code>twitter:image</code> 和 <code>twitter:description</code> 以避免重复。</p>
<p>某些工具可能会报告此错误。请参阅<a href="https://github.com/garmeeh/next-seo/issues/14">问题 #14</a></p>
<h3 id="默认-SEO-配置"><a href="#默认-SEO-配置" class="headerlink" title="默认 SEO 配置"></a>默认 SEO 配置</h3><p><code>NextSeo</code> 使您能够设置一些默认的 SEO 属性，这些属性将出现在所有页面上，而无需在它们上包含任何内容。如果需要，您还可以逐页覆盖这些。</p>
<p>为此，您需要创建一个自定义的 <code>&lt;App&gt;</code>。在您的页面目录中创建一个新文件 <code>_app.js</code>。请参阅 <a href="https://nextjs.org/docs/advanced-features/custom-app">此处</a> 的 Next.js 文档，了解有关自定义 <code>&lt;App&gt;</code> 的更多信息。</p>
<p>在这个文件中，您需要从 <code>next-seo</code> 导入 <code>DefaultSeo</code> 并作为 <code>props</code> 传递。</p>
<p>这是一个典型的例子：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span>, &#123; <span class="title class_">Container</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next/app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DefaultSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入您的默认 seo 配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">SEO</span> <span class="keyword">from</span> <span class="string">&#x27;../next-seo.config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">App</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">Component</span>, pageProps &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">DefaultSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">openGraph</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type:</span> &#x27;<span class="attr">website</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">locale:</span> &#x27;<span class="attr">en_IE</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.url.ie</span>/&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">siteName:</span> &#x27;<span class="attr">SiteName</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">twitter</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">handle:</span> &#x27;@<span class="attr">handle</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">site:</span> &#x27;@<span class="attr">site</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">cardType:</span> &#x27;<span class="attr">summary_large_image</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了正常工作，由于 Next.js 内部的行为，<code>DefaultSeo</code> 应该放在 <code>Component</code> 之前。</p>
<p>或者，您也可以创建一个配置文件来存储默认值，例如 <code>next-seo.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">openGraph</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;website&#x27;</span>,</span><br><span class="line">    <span class="attr">locale</span>: <span class="string">&#x27;en_IE&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.url.ie/&#x27;</span>,</span><br><span class="line">    <span class="attr">siteName</span>: <span class="string">&#x27;SiteName&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">twitter</span>: &#123;</span><br><span class="line">    <span class="attr">handle</span>: <span class="string">&#x27;@handle&#x27;</span>,</span><br><span class="line">    <span class="attr">site</span>: <span class="string">&#x27;@site&#x27;</span>,</span><br><span class="line">    <span class="attr">cardType</span>: <span class="string">&#x27;summary_large_image&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<details>
<summary>或者像这样，如果你使用的是 TypeScript</summary>
<p>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DefaultSeoProps</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">DefaultSeoProps</span> = &#123;</span><br><span class="line">  <span class="attr">openGraph</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;website&#x27;</span>,</span><br><span class="line">    <span class="attr">locale</span>: <span class="string">&#x27;en_IE&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.url.ie/&#x27;</span>,</span><br><span class="line">    <span class="attr">siteName</span>: <span class="string">&#x27;SiteName&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">twitter</span>: &#123;</span><br><span class="line">    <span class="attr">handle</span>: <span class="string">&#x27;@handle&#x27;</span>,</span><br><span class="line">    <span class="attr">site</span>: <span class="string">&#x27;@site&#x27;</span>,</span><br><span class="line">    <span class="attr">cardType</span>: <span class="string">&#x27;summary_large_image&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>

</p>
</details>

<p>在 <code>\_app.js</code> 的顶部导入</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">SEO</span> <span class="keyword">from</span> <span class="string">&#x27;../next-seo.config&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>并且可以像这样使用“DefaultSeo”组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">DefaultSeo</span> &#123;...<span class="variable constant_">SEO</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>从现在开始，您的所有页面都将应用上述默认值。</p>
<blockquote>
<p>请注意<br><code>Container</code> 在 Next.js v9.0.4 中已被弃用，因此您应该在此版本及更高版本上将此处的组件替换为 <code>React.Fragment</code><br>请参阅 <a href="https://github.com/zeit/next.js/blob/master/errors/app-container-deprecated.md">此处</a></p>
</blockquote>
<h3 id="NextSeo-选项"><a href="#NextSeo-选项" class="headerlink" title="NextSeo 选项"></a>NextSeo 选项</h3><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>titleTemplate</code></td>
<td>string</td>
<td>允许您设置将添加到您的标题的默认标题模板 <a href="#title-template">更多信息</a></td>
</tr>
<tr>
<td><code>title</code></td>
<td>string</td>
<td>设置页面的元标题</td>
</tr>
<tr>
<td><code>defaultTitle</code></td>
<td>string</td>
<td>如果页面上没有设置标题，将使用此字符串而不是空的 <code>titleTemplate</code> <a href="#default-title">更多信息</a></td>
</tr>
<tr>
<td><code>noindex</code></td>
<td>boolean (默认为 false)</td>
<td>设置页面是否应该被索引 <a href="#no-index">更多信息</a></td>
</tr>
<tr>
<td><code>nofollow</code></td>
<td>boolean (默认为 false)</td>
<td>设置是否应该关注页面 <a href="#no-follow">更多信息</a></td>
</tr>
<tr>
<td><code>robotsProps</code></td>
<td>Object</td>
<td>为 <code>X-Robots-Tag</code> 设置更多元信息 <a href="#robotsprops">更多信息</a></td>
</tr>
<tr>
<td><code>description</code></td>
<td>string</td>
<td>设置页面元描述</td>
</tr>
<tr>
<td><code>canonical</code></td>
<td>string</td>
<td>设置页面规范 url</td>
</tr>
<tr>
<td><code>mobileAlternate.media</code></td>
<td>string</td>
<td>设置移动网站的屏幕尺寸</td>
</tr>
<tr>
<td><code>mobileAlternate.href</code></td>
<td>string</td>
<td>设置移动页面备用网址</td>
</tr>
<tr>
<td><code>languageAlternates</code></td>
<td>array</td>
<td>设置备用网址的语言。期望具有以下形状的对象数组：<code>&#123; hrefLang: string, href: string &#125;</code></td>
</tr>
<tr>
<td><code>themeColor</code></td>
<td>string</td>
<td>指示用户代理应该使用的建议颜色来自定义页面或周围用户界面的显示。必须包含有效的 CSS 颜色</td>
</tr>
<tr>
<td><code>additionalMetaTags</code></td>
<td>array</td>
<td>允许您添加此处未记录的元标记。<a href="#additional-meta-tags">更多信息</a></td>
</tr>
<tr>
<td><code>additionalLinkTags</code></td>
<td>array</td>
<td>允许您添加此处未记录的链接标记。<a href="#additional-link-tags">更多信息</a></td>
</tr>
<tr>
<td><code>twitter.cardType</code></td>
<td>string</td>
<td>卡片类型，可以是 <code>summary</code>、<code>summary_large_image</code>、<code>app</code> 或 <code>player</code> 之一</td>
</tr>
<tr>
<td><code>twitter.site</code></td>
<td>string</td>
<td>卡片页脚中使用的网站的@username</td>
</tr>
<tr>
<td><code>twitter.handle</code></td>
<td>string</td>
<td>@username 内容创建者&#x2F;作者（输出为 <code>twitter:creator</code>）</td>
</tr>
<tr>
<td><code>facebook.appId</code></td>
<td>string</td>
<td>用于 Facebook Insights，您必须将 Facebook 应用程序 ID 添加到您的页面才能使用 <a href="#facebook">更多信息</a></td>
</tr>
<tr>
<td><code>openGraph.url</code></td>
<td>string</td>
<td>对象的规范 URL，将用作图表中的永久 ID</td>
</tr>
<tr>
<td><code>openGraph.type</code></td>
<td>string</td>
<td>您的对象的类型。根据您指定的类型，可能还需要其他属性 <a href="#open-graph">更多信息</a></td>
</tr>
<tr>
<td><code>openGraph.title</code></td>
<td>string</td>
<td>开放图表标题，这可能与您的元标题不同。</td>
</tr>
<tr>
<td><code>openGraph.description</code></td>
<td>string</td>
<td>开放图描述，这可能与您的元描述不同。</td>
</tr>
<tr>
<td><code>openGraph.images</code></td>
<td>array</td>
<td>社交媒体平台、slack 等用作预览的一组图像（对象）。如果提供多个 ​​，您可以在共享时选择一个。<a href="#open-graph-examples">查看示例</a></td>
</tr>
<tr>
<td><code>openGraph.videos</code></td>
<td>array</td>
<td>一组视频（对象）</td>
</tr>
<tr>
<td><code>openGraph.locale</code></td>
<td>string</td>
<td>标记开放图形标签的语言环境。格式为 language_TERRITORY。默认为 en_US。</td>
</tr>
<tr>
<td><code>openGraph.siteName</code></td>
<td>string</td>
<td>如果您的对象是较大网站的一部分，则应显示整个网站的名称。</td>
</tr>
<tr>
<td><code>openGraph.profile.firstName</code></td>
<td>string</td>
<td>人的名字。</td>
</tr>
<tr>
<td><code>openGraph.profile.lastName</code></td>
<td>string</td>
<td>人的姓氏。</td>
</tr>
<tr>
<td><code>openGraph.profile.username</code></td>
<td>string</td>
<td>人的用户名。</td>
</tr>
<tr>
<td><code>openGraph.profile.gender</code></td>
<td>string</td>
<td>人的性别。</td>
</tr>
<tr>
<td><code>openGraph.book.authors</code></td>
<td>string[]</td>
<td>文章作者 <a href="#open-graph-examples">查看示例</a></td>
</tr>
<tr>
<td><code>openGraph.book.isbn</code></td>
<td>string</td>
<td><a href="https://en.wikipedia.org/wiki/International_Standard_Book_Number">ISBN</a></td>
</tr>
<tr>
<td><code>openGraph.book.releaseDate</code></td>
<td>datetime</td>
<td>本书的发行日期。</td>
</tr>
<tr>
<td><code>openGraph.book.tags</code></td>
<td>string[]</td>
<td>与本书相关的标签词。</td>
</tr>
<tr>
<td><code>openGraph.article.publishedTime</code></td>
<td>datetime</td>
<td>文章首次发表时。<a href="#open-graph-examples">查看示例</a></td>
</tr>
<tr>
<td><code>openGraph.article.modifiedTime</code></td>
<td>datetime</td>
<td>上次更改文章的时间。</td>
</tr>
<tr>
<td><code>openGraph.article.expirationTime</code></td>
<td>datetime</td>
<td>当文章过时之后。</td>
</tr>
<tr>
<td><code>openGraph.article.authors</code></td>
<td>string[]</td>
<td>文章作者。</td>
</tr>
<tr>
<td><code>openGraph.article.section</code></td>
<td>string</td>
<td>高级部分名称。例如技术</td>
</tr>
<tr>
<td><code>openGraph.article.tags</code></td>
<td>string[]</td>
<td>与本文相关的标签词。</td>
</tr>
</tbody></table>
<h4 id="标题模板"><a href="#标题模板" class="headerlink" title="标题模板"></a>标题模板</h4><p>将 <code>%s</code> 替换为您的标题字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">title = <span class="string">&#x27;这是我的标题&#x27;</span>;</span><br><span class="line">titleTemplate = <span class="string">&#x27;Next SEO | %s&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出：Next SEO | 这是我的标题</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">title = <span class="string">&#x27;这是我的标题&#x27;</span>;</span><br><span class="line">titleTemplate = <span class="string">&#x27;%s | Next SEO&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出：这是我的标题 | Next SEO</span></span><br></pre></td></tr></table></figure>

<h4 id="默认标题"><a href="#默认标题" class="headerlink" title="默认标题"></a>默认标题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">title = <span class="literal">undefined</span>;</span><br><span class="line">titleTemplate = <span class="string">&#x27;Next SEO | %s&#x27;</span>;</span><br><span class="line">defaultTitle = <span class="string">&#x27;Next SEO&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出：Next SEO</span></span><br></pre></td></tr></table></figure>

<h4 id="禁止索引-No-Index"><a href="#禁止索引-No-Index" class="headerlink" title="禁止索引(No Index)"></a>禁止索引(No Index)</h4><p>将其设置为 <code>true</code> 将设置 <code>noindex,follow</code>（要设置 <code>nofollow</code>，请参考 <a href="#no-follow"><code>nofollow</code></a>）。这在逐页的基础上工作。此属性与 <code>nofollow</code> 属性协同工作，它们一起填充 <code>robots</code> 元标记。</p>
<p><strong>注意：</strong> <code>noindex</code> 和 <a href="#no-follow"><code>nofollow</code></a> 属性与所有其他属性略有不同，因为将它们设置为默认值不会按预期工作。这是因为 Next SEO 已经默认了 <code>index,follow</code>，因为 <code>next-seo</code> 毕竟是一个 SEO 插件。因此，如果您想要全局设置这些属性，请参阅 <a href="#dangerouslySetAllPagesToNoIndex">dangerouslySetAllPagesToNoIndex</a> 和 <a href="#dangerouslySetAllPagesToNoFollow">dangerouslySetAllPagesToNoFollow</a>。</p>
<p><strong>单个页面上没有索引的示例：</strong></p>
<p>如果您有一个不希望被索引的页面，您可以通过以下方式实现：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span> <span class="attr">noindex</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>此页面未编入索引<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;meta name=&quot;robots&quot; content=&quot;noindex,follow&quot;&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="dangerouslySetAllPagesToNoIndex"><a href="#dangerouslySetAllPagesToNoIndex" class="headerlink" title="dangerouslySetAllPagesToNoIndex"></a>dangerouslySetAllPagesToNoIndex</h4><p>它的前缀是危险的 (“dangerously”)，因为它将禁止索引 (“noindex”) 所有页面。由于这是一个 SEO 插件，这是一种危险的行为。并非完全不能使用它，只是请确保您想要 <code>noindex</code> <strong>每个</strong> 页面。如果您需要对个别页面进行“索引”，您仍然可以在页面级别覆盖它。这可以通过设置 <code>noindex: false</code> 来完成。</p>
<p>取消设置的唯一方法是从自定义 <code>&lt;App&gt;</code> 中的 <code>DefaultSeo</code> 中删除道具。</p>
<h4 id="禁止关注-No-Follow"><a href="#禁止关注-No-Follow" class="headerlink" title="禁止关注(No Follow)"></a>禁止关注(No Follow)</h4><p>将其设置为 <code>true</code> 将设置 <code>index,nofollow</code>（要设置 <code>noindex</code>，请参考 <a href="#no-index"><code>noindex</code></a>）。这在逐页的基础上工作。此属性与 <code>noindex</code> 属性协同工作，它们一起填充 <code>robots</code> 元标记。</p>
<p><strong>注意：</strong> 与其他属性不同，默认情况下设置 <code>noindex</code> 和 <code>nofollow</code> 不会按预期工作。这是因为 Next SEO 有一个默认的 <code>index,follow</code>，毕竟 <code>next-seo</code> 是一个 SEO 插件。如果您想全局允许这些属性，请参阅 <a href="#dangerouslySetAllPagesToNoIndex">dangerouslySetAllPagesToNoIndex</a> 和 <a href="#dangerouslySetAllPagesToNoFollow">dangerouslySetAllPagesToNoFollow</a>。</p>
<p><strong>单个页面上取消关注的示例：</strong></p>
<p>如果您有一个不希望被索引的页面，您可以通过以下方式实现：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span> <span class="attr">nofollow</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>此页面未被关注<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;meta name=&quot;robots&quot; content=&quot;index,nofollow&quot;&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="dangerouslySetAllPagesToNoFollow"><a href="#dangerouslySetAllPagesToNoFollow" class="headerlink" title="dangerouslySetAllPagesToNoFollow"></a>dangerouslySetAllPagesToNoFollow</h4><p>它的前缀是危险的 (“dangerously”)，因为它将禁止关注 (nofollow) 所有页面。由于这是一个 SEO 插件，这是一种危险的行为。并非完全不能使用它，只是请确保你想要 <code>nofollow</code> <strong>每个</strong>页面。如果您需要对个别页面进行“关注”，您仍然可以在页面级别覆盖它。这可以通过设置 <code>nofollow: false</code> 来完成。</p>
<p>取消设置的唯一方法是从自定义 <code>&lt;App&gt;</code> 中的 <code>DefaultSeo</code> 中删除道具。</p>
<table>
<thead>
<tr>
<th><code>noindex</code></th>
<th><code>nofollow</code></th>
<th><code>robots</code> 的 <code>meta</code> 内容</th>
</tr>
</thead>
<tbody><tr>
<td>–</td>
<td>–</td>
<td><code>index,follow</code>（默认）</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td><code>index,follow</code></td>
</tr>
<tr>
<td>true</td>
<td>–</td>
<td><code>noindex,follow</code></td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td><code>noindex,follow</code></td>
</tr>
<tr>
<td>–</td>
<td>true</td>
<td><code>index,nofollow</code></td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td><code>index,nofollow</code></td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td><code>noindex,nofollow</code></td>
</tr>
</tbody></table>
<h4 id="机器人道具-robotsProps"><a href="#机器人道具-robotsProps" class="headerlink" title="机器人道具(robotsProps)"></a>机器人道具(robotsProps)</h4><p>除了 <code>index, follow</code> 之外，<code>robots</code> 元标记接受更多属性以存档更准确的爬行并为爬行您的页面的 SEO 机器人提供更好的片段。</p>
<p>例子：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">robotsProps</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">nosnippet:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">notranslate:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">noimageindex:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">noarchive:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">maxSnippet:</span> <span class="attr">-1</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">maxImagePreview:</span> &#x27;<span class="attr">none</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">maxVideoPreview:</span> <span class="attr">-1</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Next-SEO 中的额外机器人道具！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;meta name=&quot;robots&quot; content=&quot;index,follow,nosnippet,max-snippet:-1,max-image-preview:none,noarchive,noimageindex,max-video-preview:-1,notranslate&quot;&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="可用属性"><a href="#可用属性" class="headerlink" title="可用属性"></a>可用属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>noarchive</code></td>
<td>boolean</td>
<td>不要在搜索结果中显示<a href="https://support.google.com/websearch/answer/1687222">缓存链接</a>。</td>
</tr>
<tr>
<td><code>nosnippet</code></td>
<td>boolean</td>
<td>不要在此页面的搜索结果中显示文本片段或视频预览。</td>
</tr>
<tr>
<td><code>max-snippet</code></td>
<td>number</td>
<td>最多使用 [number] 个字符作为此搜索结果的文本片段。<a href="https://developers.google.com/search/reference/robots_meta_tag?hl=en-GB#directives">阅读更多</a></td>
</tr>
<tr>
<td><code>max-image-preview</code></td>
<td>‘none’,’standard’,’large’</td>
<td>在搜索结果中设置此页面的图像预览的最大尺寸。</td>
</tr>
<tr>
<td><code>max-video-preview</code></td>
<td>number</td>
<td>在搜索结果中使用最多 [number] 秒作为此页面上视频的视频片段。<a href="https://developers.google.com/search/reference/robots_meta_tag?hl=en-GB#directives">阅读更多</a></td>
</tr>
<tr>
<td><code>notranslate</code></td>
<td>boolean</td>
<td>不要在搜索结果中提供此页面的翻译。</td>
</tr>
<tr>
<td><code>noimageindex</code></td>
<td>boolean</td>
<td>不要索引此页面上的图像。</td>
</tr>
<tr>
<td><code>unavailable_after</code></td>
<td>string</td>
<td>不要在指定的日期&#x2F;时间后在搜索结果中显示此页面。日期&#x2F;时间必须以广泛采用的格式指定，包括但不限于 RFC 822、RFC 850 和 ISO 8601。</td>
</tr>
</tbody></table>
<p>有关“X-Robots-Tag”的更多参考，请访问 <a href="https://developers.google.com/search/reference/robots_meta_tag?hl=en-GB#directives">Google 搜索中心 - 控制抓取和索引</a></p>
<h4 id="推特-Twitter"><a href="#推特-Twitter" class="headerlink" title="推特 (Twitter)"></a>推特 (Twitter)</h4><p>Twitter 会读取卡片的 <code>og:title</code>、<code>og:image</code> 和 <code>og:description</code> 标签，这就是为什么 <code>next-seo</code> 省略 <code>twitter:title</code>、<code>twitter:image</code> 和 <code>twitter:description</code> 所以不要重复。</p>
<p>某些工具可能会报告此错误。请参阅<a href="https://github.com/garmeeh/next-seo/issues/14">问题 #14</a></p>
<h4 id="脸书-Facebook"><a href="#脸书-Facebook" class="headerlink" title="脸书 (Facebook)"></a>脸书 (Facebook)</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">facebook=&#123;&#123;</span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&#x27;1234567890&#x27;</span>,</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果您需要为您的网站启用 Facebook 见解，请将此添加到您的 SEO 配置以包含 fb:app_id 元数据。有关这方面的信息可以在 facebook 的 <a href="https://developers.facebook.com/docs/sharing/webmasters/">文档</a> 中找到</p>
<h4 id="规范网址-Canonical-URL"><a href="#规范网址-Canonical-URL" class="headerlink" title="规范网址 (Canonical URL)"></a>规范网址 (Canonical URL)</h4><p>当您想要合并重复的 URL 时，逐页添加。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">canonical = <span class="string">&#x27;https://www.canonical.ie/&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="备用-Alternate"><a href="#备用-Alternate" class="headerlink" title="备用 (Alternate)"></a>备用 (Alternate)</h4><p>该链接关系用于表示桌面和移动网站与搜索引擎之间的关系。</p>
<p>例子：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">mobileAlternate=&#123;&#123;</span><br><span class="line">  <span class="attr">media</span>: <span class="string">&#x27;only screen and (max-width: 640px)&#x27;</span>,</span><br><span class="line">  <span class="attr">href</span>: <span class="string">&#x27;https://m.canonical.ie&#x27;</span>,</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">languageAlternates=&#123;[&#123;</span><br><span class="line">  <span class="attr">hrefLang</span>: <span class="string">&#x27;de-AT&#x27;</span>,</span><br><span class="line">  <span class="attr">href</span>: <span class="string">&#x27;https://www.canonical.ie/de&#x27;</span>,</span><br><span class="line">&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h4 id="额外的元标签"><a href="#额外的元标签" class="headerlink" title="额外的元标签"></a>额外的元标签</h4><p>这允许您添加任何其他未包含在 <code>config</code> 并且应该使用他替代 <code>children</code> 道具。</p>
<p><code>content</code> 是必需的。然后是 <code>name</code>、<code>property</code> 或 <code>httpEquiv</code>。（每个只有一个）</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">additionalMetaTags=&#123;[&#123;</span><br><span class="line">  <span class="attr">property</span>: <span class="string">&#x27;dc:creator&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;Jane Doe&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;application-name&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;NextSeo&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">httpEquiv</span>: <span class="string">&#x27;x-ua-compatible&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;IE=edge; chrome=1&#x27;</span></span><br><span class="line">&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p>无效示例：</p>
<p>这些是无效的，因为它们在同一条目中包含多个 <code>name</code>、<code>property</code> 或 <code>httpEquiv</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">additionalMetaTags=&#123;[&#123;</span><br><span class="line">  <span class="attr">property</span>: <span class="string">&#x27;dc:creator&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;dc:creator&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;Jane Doe&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">property</span>: <span class="string">&#x27;application-name&#x27;</span>,</span><br><span class="line">  <span class="attr">httpEquiv</span>: <span class="string">&#x27;application-name&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;NextSeo&#x27;</span></span><br><span class="line">&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的一件事是，它目前仅支持唯一标签，除非您使用 <code>keyOverride</code> 道具提供唯一的 <a href="https://reactjs.org/docs/lists-and-keys.html#keys">key</a> 到每个额外的元标记。</p>
<p>默认行为（没有 <code>keyOverride</code> 属性）是为每个唯一的 <code>name</code> &#x2F; <code>property</code> &#x2F; <code>httpEquiv</code> 渲染一个标签。最后一个定义的将被渲染。</p>
<p>例如，如果您传递 2 个具有相同 <code>property</code> 的标签：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">additionalMetaTags=&#123;[&#123;</span><br><span class="line">  <span class="attr">property</span>: <span class="string">&#x27;dc:creator&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;李四的博客&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">property</span>: <span class="string">&#x27;dc:creator&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p>这将导致被渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;dc:creator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>提供一个额外的 keyOverride 属性，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">additionalMetaTags=&#123;[&#123;</span><br><span class="line">  <span class="attr">property</span>: <span class="string">&#x27;dc:creator&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;李四的博客&#x27;</span>,</span><br><span class="line">  <span class="attr">keyOverride</span>: <span class="string">&#x27;creator1&#x27;</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">property</span>: <span class="string">&#x27;dc:creator&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">keyOverride</span>: <span class="string">&#x27;creator2&#x27;</span>,</span><br><span class="line">&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p>导致呈现正确的 HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;dc:creator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;李四的博客&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;dc:creator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="附加链接标签"><a href="#附加链接标签" class="headerlink" title="附加链接标签"></a>附加链接标签</h4><p>这允许您添加任何其他未包含在 <code>config</code> 中的链接标签。</p>
<p><code>rel</code> 和 <code>href</code> 是必需的。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">additionalLinkTags=&#123;[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>,</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;https://www.test.ie/favicon.ico&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rel</span>: <span class="string">&#x27;apple-touch-icon&#x27;</span>,</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;https://www.test.ie/touch-icon-ipad.jpg&#x27;</span>,</span><br><span class="line">    <span class="attr">sizes</span>: <span class="string">&#x27;76x76&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rel</span>: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;/manifest.json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rel</span>: <span class="string">&#x27;preload&#x27;</span>,</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;https://www.test.ie/font/sample-font.woof2&#x27;</span>,</span><br><span class="line">    <span class="attr">as</span>: <span class="string">&#x27;font&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;font/woff2&#x27;</span>,</span><br><span class="line">    <span class="attr">crossOrigin</span>: <span class="string">&#x27;anonymous&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure>

<p>这将导致被渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.test.ie/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://www.test.ie/touch-icon-ipad.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;76x76&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/manifest.json&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://www.test.ie/font/sample-font.woof2&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">as</span>=<span class="string">&quot;font&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;font/woff2&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="开放图-Open-Graph"><a href="#开放图-Open-Graph" class="headerlink" title="开放图 (Open Graph)"></a>开放图 (Open Graph)</h2><p>有关完整规范，请查看 <a href="http://ogp.me/">http://ogp.me/</a></p>
<p>Next SEO 目前支持：</p>
<ul>
<li><a href="#%E5%9F%BA%E6%9C%AC%E7%9A%84">基本</a></li>
<li><a href="#%E8%A7%86%E9%A2%91">视频</a></li>
<li><a href="#%E6%96%87%E7%AB%A0">文章</a></li>
<li><a href="#%E4%B9%A6">书</a></li>
<li><a href="#%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99">个人资料</a></li>
</ul>
<h3 id="开放图示例"><a href="#开放图示例" class="headerlink" title="开放图示例"></a>开放图示例</h3><h4 id="基本的"><a href="#基本的" class="headerlink" title="基本的"></a>基本的</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">openGraph</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type:</span> &#x27;<span class="attr">website</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">page</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title:</span> &#x27;<span class="attr">Open</span> <span class="attr">Graph</span> <span class="attr">Title</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">description:</span> &#x27;<span class="attr">Open</span> <span class="attr">Graph</span> <span class="attr">Description</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">images:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.ie</span>/<span class="attr">og-image.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> <span class="attr">800</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> <span class="attr">600</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alt:</span> &#x27;<span class="attr">Og</span> <span class="attr">Image</span> <span class="attr">Alt</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.ie</span>/<span class="attr">og-image-2.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> <span class="attr">800</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> <span class="attr">600</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alt:</span> &#x27;<span class="attr">Og</span> <span class="attr">Image</span> <span class="attr">Alt</span> <span class="attr">2</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Basic<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>笔记<br>next.js 版本 <code>7.0.0-canary.0</code> 提供了多个图像<br>对于版本<code>6.0.0</code> - <code>7.0.0-canary.0</code>，你只需要提供一个单项数组：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">images</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.example.ie/og-image-01.jpg&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&#x27;Og Image Alt&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>提供多个图像不会破坏任何东西，但只会将一个图像添加到头部。</p>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>关于 <a href="http://ogp.me/#type_video">http://ogp.me/</a> 的完整信息</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&#x27;Video Page Title&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&#x27;Description of video page&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">openGraph</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title:</span> &#x27;<span class="attr">Open</span> <span class="attr">Graph</span> <span class="attr">Video</span> <span class="attr">Title</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">description:</span> &#x27;<span class="attr">Description</span> <span class="attr">of</span> <span class="attr">open</span> <span class="attr">graph</span> <span class="attr">video</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">videos</span>/<span class="attr">video-title</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type:</span> &#x27;<span class="attr">video.movie</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">video:</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          // <span class="attr">多个开放图动作</span> <span class="attr">actors</span> <span class="attr">仅在下一个版本</span> `<span class="attr">7.0.2-canary.35</span>`+ <span class="attr">中可用</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">actors:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">profile:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">actors</span>/@<span class="attr">firstnameA-lastnameA</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">role:</span> &#x27;<span class="attr">Protagonist</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">profile:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">actors</span>/@<span class="attr">firstnameB-lastnameB</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">role:</span> &#x27;<span class="attr">Antagonist</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          // <span class="attr">多个开放图定位器</span> <span class="attr">directors</span> <span class="attr">仅在下一个版本</span> `<span class="attr">7.0.2-canary.35</span>`+ <span class="attr">中可用</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">directors:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">directors</span>/@<span class="attr">firstnameA-lastnameA</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">directors</span>/@<span class="attr">firstnameB-lastnameB</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          // <span class="attr">多个开放图写入器</span> <span class="attr">writers</span> <span class="attr">仅在下一个版本</span> `<span class="attr">7.0.2-canary.35</span>`+ <span class="attr">中可用</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">writers:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">writers</span>/@<span class="attr">firstnameA-lastnameA</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">writers</span>/@<span class="attr">firstnameB-lastnameB</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">duration:</span> <span class="attr">680000</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">releaseDate:</span> &#x27;<span class="attr">2022-12-21T22:04:11Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          // <span class="attr">多个开放图标签</span> <span class="attr">tags</span> <span class="attr">仅在下一个版本</span> `<span class="attr">7.0.2-canary.35</span>`+ <span class="attr">中可用</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">tags:</span> [&#x27;<span class="attr">Tag</span> <span class="attr">A</span>&#x27;, &#x27;<span class="attr">Tag</span> <span class="attr">B</span>&#x27;, &#x27;<span class="attr">Tag</span> <span class="attr">C</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">siteName:</span> &#x27;<span class="attr">站点名称</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>视频页面 SEO<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>笔记<br>next.js 版本 <code>7.0.0-canary.0</code> 提供了多个图像<br>对于版本<code>6.0.0</code> - <code>7.0.0-canary.0</code>，你只需要提供一个单项数组：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">images</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.example.ie/og-image-01.jpg&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&#x27;Og Image Alt&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>提供多个图像不会破坏任何东西，但只会将一个图像添加到头部。</p>
<h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p>关于 <a href="https://ogp.me/#structured">http://ogp.me/</a> 的完整信息</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&quot;音频页面标题&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;音频页面描述&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">openGraph</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title:</span> &#x27;<span class="attr">开放图音频</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">description:</span> &#x27;<span class="attr">开放图音频的描述</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">audio</span>/<span class="attr">audio</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">audio:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">http:</span>//<span class="attr">examples.opengraphprotocol.us</span>/<span class="attr">media</span>/<span class="attr">audio</span>/<span class="attr">1khz.mp3</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">secureUrl:</span> &#x27;<span class="attr">https:</span>//<span class="attr">d72cgtgi6hvvl.cloudfront.net</span>/<span class="attr">media</span>/<span class="attr">audio</span>/<span class="attr">1khz.mp3</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type:</span> &quot;<span class="attr">audio</span>/<span class="attr">mpeg</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">http:</span>//<span class="attr">examples.opengraphprotocol.us</span>/<span class="attr">media</span>/<span class="attr">audio</span>/<span class="attr">250hz.mp3</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">secureUrl:</span> &#x27;<span class="attr">https:</span>//<span class="attr">d72cgtgi6hvvl.cloudfront.net</span>/<span class="attr">media</span>/<span class="attr">audio</span>/<span class="attr">250hz.mp3</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type:</span> &quot;<span class="attr">audio</span>/<span class="attr">mpeg</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">site_name:</span> &#x27;<span class="attr">网站名称</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>音频页面搜索引擎优化<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">openGraph</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title:</span> &#x27;<span class="attr">开放图文章标题</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">description:</span> &#x27;<span class="attr">开放图文章描述</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">articles</span>/<span class="attr">article-title</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type:</span> &#x27;<span class="attr">article</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">article:</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">publishedTime:</span> &#x27;<span class="attr">2017-06-21T23:04:13Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">modifiedTime:</span> &#x27;<span class="attr">2018-01-21T18:04:43Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">expirationTime:</span> &#x27;<span class="attr">2022-12-21T22:04:11Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">section:</span> &#x27;<span class="attr">第二部分</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">authors:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">authors</span>/@<span class="attr">firstnameA-lastnameA</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">authors</span>/@<span class="attr">firstnameB-lastnameB</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">tags:</span> [&#x27;<span class="attr">Tag</span> <span class="attr">A</span>&#x27;, &#x27;<span class="attr">Tag</span> <span class="attr">B</span>&#x27;, &#x27;<span class="attr">Tag</span> <span class="attr">C</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">images:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.test.ie</span>/<span class="attr">images</span>/<span class="attr">cover.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> <span class="attr">850</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> <span class="attr">650</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alt:</span> &#x27;<span class="attr">文字图片</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>笔记<br>next.js 版本 <code>7.0.0-canary.0</code> 提供了多个图像、作者、标签<br>对于版本<code>6.0.0</code> - <code>7.0.0-canary.0</code>，你只需要提供一个单项数组：</p>
</blockquote>
<p><code>images</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">images</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.example.ie/og-image-01.jpg&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&#x27;Og Image Alt&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p><code>authors</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">authors</span>: [</span><br><span class="line">  <span class="string">&#x27;https://www.example.com/authors/@firstnameA-lastnameA&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p><code>tags</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags</span>: [<span class="string">&#x27;Tag A&#x27;</span>],</span><br></pre></td></tr></table></figure>

<p>提供以上任何一项都不会破坏任何东西，但只会将一个添加到头部。</p>
<h4 id="书"><a href="#书" class="headerlink" title="书"></a>书</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">openGraph</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title:</span> &#x27;<span class="attr">开放图书标题</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">description:</span> &#x27;<span class="attr">开放图书的描述</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">books</span>/<span class="attr">book-title</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type:</span> &#x27;<span class="attr">book</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">book:</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">releaseDate:</span> &#x27;<span class="attr">2018-09-17T11:08:13Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">isbn:</span> &#x27;<span class="attr">978-3-16-148410-0</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">authors:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">authors</span>/@<span class="attr">firstnameA-lastnameA</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">authors</span>/@<span class="attr">firstnameB-lastnameB</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">tags:</span> [&#x27;<span class="attr">标签</span> <span class="attr">A</span>&#x27;, &#x27;<span class="attr">标签</span> <span class="attr">B</span>&#x27;, &#x27;<span class="attr">标签</span> <span class="attr">C</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">images:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.test.ie</span>/<span class="attr">images</span>/<span class="attr">book.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> <span class="attr">850</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> <span class="attr">650</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alt:</span> &#x27;<span class="attr">书的封面</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Book<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>笔记<br>next.js 版本 <code>7.0.0-canary.0</code> 提供了多个图像、作者、标签<br>对于版本<code>6.0.0</code> - <code>7.0.0-canary.0</code>，你只需要提供一个单项数组：</p>
</blockquote>
<p><code>images</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">images</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.example.ie/og-image-01.jpg&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&#x27;Og Image Alt&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p><code>authors</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">authors</span>: [</span><br><span class="line">  <span class="string">&#x27;https://www.example.com/authors/@firstnameA-lastnameA&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p><code>tags</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags</span>: [<span class="string">&#x27;Tag A&#x27;</span>],</span><br></pre></td></tr></table></figure>

<p>提供以上任何一项都不会破坏任何东西，但只会将一个添加到头部。</p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextSeo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NextSeo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">openGraph</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title:</span> &#x27;<span class="attr">开放图个人资料标题</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">description:</span> &#x27;<span class="attr">开放图配置文件的描述</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/@<span class="attr">firstlast123</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type:</span> &#x27;<span class="attr">profile</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">profile:</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">firstName:</span> &#x27;<span class="attr">名</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">lastName:</span> &#x27;<span class="attr">姓</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">username:</span> &#x27;<span class="attr">用户名123</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">gender:</span> &#x27;<span class="attr">女</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">images:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">url:</span> &#x27;<span class="attr">https:</span>//<span class="attr">www.test.ie</span>/<span class="attr">images</span>/<span class="attr">profile.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> <span class="attr">850</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> <span class="attr">650</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alt:</span> &#x27;<span class="attr">个人资料照片</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>笔记<br>next.js 版本 <code>7.0.0-canary.0</code> 提供了多个图像<br>对于版本<code>6.0.0</code> - <code>7.0.0-canary.0</code>，你只需要提供一个单项数组：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">images</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.example.ie/og-image-01.jpg&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&#x27;Og Image Alt&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>提供多个图像不会破坏任何东西，但只会将一个图像添加到头部。</p>
<h2 id="JSON-LD"><a href="#JSON-LD" class="headerlink" title="JSON-LD"></a>JSON-LD</h2><p>Next SEO 现在可以将 JSON-LD 设置为结构化数据的一种形式。结构化数据是一种标准化格式，用于提供有关页面的信息并对页面内容进行分类。</p>
<p>Google 在 JSON-LD 上有很好的内容 -&gt; <a href="https://developers.google.com/search/docs/data-types/article">这里</a></p>
<p><strong>如果使用应用程序目录，请确保添加 <code>useAppDir=&#123;false&#125;</code> 属性并且您正在使用 <code>page.js</code> 中的组件</strong></p>
<p>下面你会发现一个非常基本的页面，实现了每个可用的 JSON-LD 类型：</p>
<ul>
<li><a href="#article-1">文章</a></li>
<li><a href="#breadcrumb">面包屑</a></li>
<li><a href="#blog">博客</a></li>
<li><a href="#recipe">食谱</a></li>
<li><a href="#sitelinks-search-box">附加链接搜索框</a></li>
<li><a href="#course">课程</a></li>
<li><a href="#dataset">数据集</a></li>
<li><a href="#corporate-contact">企业联系方式</a></li>
<li><a href="#faq-page">FAQ 页面</a></li>
<li><a href="#how-to">操作方法</a></li>
<li><a href="#job-posting">职位发布</a></li>
<li><a href="#local-business">本地业务</a></li>
<li><a href="#product">产品</a></li>
<li><a href="#social-profile">社会概况</a></li>
<li><a href="#news-article">新闻报道</a></li>
</ul>
<p>拉取请求非常欢迎添加列表中的任何内容<a href="https://developers.google.com/search/docs/data-types/article">在此处找到</a></p>
<h4 id="JSON-LD-安全性"><a href="#JSON-LD-安全性" class="headerlink" title="JSON-LD 安全性"></a>JSON-LD 安全性</h4><p>只是一个关于安全的快速说明。要将 JSON-LD 放到页面上，它需要位于脚本标记中。<code>next-seo</code> 通过使用带有 <code>dangerouslySetInnerHTML</code> 的脚本标签来实现这一点。</p>
<p>因此，如果将任何内容直接从 URL 传递到以下组件之一，请确保在需要时先对其进行清理。</p>
<p>查看 <code>toJson.tsx</code> 以了解实现细节。</p>
<h4 id="处理多个实例"><a href="#处理多个实例" class="headerlink" title="处理多个实例"></a>处理多个实例</h4><p>如果您的页面需要给定 JSON-LD 组件的多个实例，您可以指定唯一的 <code>keyOverride</code> 属性，而 <code>next-seo</code> 将处理其余部分。</p>
<p>这对于博客滚动、搜索结果和概览页面非常有用。</p>
<p>请充分研究何时应该和不应该添加多个 JSON-LD 实例。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">ExampleJsonLd</span> keyOverride=<span class="string">&#x27;my-new-key&#x27;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>＃＃＃ 文章</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">ArticleJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">文章JsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">useAppDir</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;https://example.com/article&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&quot;文章标题&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">图片</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">datePublished</span>=<span class="string">&quot;2015-02-05T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">dateModified</span>=<span class="string">&quot;2015-02-05T09:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">作者姓名</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">简博客</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">玛丽斯通</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">publisherName</span>=<span class="string">&quot;加里·米汉&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">publisherLogo</span>=<span class="string">&quot;https://www.example.com/photos/logo.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;这是对这篇文章的非常好的描述。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">isAccessibleForFree</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<h3 id="面包屑"><a href="#面包屑" class="headerlink" title="面包屑"></a>面包屑</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">BreadcrumbJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>面包屑 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BreadcrumbJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">itemListElements</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">位置</span>：<span class="attr">1</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">书籍</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">项目</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">books</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">位置</span>：<span class="attr">2</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">作者</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">项目</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">books</span>/<span class="attr">authors</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">位置</span>：<span class="attr">3</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">安莱基</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">项目</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">books</span>/<span class="attr">authors</span>/<span class="attr">annleckie</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">位置</span>：<span class="attr">4</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">辅助司法</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">项目</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">books</span>/<span class="attr">authors</span>/<span class="attr">ancillaryjustice</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>itemListElements</code></td>
<td></td>
</tr>
<tr>
<td><code>itemListElements.position</code></td>
<td>面包屑在面包屑轨迹中的位置。位置 1 表示路径的起点。</td>
</tr>
<tr>
<td><code>itemListElements.name</code></td>
<td>为用户显示的面包屑标题。</td>
</tr>
<tr>
<td><code>itemListElements.item</code></td>
<td>表示面包屑的网页的 URL。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>＃＃＃ 博客</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">ArticleJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>博客 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">文章JsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">类型</span> =<span class="string">“博客发布”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;https://example.com/blog&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&quot;博客标题&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">图片</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">datePublished</span>=<span class="string">&quot;2015-02-05T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">dateModified</span>=<span class="string">&quot;2015-02-05T09:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">authorName</span>=<span class="string">&quot;简博客&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;这是对该博客的非常好的描述。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p>＃＃＃ 食谱</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">RecipeJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>配方 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">RecipeJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;派对咖啡蛋糕&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;这个咖啡蛋糕棒极了，非常适合聚会。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">datePublished</span>=<span class="string">&quot;2018-03-10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">authorName</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">Jane</span> <span class="attr">Blogs</span>&#x27;, &#x27;<span class="attr">Mary</span> <span class="attr">Stone</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">准备时间</span>=<span class="string">“PT20M”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">cookTime</span>=<span class="string">&quot;PT30M&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">totalTime</span>=<span class="string">&quot;PT50M&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">关键字</span>=<span class="string">“派对蛋糕，咖啡”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">产量</span>=<span class="string">“10”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">类别</span>=<span class="string">“甜点”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">美食</span>=<span class="string">“美国”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">卡路里</span>=<span class="string">&#123;270&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">图片</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">成分</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">2</span> <span class="attr">杯面粉</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">3</span>/<span class="attr">4</span> <span class="attr">杯白糖</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">2茶匙发酵粉</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">1</span>/<span class="attr">2</span> <span class="attr">茶匙盐</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">1</span>/<span class="attr">2</span> <span class="attr">杯黄油</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">2个蛋</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">3</span>/<span class="attr">4</span> <span class="attr">杯牛奶</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">说明</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">预热</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">text:</span> &#x27;<span class="attr">将烤箱预热到</span> <span class="attr">350</span> <span class="attr">华氏度</span>。<span class="attr">在</span> <span class="attr">9x9</span> <span class="attr">英寸的平底锅上涂上油脂和面粉</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step1</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step1.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">聚合评分</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">评级值</span>：&#x27;<span class="attr">5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">评级计数</span>：&#x27;<span class="attr">18</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">视频</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">名称</span>：&#x27;<span class="attr">如何制作派对咖啡蛋糕</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">description:</span> &#x27;<span class="attr">这就是你制作派对咖啡蛋糕的方式</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">contentUrl:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">video123.mp4</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">embedUrl:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">videoplayer</span>?<span class="attr">video</span>=<span class="string">123</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">上传日期</span>：&#x27;<span class="attr">2018-02-05T08:00:00</span>+<span class="attr">08:00</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">持续时间</span>：&#x27;<span class="attr">PT1M33S</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">缩略图网址</span>：[</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">过期</span>：&#x27;<span class="attr">2019-02-05T08:00:00</span>+<span class="attr">08:00</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">有部分</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#x27;@<span class="attr">type</span>&#x27;<span class="attr">:</span> &#x27;<span class="attr">剪辑</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name:</span> &#x27;<span class="attr">预热烤箱</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">开始偏移量</span>：<span class="attr">30</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">example</span>?<span class="attr">t</span>=<span class="string">30</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">观看次数</span>：<span class="attr">2347</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">出版物</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#x27;@<span class="attr">type</span>&#x27;<span class="attr">:</span> &#x27;<span class="attr">广播事件</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">isLiveBroadcast</span>：<span class="attr">真</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">开始日期</span>：&#x27;<span class="attr">2020-10-24T14:00:00</span>+<span class="attr">00:00</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">结束日期</span>：&#x27;<span class="attr">2020-10-24T14:37:14</span>+<span class="attr">00:00</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">允许的区域</span>：[&#x27;<span class="attr">IT</span>&#x27;, &#x27;<span class="attr">NL</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>食谱名称</td>
</tr>
<tr>
<td><code>描述</code></td>
<td>食谱说明</td>
</tr>
<tr>
<td><code>作者名</code></td>
<td>食谱作者的姓名。可以是字符串或字符串数 ​​ 组。</td>
</tr>
<tr>
<td><code>成分</code></td>
<td>成分字符串列表</td>
</tr>
<tr>
<td><code>说明</code></td>
<td>-</td>
</tr>
<tr>
<td><code>instructions.name</code></td>
<td>指令步骤的名称。</td>
</tr>
<tr>
<td><code>instructions.text</code></td>
<td>说明步骤的方向。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<h3 id="附加链接搜索框"><a href="#附加链接搜索框" class="headerlink" title="附加链接搜索框"></a>附加链接搜索框</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">SiteLinksSearchBoxJsonLd</span>&#125;;</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>附加链接搜索框 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">SiteLinksSearchBoxJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;https://www.example.com&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">potentialActions</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">目标</span>：&#x27;<span class="attr">https:</span>//<span class="attr">query.example.com</span>/<span class="attr">search</span>?<span class="attr">q</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">queryInput:</span> &#x27;<span class="attr">search_term_string</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">目标</span>：&#x27;<span class="attr">android-app:</span>//<span class="attr">com.example</span>/<span class="attr">https</span>/<span class="attr">query.example.com</span>/<span class="attr">search</span>/?<span class="attr">q</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">queryInput:</span> &#x27;<span class="attr">search_term_string</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>网址</code></td>
<td>与站点链接搜索框关联的网站的 URL</td>
</tr>
<tr>
<td><code>potentialActions</code></td>
<td>一个或两个 SearchAction 对象的数组。描述将查询发送到的 URI，以及发送的请求的语法</td>
</tr>
<tr>
<td><code>potentialActions.target</code></td>
<td>对于网站，应接收和处理搜索查询的处理程序的 URL；对于应用程序，应该处理查询的搜索引擎的意图处理程序的 URI</td>
</tr>
<tr>
<td><code>potentialActions.queryInput</code></td>
<td>目标中使用的占位符被替换为用户给定的查询</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>阅读<a href="https://developers.google.com/search/docs/appearance/structured-data/sitelinks-searchbox">文档</a></p>
<p>＃＃＃ 课程</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">CourseJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>课程 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CourseJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">courseName</span>=<span class="string">&quot;课程名称&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;CS 入门课程介绍了基础知识。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">供应商</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">名称</span>：&#x27;<span class="attr">课程提供者</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">网址</span>：&#x27;<span class="attr">https</span>//<span class="attr">www.example.com</span>/<span class="attr">provider</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>课程名称</code></td>
<td>课程的标题。</td>
</tr>
<tr>
<td><code>描述</code></td>
<td>课程描述。显示限制为 60 个字符。</td>
</tr>
<tr>
<td><code>provider.name</code></td>
<td>课程提供者名称。</td>
</tr>
<tr>
<td><code>provider.url</code></td>
<td>课程提供者名称 url。</td>
</tr>
</tbody></table>
<p><strong>推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>providerUrl</code></td>
<td>课程提供者的网址。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">DatasetJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据集 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">数据集JsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;描述至少需要50个字符&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;数据集名称&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">license</span>=<span class="string">&quot;https//www.example.com&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>描述</code></td>
<td>描述数据集的简短摘要。需要介于 50 到 5000 个字符之间。</td>
</tr>
<tr>
<td><code>名字</code></td>
<td>分发数据集所依据的许可证。</td>
</tr>
</tbody></table>
<p><strong>推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>许可证</code></td>
<td>课程提供者的网址。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<h3 id="公司联系方式"><a href="#公司联系方式" class="headerlink" title="公司联系方式"></a>公司联系方式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">CorporateContactJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>公司联系人 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CorporateContactJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;http://www.your-company-site.com&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">logo</span>=<span class="string">&quot;http://www.example.com/logo.png&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">接触点</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电话</span>：&#x27;+<span class="attr">1-401-555-1212</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactType:</span> &#x27;<span class="attr">客户服务</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电子邮件</span>：&#x27;<span class="attr">customerservice</span>@<span class="attr">email.com</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">areaServed:</span> &#x27;<span class="attr">美国</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">availableLanguage:</span> [&#x27;<span class="attr">英语</span>&#x27;, &#x27;<span class="attr">西班牙语</span>&#x27;, &#x27;<span class="attr">法语</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电话</span>：&#x27;+<span class="attr">1-877-746-0909</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactType:</span> &#x27;<span class="attr">客户服务</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电子邮件</span>：&#x27;<span class="attr">servicecustomer</span>@<span class="attr">email.com</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactOption:</span> &#x27;<span class="attr">TollFree</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">availableLanguage:</span> &#x27;<span class="attr">英语</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电话</span>：&#x27;+<span class="attr">1-877-453-1304</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactType:</span> &#x27;<span class="attr">技术支持</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactOption:</span> &#x27;<span class="attr">TollFree</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">areaServed:</span> [&#x27;<span class="attr">美国</span>&#x27;, &#x27;<span class="attr">CA</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">availableLanguage:</span> [&#x27;<span class="attr">英语</span>&#x27;, &#x27;<span class="attr">法语</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>网址</code></td>
<td>公司官方网站主页的 URL。</td>
</tr>
<tr>
<td><code>接触点</code></td>
<td></td>
</tr>
<tr>
<td><code>contactPoint.telephone</code></td>
<td>电话号码的国际化版本，以“+”符号和国家代码开头</td>
</tr>
<tr>
<td><code>contactPoint.contactType</code></td>
<td>电话号码用途的描述，即“技术支持”。</td>
</tr>
</tbody></table>
<p><strong>推荐的 ContactPoint 属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>contactPoint.areaServed</code></td>
<td>业务服务的地理区域的“字符串”或“数组”。示例 <code>&quot;US&quot;</code> 或 <code>[&quot;US&quot;, &quot;CA&quot;, &quot;MX&quot;]</code></td>
</tr>
<tr>
<td><code>contactPoint.availableLanguage</code></td>
<td>有关所用语言的详细信息。示例 <code>&quot;English&quot;</code> 或 <code>[&quot;English&quot;, &quot;French&quot;]</code></td>
</tr>
<tr>
<td><code>contactPoint.email</code></td>
<td>与业务相关的电子邮件&#96;</td>
</tr>
<tr>
<td><code>gecontactPointo.contactOption</code></td>
<td>有关电话号码的详细信息。示例<code>&quot;TollFree&quot;</code></td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<h3 id="常见问题页面"><a href="#常见问题页面" class="headerlink" title="常见问题页面"></a>常见问题页面</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">FAQPageJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>FAQ 页面 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">FAQPageJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">主要实体</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">questionName:</span> &#x27;<span class="attr">交货时间是多久</span>？&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">acceptedAnswerText:</span> &#x27;<span class="attr">3-5</span> <span class="attr">个工作日</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">questionName:</span> &#x27;<span class="attr">我在哪里可以找到有关产品召回的信息</span>？&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">acceptedAnswerText:</span> &#x27;<span class="attr">阅读更多信息</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>mainEntity</code></td>
<td></td>
</tr>
<tr>
<td><code>mainEntity.questionName</code></td>
<td>问题的全文。例如，“交货时间是多长时间？”。</td>
</tr>
<tr>
<td><code>mainEntity.acceptedAnswerText</code></td>
<td>问题的完整答案。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>＃＃＃ 如何</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">HowToJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>如何使用 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">HowToJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;如何铺瓷砖厨房后挡板&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">image</span>=<span class="string">&quot;https://example.com/photos/1x1/photo.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">estimatedCost</span>=<span class="string">&#123;&#123;</span> <span class="attr">currency:</span> &#x27;<span class="attr">USD</span>&#x27;, <span class="attr">value:</span> &#x27;<span class="attr">100</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">supply</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">tiles</span>&#x27;, &#x27;<span class="attr">thin-set</span>&#x27;, &#x27;<span class="attr">mortar</span>&#x27;, &#x27;<span class="attr">tile</span> <span class="attr">grout</span>&#x27;, &#x27;<span class="attr">grout</span> <span class="attr">sealer</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">tool</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">缺口镘刀</span>&#x27;, &#x27;<span class="attr">桶</span>&#x27;, &#x27;<span class="attr">大海绵</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">步骤</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">kitchen</span>#<span class="attr">step1</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name:</span> &#x27;<span class="attr">准备表面</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">项目列表元素</span>：[</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">类型</span>：&#x27;<span class="attr">HowToTip</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">关闭厨房的电源</span>，<span class="attr">然后移除墙上的所有东西</span>，<span class="attr">例如插座盖</span>、<span class="attr">开关板和该区域中要铺瓷砖的任何其他物品</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">类型</span>：&#x27;<span class="attr">HowToDirection</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">然后彻底清洁表面</span>，<span class="attr">去除任何油脂或其他碎屑</span>，<span class="attr">并用胶带封住该区域</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo-step1.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">totalTime</span>=<span class="string">&quot;P2D&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>方法名称</td>
</tr>
<tr>
<td><code>步骤</code></td>
<td>一组 HowToStep 元素，其中包含操作方法的完整说明。</td>
</tr>
</tbody></table>
<p><strong>支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>估计成本</code></td>
<td>执行指令时耗材的估计成本。</td>
</tr>
<tr>
<td><code>图像</code></td>
<td>已完成操作方法的图片。</td>
</tr>
<tr>
<td><code>供应</code></td>
<td>执行指令或指示时消耗的供给。</td>
</tr>
<tr>
<td><code>工具</code></td>
<td>在执行指令或指示时使用（但不消耗）的对象。</td>
</tr>
<tr>
<td><code>总时间</code></td>
<td>执行所有说明或指示所需的总时间（包括准备用品的时间），采用 ISO 8601 持续时间格式。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>＃＃＃ 招聘启事</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">JobPostingJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>职位发布 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">JobPostingJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">datePosted</span>=<span class="string">&quot;2020-01-06T03:37:40Z&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;公司正在寻找软件开发人员......&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">招聘组织</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name:</span> &#x27;<span class="attr">公司名称</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">sameAs:</span> &#x27;<span class="attr">www.company-website-url.dev</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">工作地点</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">streetAddress:</span> &#x27;<span class="attr">17</span> <span class="attr">街道地址</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">addressLocality:</span> &#x27;<span class="attr">巴黎</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">addressRegion:</span> &#x27;<span class="attr">Ile-de-France</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">邮政编码</span>：&#x27;<span class="attr">75001</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">地址国家</span>：&#x27;<span class="attr">法国</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&quot;职务&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">基本工资</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">货币</span>：“<span class="attr">欧元</span>”，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value:</span> <span class="attr">40</span>, // <span class="attr">也可以是薪水区间</span>，<span class="attr">比如</span> [<span class="attr">40</span>, <span class="attr">50</span>]</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">unitText:</span> &#x27;<span class="attr">HOUR</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">employmentType</span>=<span class="string">&quot;FULL_TIME&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">jobLocationType</span>=<span class="string">&quot;远程办公&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">validThrough</span>=<span class="string">&quot;2020-01-06&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">applicantLocationRequirements</span>=<span class="string">&quot;FR&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">经验要求</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">职业</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">minimumMonthsOfExperience:</span> <span class="attr">12</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">教育</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">credentialCategory:</span> &#x27;<span class="attr">高中</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">experienceInPlaceOfEducation</span>：<span class="attr">真实</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>发布日期</code></td>
<td>雇主以 ISO 8601 格式发布职位的原始日期</td>
</tr>
<tr>
<td><code>描述</code></td>
<td>HTML 格式的职位完整描述</td>
</tr>
<tr>
<td><code>hiringOrganization</code></td>
<td>包含有关公司招聘信息的对象，在匿名招聘时具有以下字段或字符串“机密”</td>
</tr>
<tr>
<td><code>hiringOrganization.name</code></td>
<td>提供职位的公司名称</td>
</tr>
<tr>
<td><code>hiringOrganization.sameAs</code></td>
<td>参考网页的 URL</td>
</tr>
<tr>
<td><code>标题</code></td>
<td>职位名称（不是职位名称）</td>
</tr>
<tr>
<td><code>有效通过</code></td>
<td>职位发布的到期日期 <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601 格式</a></td>
</tr>
</tbody></table>
<p><strong>支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>applicantLocationRequirements</code></td>
<td>员工可能有资格从事远程工作的地理位置</td>
</tr>
<tr>
<td><code>基薪</code></td>
<td></td>
</tr>
<tr>
<td><code>baseSalary.currency</code></td>
<td>表示货币金额的货币</td>
</tr>
<tr>
<td><code>baseSalary.value</code></td>
<td>量化价值的价值。您还可以提供一组最低和最高工资。.</td>
</tr>
<tr>
<td><code>baseSalary.unitText</code></td>
<td>指示测量单位的字符串 <a href="https://developers.google.com/search/docs/data-types/job-posting#basesalary">基本工资指南</a></td>
</tr>
<tr>
<td><code>就业类型</code></td>
<td>就业类型 <a href="https://developers.google.com/search/docs/data-types/job-posting#basesalary">就业类型指南</a></td>
</tr>
<tr>
<td><code>工作地点</code></td>
<td>员工将上班的公司的实际位置（例如办公室或工作场所），而不是职位发布的位置。</td>
</tr>
<tr>
<td><code>jobLocation.streetAddress</code></td>
<td>街道地址。例如，1600 Amphitheatre Pkwy</td>
</tr>
<tr>
<td><code>jobLocation.addressLocality</code></td>
<td>当地。例如，山景城。</td>
</tr>
<tr>
<td><code>jobLocation.addressRegion</code></td>
<td>该区域。例如，CA。</td>
</tr>
<tr>
<td><code>jobLocation.postalCode</code></td>
<td>邮政编码。例如，94043</td>
</tr>
<tr>
<td><code>jobLocation.addressCountry</code></td>
<td>国家。例如，美国。您还可以提供两个字母的 ISO 3166-1 alpha-2 国家&#x2F;地区代码。</td>
</tr>
<tr>
<td><code>jobLocationType</code></td>
<td>工作地点的描述 <a href="https://developers.google.com/search/docs/data-types/job-posting#job-location-type">工作地点类型指南</a></td>
</tr>
<tr>
<td><code>hiringOrganization.logo</code></td>
<td>第三方招聘网站上的徽标 <a href="https://developers.google.com/search/docs/data-types/job-posting#hiring">招聘组织指南</a></td>
</tr>
<tr>
<td><code>experienceRequirements.occupational.minimumMonthsOfExperience</code></td>
<td>职位发布所需的最少经验月数。<a href="https://developers.google.com/search/docs/appearance/structured-data/job-posting#education-and-experience-properties-beta">经验和教育要求</a></td>
</tr>
<tr>
<td><code>experienceRequirements.educational.credentialCategory</code></td>
<td>职位发布所需的教育水平。使用以下其中一项：<code>高中</code>、<code>大专学历</code>、<code>学士学位</code>、<code>专业证书</code>、<code>研究生学历</code></td>
</tr>
<tr>
<td><code>experienceRequirements.experienceInPlaceOfEducation</code></td>
<td>布尔值：如果设置为 true，此属性表示职位发布是否接受经验代替其正规教育资格。如果设置为 true，则必须同时包含 experienceRequirements 和 educationRequirements 属性。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>＃＃＃ 当地的商业</p>
<p>本地业务由一组属性支持。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">LocalBusinessJsonLd</span></span><br><span class="line">  类型=“商店”</span><br><span class="line">  id=<span class="string">&quot;http://davesdeptstore.example.com&quot;</span></span><br><span class="line">  name=<span class="string">&quot;戴夫的百货公司&quot;</span></span><br><span class="line">  description=<span class="string">&quot;戴夫在圣何塞的最新百货商店，现已开业&quot;</span></span><br><span class="line">  url=<span class="string">&quot;http://www.example.com/store-locator/sl/San-Jose-Westgate-Store/1427&quot;</span></span><br><span class="line">  电话=“+<span class="number">14088717984</span>”</span><br><span class="line">  地址=&#123;&#123;</span><br><span class="line">    街道地址：<span class="string">&#x27;1600 Saratoga Ave&#x27;</span>，</span><br><span class="line">    <span class="attr">addressLocality</span>: <span class="string">&#x27;圣何塞&#x27;</span>,</span><br><span class="line">    地址区域：<span class="string">&#x27;CA&#x27;</span>，</span><br><span class="line">    邮政编码：<span class="string">&#x27;95129&#x27;</span>，</span><br><span class="line">    地址国家：<span class="string">&#x27;美国&#x27;</span>，</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  地理=&#123;&#123;</span><br><span class="line">    纬度：<span class="string">&#x27;37.293058&#x27;</span>，</span><br><span class="line">    经度：<span class="string">&#x27;-121.988331&#x27;</span>，</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  图片=&#123;[</span><br><span class="line">    <span class="string">&#x27;https://example.com/photos/1x1/photo.jpg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://example.com/photos/4x3/photo.jpg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://example.com/photos/16x9/photo.jpg&#x27;</span>,</span><br><span class="line">  ]&#125;</span><br><span class="line">  同为=&#123;[</span><br><span class="line">    <span class="string">&#x27;www.company-website-url1.dev&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;www.company-website-url2.dev&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;www.company-website-url3.dev&#x27;</span>,</span><br><span class="line">  ]&#125;</span><br><span class="line">  营业时间=&#123;[</span><br><span class="line">    &#123;</span><br><span class="line">      打开：<span class="string">&#x27;08:00&#x27;</span>，</span><br><span class="line">      关闭：<span class="string">&#x27;23:59&#x27;</span>，</span><br><span class="line">      星期几：[</span><br><span class="line">        <span class="string">&#x27;周一&#x27;</span>，</span><br><span class="line">        <span class="string">&#x27;周二&#x27;</span>，</span><br><span class="line">        <span class="string">&#x27;周三&#x27;</span>，</span><br><span class="line">        <span class="string">&#x27;周四&#x27;</span>，</span><br><span class="line">        <span class="string">&#x27;星期五&#x27;</span>，</span><br><span class="line">        <span class="string">&#x27;周六&#x27;</span>，</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">validFrom</span>: <span class="string">&#x27;2019-12-23&#x27;</span>,</span><br><span class="line">      有效时间：<span class="string">&#x27;2020-04-02&#x27;</span>，</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      打开：<span class="string">&#x27;14:00&#x27;</span>，</span><br><span class="line">      关闭：<span class="string">&#x27;20:00&#x27;</span>，</span><br><span class="line">      <span class="attr">dayOfWeek</span>: <span class="string">&#x27;星期日&#x27;</span>,</span><br><span class="line">      <span class="attr">validFrom</span>: <span class="string">&#x27;2019-12-23&#x27;</span>,</span><br><span class="line">      有效时间：<span class="string">&#x27;2020-04-02&#x27;</span>，</span><br><span class="line">    &#125;,</span><br><span class="line">  ]&#125;</span><br><span class="line">  评分=&#123;&#123;</span><br><span class="line">    评级值：<span class="string">&#x27;4.5&#x27;</span>，</span><br><span class="line">    评级计数：<span class="string">&#x27;2&#x27;</span>，</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  评论=&#123;[</span><br><span class="line">    &#123;</span><br><span class="line">      作者：<span class="string">&#x27;John Doe&#x27;</span>，</span><br><span class="line">      发布日期：<span class="string">&#x27;2006-05-04&#x27;</span>，</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;文学杰作&#x27;</span>,</span><br><span class="line">      评论正文：</span><br><span class="line">        <span class="string">&#x27;我真的很喜欢这本书。它抓住了人们在尝试理解自己的生活和成长为成年人时所面临的基本挑战。&#x27;</span>,</span><br><span class="line">      评论评分：&#123;</span><br><span class="line">        最佳评级：<span class="string">&#x27;5&#x27;</span>，</span><br><span class="line">        <span class="attr">worstRating</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="attr">reviewAspect</span>: <span class="string">&#x27;氛围&#x27;</span>,</span><br><span class="line">        评级值：<span class="string">&#x27;4&#x27;</span>，</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      作者：<span class="string">&#x27;鲍勃史密斯&#x27;</span>，</span><br><span class="line">      发布日期：<span class="string">&#x27;2006-06-15&#x27;</span>，</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;一本好书。&#x27;</span>,</span><br><span class="line">      <span class="attr">reviewBody</span>: <span class="string">&quot;麦田里的守望者是一本有趣的书。这是一本很好读的书。&quot;</span>,</span><br><span class="line">      评论评分：&#123;</span><br><span class="line">        评级值：<span class="string">&#x27;4&#x27;</span>，</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]&#125;</span><br><span class="line">  makeOffer=&#123;[</span><br><span class="line">    &#123;</span><br><span class="line">      价格规格：&#123;</span><br><span class="line">        类型：“单价规格”，</span><br><span class="line">        价格货币：“欧元”，</span><br><span class="line">        价格：<span class="string">&#x27;1000-10000&#x27;</span>，</span><br><span class="line">      &#125;,</span><br><span class="line">      itemOffered：&#123;</span><br><span class="line">        名称：<span class="string">&#x27;运动设计服务&#x27;</span>，</span><br><span class="line">        描述：</span><br><span class="line">          <span class="string">&#x27;我们是动画和动作设计制作的专家。&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      价格规格：&#123;</span><br><span class="line">        类型：“单价规格”，</span><br><span class="line">        价格货币：“欧元”，</span><br><span class="line">        价格：<span class="string">&#x27;2000-10000&#x27;</span>，</span><br><span class="line">      &#125;,</span><br><span class="line">      itemOffered：&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;品牌服务&#x27;</span>,</span><br><span class="line">        描述：</span><br><span class="line">          “在展示业务内容时，真实镜头是一个强大的工具。可用于展示您的公司、展示您的工厂、宣传产品包装照片或只是讲述任何故事。它可以通过显示有冲击力的图像帮助与观众建立情感联系。<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  ]&#125;</span></span><br><span class="line"><span class="string">  服务区域=&#123;[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      地理中点：&#123;</span></span><br><span class="line"><span class="string">        纬度：&#x27;</span><span class="number">41.108237</span><span class="string">&#x27;，</span></span><br><span class="line"><span class="string">        经度：&#x27;</span>-<span class="number">80.642982</span><span class="string">&#x27;，</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      地理半径：&#x27;</span><span class="number">1000</span><span class="string">&#x27;，</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      地理中点：&#123;</span></span><br><span class="line"><span class="string">        纬度：&#x27;</span><span class="number">51.108237</span><span class="string">&#x27;，</span></span><br><span class="line"><span class="string">        经度：&#x27;</span>-<span class="number">80.642982</span><span class="string">&#x27;，</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      地理半径：&#x27;</span><span class="number">1000</span><span class="string">&#x27;，</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  ]&#125;</span></span><br><span class="line"><span class="string">  动作=&#123;&#123;</span></span><br><span class="line"><span class="string">    actionName: &#x27;</span>potentialAction<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    actionType: &#x27;</span><span class="title class_">ReviewAction</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    目标：&#x27;</span><span class="attr">https</span>:<span class="comment">//www.example.com/review/this/business&#x27;，</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>@id</code></td>
<td>以 URL 形式表示的特定营业地点的全球唯一 ID。</td>
</tr>
<tr>
<td><code>类型</code></td>
<td>LocalBusiness 或任何子类型</td>
</tr>
<tr>
<td><code>地址</code></td>
<td>具体营业地点地址</td>
</tr>
<tr>
<td><code>地址.地址国家</code></td>
<td>2 个字母的 ISO 3166-1 alpha-2 国家&#x2F;地区代码</td>
</tr>
<tr>
<td><code>address.addressLocality</code></td>
<td>城市</td>
</tr>
<tr>
<td><code>地址.地址区域</code></td>
<td>州或省，如果适用。</td>
</tr>
<tr>
<td><code>address.postalCode</code></td>
<td>邮政编码。</td>
</tr>
<tr>
<td><code>address.streetAddress</code></td>
<td>街道编号、街道名称和单元编号。</td>
</tr>
<tr>
<td><code>名字</code></td>
<td>企业名称。</td>
</tr>
</tbody></table>
<p><strong>支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>描述</code></td>
<td>营业地点说明</td>
</tr>
<tr>
<td><code>地理</code></td>
<td>企业的地理坐标。</td>
</tr>
<tr>
<td><code>地理纬度</code></td>
<td>营业地点纬度</td>
</tr>
<tr>
<td><code>地理经度</code></td>
<td>营业地点经度</td>
</tr>
<tr>
<td><code>评分</code></td>
<td>根据多项评分或评论对商家的平均评分。</td>
</tr>
<tr>
<td><code>rating.ratingValue</code></td>
<td>内容的评级。</td>
</tr>
<tr>
<td><code>rating.ratingCount</code></td>
<td>评分总数的计数。</td>
</tr>
<tr>
<td><code>价格范围</code></td>
<td>业务的相对价格范围。</td>
</tr>
<tr>
<td><code>servesCuisine</code></td>
<td>餐厅供应的菜肴类型。</td>
</tr>
<tr>
<td><code>图像</code></td>
<td>一张或多张企业图片。有效标记所必需，具体取决于类型</td>
</tr>
<tr>
<td><code>电话</code></td>
<td>商务电话号码是客户的主要联系方式。</td>
</tr>
<tr>
<td><code>网址</code></td>
<td>特定营业地点的完全限定 URL。</td>
</tr>
<tr>
<td><code>相同</code></td>
<td>表示此业务的一组 URL</td>
</tr>
<tr>
<td><code>营业时间</code></td>
<td>营业时间规范。您可以将其作为单个对象或具有以下属性的对象数组提供。</td>
</tr>
<tr>
<td><code>openingHours.opens</code></td>
<td>该地点或服务在一周中指定日期的营业时间。</td>
</tr>
<tr>
<td><code>openingHours.closes</code></td>
<td>该地点或服务在一周中指定日期的关闭时间。</td>
</tr>
<tr>
<td><code>openingHours.dayOfWeek</code></td>
<td>这些开放时间在一周中的哪一天有效。可以是字符串或字符串数 ​​ 组。参考<a href="https://schema.org/DayOfWeek">DayOfWeek</a></td>
</tr>
<tr>
<td><code>openingHours.validFrom</code></td>
<td>项目生效的日期。</td>
</tr>
<tr>
<td><code>openingHours.validThrough</code></td>
<td>项目无效后的日期。</td>
</tr>
<tr>
<td><code>审查</code></td>
<td>对本地业务的审查。</td>
</tr>
<tr>
<td><code>review.author</code></td>
<td>此内容或评级的作者。</td>
</tr>
<tr>
<td><code>review.reviewBody</code></td>
<td>评论的实际正文。</td>
</tr>
<tr>
<td><code>review.datePublished</code></td>
<td>首次广播&#x2F;出版日期。</td>
</tr>
<tr>
<td><code>review.name</code></td>
<td>项目的名称。</td>
</tr>
<tr>
<td><code>review.rating</code></td>
<td>此评论中给出的评级</td>
</tr>
<tr>
<td><code>review.rating.ratingValue</code></td>
<td>内容的评级。</td>
</tr>
<tr>
<td><code>review.rating.reviewAspect</code></td>
<td>此评论或评级与已评论项目的此部分或方面相关。</td>
</tr>
<tr>
<td><code>review.rating.worstRating</code></td>
<td>此评级系统允许的最低值。如果 worstRating 被省略，则假定为 1。</td>
</tr>
<tr>
<td><code>review.rating.bestRating</code></td>
<td>此评级系统中允许的最高值。如果省略 bestRating，则假定为 5</td>
</tr>
<tr>
<td><code>areasServed</code></td>
<td>提供服务或提供的项目的地理区域。</td>
</tr>
<tr>
<td><code>areasServed.GeoCircle</code></td>
<td>GeoCircle 是表示圆形地理区域的 GeoShape。</td>
</tr>
<tr>
<td><code>areasServed.GeoCircle.geoMidpoint</code></td>
<td>指示 GeoShape（例如 GeoCircle）中心的地理坐标。</td>
</tr>
<tr>
<td><code>areasServed.GeoCircle.geoMidpoint.latitude</code></td>
<td>位置的纬度。例如 37.42242</td>
</tr>
<tr>
<td><code>areasServed.GeoCircle.geoMidpoint.longitude</code></td>
<td>项目的名称。</td>
</tr>
<tr>
<td><code>areasServed.GeoCircle.geoRadius</code></td>
<td>指示 GeoCircle 的近似半径（米，除非通过距离符号另有说明）。</td>
</tr>
<tr>
<td><code>makesOffer</code></td>
<td>指向组织或个人提供的产品或服务的指针。</td>
</tr>
<tr>
<td><code>makesOffer.offer</code></td>
<td>转让某项权利或提供服务的要约</td>
</tr>
<tr>
<td><code>makesOffer.offer.priceSpecification</code></td>
<td>一项或多项详细的价格规格，注明单价和送货或付款费用。</td>
</tr>
<tr>
<td><code>makesOffer.offer.priceSpecification.priceCurrency</code></td>
<td>价格的货币，或附加到 PriceSpecification 及其子类型时的价格组件。</td>
</tr>
<tr>
<td><code>makesOffer.offer.priceSpecification.price</code></td>
<td>当附加到 PriceSpecification 及其子类型时，产品或价格组件的报价。</td>
</tr>
<tr>
<td><code>makesOffer.offer.itemOffered</code></td>
<td>提供（或要求）的项目</td>
</tr>
<tr>
<td><code>makesOffer.offer.itemOffered.name</code></td>
<td>物品名称</td>
</tr>
<tr>
<td><code>makesOffer.offer.itemOffered.description</code></td>
<td>项目的描述。</td>
</tr>
<tr>
<td><code>动作</code></td>
<td>由直接代理人和间接参与者对直接对象执行的动作。</td>
</tr>
<tr>
<td><code>action.target</code></td>
<td>指示 Action 的目标 EntryPoint。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p><strong>笔记：</strong></p>
<p>对于大多数可用于“LocalBusiness”的类型，建议使用图片，如果有疑问，您应该添加图片。您可以在 Google 的 <a href="https://search.google.com/structured-data/testing-tool">结构化数据测试工具</a> 中检查生成的 JSON</p>
<p>＃＃＃ 标识</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">LogoJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>徽标 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">LogoJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">logo</span>=<span class="string">&quot;http://www.your-site.com/images/logo.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;http://www.your-site.com&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>网址</code></td>
<td>与徽标关联的网站的 URL。<a href="https://developers.google.com/search/docs/data-types/logo#definitions">徽标指南</a></td>
</tr>
<tr>
<td><code>标志</code></td>
<td>代表组织的徽标的 URL。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>＃＃＃ 产品</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">ProductJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>产品 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ProductJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">productName</span>=<span class="string">&quot;执行铁砧&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">图片</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;比 ACME 的 Classic Anvil 更时尚，Executive Anvil 非常适合寻找从高处坠落的东西的商务旅客。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">品牌</span>=<span class="string">“顶点”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">颜色</span>=<span class="string">“蓝色”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">制造商名称</span>=<span class="string">&quot;加里米汉&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">manufacturerLogo</span>=<span class="string">&quot;https://www.example.com/photos/logo.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">材料</span>=<span class="string">“钢”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">slogan</span>=<span class="string">&quot;对于寻找从高处坠落的东西的商务旅行者。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">disambiguatingDescription</span>=<span class="string">&quot;Executive Anvil，非常适合商务旅客。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">releaseDate</span>=<span class="string">&quot;2014-02-05T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">productionDate</span>=<span class="string">&quot;2015-02-05T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">purchaseDate</span>=<span class="string">&quot;2015-02-06T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">award</span>=<span class="string">&quot;最佳执行铁砧奖。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">评论</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">作者</span>：&#x27;<span class="attr">吉姆</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">发布日期</span>：&#x27;<span class="attr">2017-01-06T03:37:40Z</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">评论正文</span>：</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">这是我最喜欢的产品</span>！<span class="attr">感谢</span> <span class="attr">Nate</span> <span class="attr">提供示例产品和评论</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name:</span> &#x27;<span class="attr">太棒了</span>!!!&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">评论评分</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">最佳评级</span>：&#x27;<span class="attr">5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">评级值</span>：&#x27;<span class="attr">5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">worstRating:</span> &#x27;<span class="attr">1</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">出版商</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">类型</span>：&#x27;<span class="attr">组织</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">TwoVit</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">聚合评分</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">评分值</span>：&#x27;<span class="attr">4.4</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">评论数</span>：&#x27;<span class="attr">89</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">优惠</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格</span>：&#x27;<span class="attr">119.99</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格货币</span>：&#x27;<span class="attr">美元</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">priceValidUntil:</span> &#x27;<span class="attr">2020-11-05</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">itemCondition:</span> &#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">UsedCondition</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">可用性</span>：&#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">InStock</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">executive-anvil</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">卖方</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name:</span> &#x27;<span class="attr">执行对象</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格</span>：&#x27;<span class="attr">139.99</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格货币</span>：&#x27;<span class="attr">CAD</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">priceValidUntil:</span> &#x27;<span class="attr">2020-09-05</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">itemCondition:</span> &#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">UsedCondition</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">可用性</span>：&#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">InStock</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">www.example.ca</span>/<span class="attr">executive-anvil</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">卖方</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name:</span> &#x27;<span class="attr">执行对象</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">mpn</span>=<span class="string">&quot;925872&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p>也可用：<code>sku</code>、<code>gtin8</code>、<code>gtin13</code>、<code>gtin14</code>。</p>
<p><code>offers.itemCondition</code> 的有效值：</p>
<ul>
<li><a href="https://schema.org/DamagedCondition">https://schema.org/DamagedCondition</a></li>
<li><a href="https://schema.org/NewCondition">https://schema.org/NewCondition</a></li>
<li><a href="https://schema.org/RefurbishedCondition">https://schema.org/RefurbishedCondition</a></li>
<li><a href="https://schema.org/UsedCondition">https://schema.org/UsedCondition</a></li>
</ul>
<p><code>offers.availability</code> 的有效值：</p>
<ul>
<li><a href="https://schema.org/Discontinued">https://schema.org/Discontinued</a></li>
<li><a href="https://schema.org/InStock">https://schema.org/InStock</a></li>
<li><a href="https://schema.org/InStoreOnly">https://schema.org/InStoreOnly</a></li>
<li><a href="https://schema.org/LimitedAvailability">https://schema.org/LimitedAvailability</a></li>
<li><a href="https://schema.org/OnlineOnly">https://schema.org/OnlineOnly</a></li>
<li><a href="https://schema.org/OutOfStock">https://schema.org/OutOfStock</a></li>
<li><a href="https://schema.org/PreOrder">https://schema.org/PreOrder</a></li>
<li><a href="https://schema.org/PreSale">https://schema.org/PreSale</a></li>
<li><a href="https://schema.org/SoldOut">https://schema.org/SoldOut</a></li>
</ul>
<p>属性 <code>aggregateOffer</code> 也可用：<br>（如果设置了 <code>offers</code> 则忽略）</p>
<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>低价</code></td>
<td>所有可用报价中的最低价格。使用浮点数。</td>
</tr>
<tr>
<td><code>价格货币</code></td>
<td>用于描述产品价格的货币，采用三字母 ISO 4217 格式。</td>
</tr>
</tbody></table>
<p><strong>推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>高价</code></td>
<td>所有可用报价中的最高价格。使用浮点数。</td>
</tr>
<tr>
<td><code>offerCount</code></td>
<td>产品的报价数量。</td>
</tr>
<tr>
<td><code>优惠</code></td>
<td>转让某项权利或提供服务的要约。您可以将其作为单个对象或具有以下属性的对象数组提供。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>有关产品数据类型的更多信息，请参见<a href="https://developers.google.com/search/docs/data-types/product">此处</a>。</p>
<h3 id="社会概况"><a href="#社会概况" class="headerlink" title="社会概况"></a>社会概况</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">SocialProfileJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>社交资料 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">SocialProfileJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">类型</span>=<span class="string">“人”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">名字</span>=<span class="string">“你的名字”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;http://www.your-site.com&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">同为</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">http:</span>//<span class="attr">www.facebook.com</span>/<span class="attr">your-profile</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">http:</span>//<span class="attr">instagram.com</span>/<span class="attr">yourProfile</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">http:</span>//<span class="attr">www.linkedin.com</span>/<span class="attr">in</span>/<span class="attr">yourprofile</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">http:</span>//<span class="attr">plus.google.com</span>/<span class="attr">your_profile</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>类型</code></td>
<td>个人或组织</td>
</tr>
<tr>
<td><code>名字</code></td>
<td>个人或组织的名称</td>
</tr>
<tr>
<td><code>网址</code></td>
<td>个人或组织官方网站的 URL。</td>
</tr>
<tr>
<td><code>相同</code></td>
<td>个人或组织的官方社交媒体资料页面的 URL 数组</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p><strong>谷歌支持的社交资料</strong></p>
<ul>
<li>Facebook</li>
<li>推特</li>
<li>谷歌+</li>
<li>Instagram 的</li>
<li>YouTube</li>
<li>领英</li>
<li>我的空间</li>
<li>平特雷斯特</li>
<li>声云</li>
<li>汤不热</li>
</ul>
<p>＃＃＃ 新闻文章</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">NewsArticleJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>新闻文章 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">新闻文章JsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;https://example.com/article&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&quot;文章标题&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">图片</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">部分</span>=<span class="string">“政治”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">关键字</span>=<span class="string">“巴育，郑信”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">datePublished</span>=<span class="string">&quot;2015-02-05T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">dateModified</span>=<span class="string">&quot;2015-02-05T09:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">authorName</span>=<span class="string">&quot;简博客&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">publisherName</span>=<span class="string">&quot;加里·米汉&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">publisherLogo</span>=<span class="string">&quot;https://www.example.com/photos/logo.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;这是对这篇文章的非常好的描述。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">body</span>=<span class="string">&quot;这是这篇新闻文章的所有文字&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">isAccessibleForFree</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><a href="https://developers.google.com/search/docs/data-types/social-profile">社交资料的 Google 文档</a></p>
<p>＃＃＃ 视频</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">VideoJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>视频 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">VideoJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;如何制作派对咖啡蛋糕&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;这就是制作派对咖啡蛋糕的方法。&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">contentUrl</span>=<span class="string">&quot;http://www.example.com/video123.mp4&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">embedUrl</span>=<span class="string">&quot;http://www.example.com/videoplayer?video=123&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">uploadDate</span>=<span class="string">&quot;2018-02-05T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">持续时间</span>=<span class="string">“PT1M33S”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">缩略图网址</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">expires</span>=<span class="string">&quot;2019-02-05T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">有部分</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name:</span> &#x27;<span class="attr">预热烤箱</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">开始偏移量</span>：<span class="attr">30</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">example</span>?<span class="attr">t</span>=<span class="string">30</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">watchCount</span>=<span class="string">&#123;2347&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">出版物</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">isLiveBroadcast</span>：<span class="attr">真</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">开始日期</span>：&#x27;<span class="attr">2020-10-24T14:00:00</span>+<span class="attr">00:00</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">结束日期</span>：&#x27;<span class="attr">2020-10-24T14:37:14</span>+<span class="attr">00:00</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">regionsAllowed</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">IT</span>&#x27;, &#x27;<span class="attr">NL</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>视频的标题。</td>
</tr>
<tr>
<td><code>描述</code></td>
<td>视频的描述。HTML 标签被忽略。</td>
</tr>
<tr>
<td><code>thumbnailUrl</code></td>
<td>指向视频缩略图文件的 URL。</td>
</tr>
<tr>
<td><code>上传日期</code></td>
<td>视频首次发布的日期，采用 ISO 8601 格式。</td>
</tr>
</tbody></table>
<p><strong>推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>contentUrl</code></td>
<td>指向实际视频媒体文件的 URL，采用一种受支持的编码格式。</td>
</tr>
<tr>
<td>持续时间 ISO 8601 格式的视频持续时间</td>
<td></td>
</tr>
<tr>
<td><code>embedUrl</code></td>
<td>指向特定视频播放器的 URL。</td>
</tr>
<tr>
<td><code>过期</code></td>
<td>如果适用，视频将不再可用的日期。</td>
</tr>
<tr>
<td><code>interactionStatistic</code></td>
<td>视频被观看的次数。</td>
</tr>
<tr>
<td><code>出版物</code></td>
<td>如果您的视频正在直播，并且您希望有资格获得 LIVE 徽章。</td>
</tr>
<tr>
<td><code>regionsAllowed</code></td>
<td>允许播放视频的区域。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<h3 id="视频游戏"><a href="#视频游戏" class="headerlink" title="视频游戏"></a>视频游戏</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">VideoGameJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>视频游戏 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">VideoGameJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;荒野大镖客：救赎 2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">translatorName</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">译员</span> <span class="attr">1</span>&#x27;, &#x27;<span class="attr">译员</span> <span class="attr">2</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">languageName</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">英语</span>&#x27;, &#x27;<span class="attr">库尔德语</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;Arthur Morgan 和 Van der Linde 团伙是逃亡中的不法分子。联邦特工和全国最好的赏金猎人紧追不舍，该团伙必须抢劫、偷窃并在崎岖的美国心脏地带杀出一条血路为了生存。”</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">      processorRequirements=&quot;</span><span class="attr">4</span> <span class="attr">GHz</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">memoryRequirements</span>=<span class="string">&quot;16 Gb&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">playMode</span>=<span class="string">&quot;单人游戏&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">applicationCategory</span>=<span class="string">&quot;游戏&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;https://example.com/rdr2-game&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">platformName</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">PC</span> <span class="attr">游戏</span>&#x27;, &#x27;<span class="attr">PlayStation</span> <span class="attr">4</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">操作系统名称</span>=<span class="string">&quot;windows&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">关键字</span>=<span class="string">“歹徒，帮派，联邦特工”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">datePublished</span>=<span class="string">&quot;2019-02-05T08:00:00+08:00&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">image</span>=<span class="string">&quot;https://example.com/photos/1x1/photo.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">publisherName</span>=<span class="string">&quot;垂直游戏&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">producerName</span>=<span class="string">&quot;Rockstar Games&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">producerUrl</span>=<span class="string">&quot;https//www.example.com/producer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">优惠</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格</span>：&#x27;<span class="attr">119.99</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格货币</span>：&#x27;<span class="attr">美元</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">priceValidUntil:</span> &#x27;<span class="attr">2020-11-05</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">可用性</span>：&#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">InStock</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.net</span>/<span class="attr">rdr2-game</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">卖方</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">行政游戏</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格</span>：&#x27;<span class="attr">139.99</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格货币</span>：&#x27;<span class="attr">CAD</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">priceValidUntil:</span> &#x27;<span class="attr">2020-09-05</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">可用性</span>：&#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">InStock</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.org</span>/<span class="attr">rdr2-game</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">卖方</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">行政游戏</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">聚合评分</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">评分值</span>：&#x27;<span class="attr">44</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">评论数</span>：&#x27;<span class="attr">89</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">评级计数</span>：&#x27;<span class="attr">684</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">最佳评级</span>：&#x27;<span class="attr">100</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">评论</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">作者</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">类型</span>：&#x27;<span class="attr">人</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">AhmetKaya</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">出版商</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">类型</span>：&#x27;<span class="attr">组织</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">Gam生产</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">发布日期</span>：&#x27;<span class="attr">2017-01-06T03:37:40Z</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">reviewBody:</span> &#x27;<span class="attr">Iki</span> <span class="attr">gozum.</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name:</span> &#x27;<span class="attr">Rica</span> <span class="attr">ederim.</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">评论评分</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">最佳评级</span>：&#x27;<span class="attr">5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">评级值</span>：&#x27;<span class="attr">5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">worstRating:</span> &#x27;<span class="attr">1</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>视频游戏的标题。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p><a href="https://schema.org/VideoGame">关于架构的更多信息</a></p>
<p>＃＃＃ 事件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">EventJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>事件 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">EventJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;我的活动&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">startDate</span>=<span class="string">&quot;2020-01-23T00:00:00.000Z&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">endDate</span>=<span class="string">&quot;2020-01-24T00:00:00.000Z&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">位置</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">名称</span>：&#x27;<span class="attr">我的地方</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">sameAs:</span> &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">my-place</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">地址</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">街道地址</span>：&#x27;<span class="attr">1600</span> <span class="attr">Saratoga</span> <span class="attr">Ave</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">addressLocality:</span> &#x27;<span class="attr">圣何塞</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">地址区域</span>：&#x27;<span class="attr">CA</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">邮政编码</span>：&#x27;<span class="attr">95129</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">地址国家</span>：&#x27;<span class="attr">美国</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;https://example.com/my-event&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">图片</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">photo.jpg</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&quot;我的活动@我的地方&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">优惠</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格</span>：&#x27;<span class="attr">119.99</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格货币</span>：&#x27;<span class="attr">美元</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">priceValidUntil:</span> &#x27;<span class="attr">2020-11-05</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">itemCondition:</span> &#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">UsedCondition</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">可用性</span>：&#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">InStock</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">www.example.com</span>/<span class="attr">executive-anvil</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">卖方</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">约翰</span>·<span class="attr">多伊</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">validFrom:</span> &#x27;<span class="attr">2020-11-01T00:00:00.000Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格</span>：&#x27;<span class="attr">139.99</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">价格货币</span>：&#x27;<span class="attr">CAD</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">priceValidUntil:</span> &#x27;<span class="attr">2020-09-05</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">itemCondition:</span> &#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">UsedCondition</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">可用性</span>：&#x27;<span class="attr">https:</span>//<span class="attr">schema.org</span>/<span class="attr">InStock</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">www.example.ca</span>/<span class="attr">executive-anvil</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">卖方</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name:</span> &#x27;<span class="attr">John</span> <span class="attr">Doe</span> <span class="attr">Sr.</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">validFrom:</span> &#x27;<span class="attr">2020-08-05T00:00:00.000Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">表演者</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">阿黛尔</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">基拉和莫里森</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">组织者</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">类型</span>：&#x27;<span class="attr">组织</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name:</span> &#x27;<span class="attr">未命名组织</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">www.unnamed.com</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">eventStatus</span>=<span class="string">&quot;EventScheduled&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">eventAttendanceMode</span>=<span class="string">&quot;OfflineEventAttendanceMode&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>活动名称</td>
</tr>
<tr>
<td><code>开始日期</code></td>
<td>iso8601 格式的事件开始日期时间</td>
</tr>
<tr>
<td><code>结束日期</code></td>
<td>iso8601 格式的事件结束日期时间</td>
</tr>
<tr>
<td><code>位置</code></td>
<td>事件的位置，可以是 <code>Place</code> 或 <code>VirtualLocation</code></td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p><strong><code>Place</code> 类型</strong><br>需要“地址”属性和“名称”。</p>
<p><strong><code>VirtualLocation</code> 类型</strong><br>需要 <code>url</code> 属性，不需要 <code>name</code>。</p>
<p><strong>支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>描述</code></td>
<td>活动说明</td>
</tr>
<tr>
<td><code>location.name</code></td>
<td>地点名称</td>
</tr>
<tr>
<td><code>location.sameAs</code></td>
<td>标识位置的参考网页的 URL</td>
</tr>
<tr>
<td><code>图像</code></td>
<td>事件的图像或图像。</td>
</tr>
<tr>
<td><code>网址</code></td>
<td>事件的完全限定 URL。</td>
</tr>
<tr>
<td><code>优惠</code></td>
<td>转让某项权利或提供服务的要约。您可以将其作为单个对象或具有以下属性的对象数组提供。</td>
</tr>
<tr>
<td><code>表演者</code></td>
<td>所有在本次活动中表演的艺术家。您可以将其作为单个对象或具有以下属性的对象数组提供。</td>
</tr>
<tr>
<td><code>表演者姓名</code></td>
<td>表演者姓名</td>
</tr>
<tr>
<td><code>表演者类型</code></td>
<td><code>Person</code> 或 <code>PerformingGroup</code></td>
</tr>
<tr>
<td><code>组织者</code></td>
<td>活动主办方</td>
</tr>
<tr>
<td><code>组织者类型</code></td>
<td><code>Organization</code> 或 <code>Person</code></td>
</tr>
<tr>
<td><code>组织者名称</code></td>
<td>活动主办方名称</td>
</tr>
<tr>
<td><code>organizer.url</code></td>
<td>活动主办方网址</td>
</tr>
<tr>
<td><code>事件状态</code></td>
<td>事件状态，键入“EventStatus”</td>
</tr>
<tr>
<td><code>eventAttendanceMode</code></td>
<td>活动的出席模式，输入<code>EventAttendanceMode</code></td>
</tr>
</tbody></table>
<p><strong><code>EventStatus</code> 类型</strong></p>
<ul>
<li>‘事件取消’</li>
<li>‘EventMovedOnline’</li>
<li>‘事件推迟’</li>
<li>‘事件重新安排’</li>
<li>‘EventScheduled’</li>
</ul>
<p><strong><code>EventAttendanceMode</code> 类型</strong></p>
<ul>
<li>‘MixedEventAttendanceMode’</li>
<li>‘OfflineEventAttendanceMode’</li>
<li>‘OnlineEventAttendanceMode’</li>
</ul>
<p><strong><code>offers</code> 必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>offers.price</code></td>
<td>报价的成本</td>
</tr>
<tr>
<td><code>offers.priceCurrency</code></td>
<td>报价的货币</td>
</tr>
</tbody></table>
<p><strong><code>offers</code> 推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>offers.priceValidUntil</code></td>
<td>直到优惠价格到期</td>
</tr>
<tr>
<td><code>offers.itemCondition</code></td>
<td>产品或服务的状况</td>
</tr>
<tr>
<td><code>offers.availability</code></td>
<td>此商品的可用性——例如有货、缺货、预购等。</td>
</tr>
<tr>
<td><code>offers.url</code></td>
<td>商品网址</td>
</tr>
<tr>
<td><code>offers.seller</code></td>
<td>卖这个东西的人</td>
</tr>
<tr>
<td><code>offers.seller.name</code></td>
<td>人名</td>
</tr>
<tr>
<td><code>offers.validFrom</code></td>
<td>从什么时候起报价有效</td>
</tr>
</tbody></table>
<p>属性 <code>aggregateOffer</code> 也可用：<br>（如果设置了 <code>offers</code> 则忽略）</p>
<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>低价</code></td>
<td>所有可用报价中的最低价格。使用浮点数。</td>
</tr>
<tr>
<td><code>价格货币</code></td>
<td>用于描述产品价格的货币，采用三字母 ISO 4217 格式。</td>
</tr>
</tbody></table>
<p><strong>推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>高价</code></td>
<td>所有可用报价中的最高价格。使用浮点数。</td>
</tr>
<tr>
<td><code>offerCount</code></td>
<td>产品的报价数量。</td>
</tr>
</tbody></table>
<p>有关参考和更多信息，请查看 <a href="https://developers.google.com/search/docs/data-types/event">Google 的搜索事件数据类型</a></p>
<p>###问答</p>
<p>问答页面是包含问答格式数据的网页，即一个问题后面是答案。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">QAPageJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>问答页面JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">QAPageJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">主要实体</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name:</span> &#x27;<span class="attr">一磅有多少盎司</span>？&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">文字</span>：“<span class="attr">我对烘焙产生了新的兴趣</span>，<span class="attr">并不断地以盎司和磅为单位跑遍各个方向</span>。<span class="attr">我必须在它们之间进行翻译</span>，<span class="attr">并且想知道一磅有多少盎司</span>？&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">回答数</span>：<span class="attr">3</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">upvoteCount:</span> <span class="attr">26</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">创建日期</span>：&#x27;<span class="attr">2016-07-23T21:11Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">author:</span> &#123; <span class="attr">name:</span> &#x27;<span class="attr">New</span> <span class="attr">Baking</span> <span class="attr">User</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">接受的答案</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">text:</span> &#x27;<span class="attr">1</span> <span class="attr">磅</span> (<span class="attr">lb</span>) <span class="attr">等于</span> <span class="attr">16</span> <span class="attr">盎司</span> (<span class="attr">oz</span>)。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">创建日期</span>：&#x27;<span class="attr">2016-11-02T21:11Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">upvoteCount:</span> <span class="attr">1337</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">question1</span>#<span class="attr">acceptedAnswer</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">作者</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">一些用户</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">建议答案</span>：[</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">文本</span>：&#x27;<span class="attr">您要寻找盎司还是液体盎司</span>？<span class="attr">如果您要查找液量盎司</span>，<span class="attr">则一磅水中含有</span> <span class="attr">15.34</span> <span class="attr">液量盎司</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">创建日期</span>：&#x27;<span class="attr">2016-11-02T21:11Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">upvoteCount:</span> <span class="attr">42</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">question1</span>#<span class="attr">suggestedAnswer1</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">作者</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">名称</span>：&#x27;<span class="attr">另一个用户</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">text:</span> `<span class="attr">我记不太清了</span>，<span class="attr">但我想是</span> <span class="attr">18</span> <span class="attr">盎司一磅</span>。<span class="attr">你可能需要仔细检查一下</span>。`,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">创建日期</span>：&#x27;<span class="attr">2016-11-06T21:11Z</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">upvoteCount:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">question1</span>#<span class="attr">suggestedAnswer2</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">作者</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">名称</span>：&#x27;<span class="attr">混淆用户</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>mainEntity</code></td>
<td>此页面的问题必须嵌套在 QAPageJsonld 组件的 mainEntity 属性下。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p><strong><code>mainEntity</code> 必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>answerCount</code></td>
<td>问题的答案总数。</td>
</tr>
<tr>
<td><code>acceptedAnswer</code> 或 <code>suggestedAnswer</code></td>
<td>要获得富媒体搜索结果的资格，一个问题必须至少有一个答案——acceptedAnswer 或 suggestedAnswer。</td>
</tr>
<tr>
<td><code>名字</code></td>
<td>问题简短形式的全文。</td>
</tr>
</tbody></table>
<p><strong><code>mainEntity</code> 支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>作者</code></td>
<td>问题的作者。</td>
</tr>
<tr>
<td><code>创建日期</code></td>
<td>问题添加到页面的日期，采用 ISO-8601 格式。</td>
</tr>
<tr>
<td><code>文字</code></td>
<td>问题的长格式的全文。</td>
</tr>
<tr>
<td><code>upvoteCount</code></td>
<td>此问题收到的总票数。</td>
</tr>
</tbody></table>
<p><strong><code>acceptedAnswer</code>&#x2F;<code>suggestedAnswer</code> 必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>文字</code></td>
<td>答案的全文。</td>
</tr>
</tbody></table>
<p><strong><code>acceptedAnswer</code>&#x2F;<code>suggestedAnswer</code> 支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>作者</code></td>
<td>问题的作者。</td>
</tr>
<tr>
<td><code>创建日期</code></td>
<td>问题添加到页面的日期，采用 ISO-8601 格式。</td>
</tr>
<tr>
<td><code>upvoteCount</code></td>
<td>此问题收到的总票数。</td>
</tr>
<tr>
<td><code>网址</code></td>
<td>直接链接到此答案的 URL。</td>
</tr>
</tbody></table>
<p>有关参考和更多信息，请查看 <a href="https://developers.google.com/search/docs/data-types/qapage">Google 的搜索问答数据类型</a></p>
<p>###收藏页面</p>
<p>集合页面是网页。每个网页都被隐含地假定声明为 WebPage 类型，因此可以使用有关该网页的各种属性，例如面包屑。如果指定了这些属性，我们建议显式声明，但如果在 itemscope 之外找到它们，则将假定它们与页面有关。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">CollectionPageJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>集合页面JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CollectionPageJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;抵抗3：人类的堕落&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">有部分</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">关于</span>：</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            “<span class="attr">彼得</span>·<span class="attr">格兰姆斯的布里顿四海插曲和帕萨卡利亚</span>”，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">作者</span>：&#x27;<span class="attr">John</span> <span class="attr">Doe</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">Schema.org</span> <span class="attr">本体</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">发布日期</span>：&#x27;<span class="attr">2021-03-09</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">听众</span>：&#x27;<span class="attr">互联网</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">关键字</span>：“<span class="attr">模式</span>”，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">thumbnailUrl:</span> &#x27;<span class="attr">https:</span>//<span class="attr">i.ytimg.com</span>/<span class="attr">vi</span>/<span class="attr">eXSJ3PO9Tas</span>/<span class="attr">hqdefault.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">图片</span>：&#x27;<span class="attr">hqdefault.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">关于</span>：&#x27;<span class="attr">肖斯塔科维奇第七交响曲</span>（<span class="attr">列宁格勒</span>）&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">作者</span>：&#x27;<span class="attr">约翰史密斯</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name:</span> &#x27;<span class="attr">创意作品名称</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">发布日期</span>：&#x27;<span class="attr">2014-10-01T19:30</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>项目的名称。</td>
</tr>
<tr>
<td><code>有部分</code></td>
<td>表示一个项目或作为该项目一部分的 CreativeWork，或 CreativeWork（在某种意义上）。</td>
</tr>
</tbody></table>
<p><strong>支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>hasPart.creativeWork</code></td>
<td>最通用的<a href="https://schema.org/CreativeWork">创意作品</a>，包括书籍、电影、照片、软件程序等</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p><strong><code>creativeWork</code> 必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>hasPart.creativeWork.author</code></td>
<td>此内容或评级的作者。请注意 author 的特殊之处在于 HTML 5 提供了一种通过 rel 标签指示作者身份的特殊机制。这等同于此并且可以互换使用。</td>
</tr>
<tr>
<td><code>hasPart.creativeWork.about</code></td>
<td>内容的主题。</td>
</tr>
<tr>
<td><code>hasPart.creativeWork.datePublished</code></td>
<td>首次广播&#x2F;出版日期。</td>
</tr>
<tr>
<td><code>hasPart.creativeWork.name</code></td>
<td>项目的名称。</td>
</tr>
</tbody></table>
<p><strong><code>creativeWork</code> 支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>hasPart.creativeWork.audience</code></td>
<td>目标受众，即为其创建某些内容的群体。</td>
</tr>
<tr>
<td><code>hasPart.creativeWork.keywords</code></td>
<td>用于描述此内容的关键字或标签。关键字列表中的多个条目通常用逗号分隔。</td>
</tr>
<tr>
<td><code>hasPart.creativeWork.thumbnailUrl</code></td>
<td>与事物相关的缩略图。</td>
</tr>
<tr>
<td><code>hasPart.creativeWork.image</code></td>
<td>项目的图像。这可以是 URL 或完整描述的 ImageObject。</td>
</tr>
</tbody></table>
<p>有关参考和更多信息，请查看 <a href="https://schema.org/CollectionPage">Collection Page DataType</a></p>
<p>＃＃＃ 个人资料页</p>
<p>个人资料页面是网页。每个网页都被隐含地假定声明为 WebPage 类型，因此可以使用有关该网页的各种属性，例如面包屑。如果指定了这些属性，我们建议显式声明，但如果在 itemscope 之外找到它们，则将假定它们与页面有关。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">ProfilePageJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">常量页面 = <span class="function">() =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>配置文件页面 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ProfilePageJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">lastReviewed</span>=<span class="string">&quot;2014-10-01T19:30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">面包屑</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">位置</span>：<span class="attr">1</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">书籍</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">项目</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">books</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">位置</span>：<span class="attr">2</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">作者</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">项目</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">books</span>/<span class="attr">authors</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">导出默认页面；</span><br></pre></td></tr></table></figure>

<p><strong>必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>面包屑</code></td>
<td>一组链接，可帮助用户理解和导航以字符串或 <a href="#breadcrumb">BreadcrumbList</a> 表示的网站层次结构。</td>
</tr>
</tbody></table>
<p><strong>支持的属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>lastReviewed</code></td>
<td>最后一次审查此网页内容的准确性和&#x2F;或完整性的日期。</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>有关参考和更多信息，请查看 <a href="https://schema.org/ProfilePage">Profile Page DataType</a></p>
<p>###轮播</p>
<p><strong>轮播组件的必需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>类型</code></td>
<td>轮播类型</td>
</tr>
<tr>
<td><code>数据</code></td>
<td>轮播中 item 列表的数组形式的数据</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<h4 id="默认（摘要列表）"><a href="#默认（摘要列表）" class="headerlink" title="默认（摘要列表）"></a>默认（摘要列表）</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从“反应”导入反应；</span><br><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">CarouselJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">导出默认值 () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>轮播默认 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CarouselJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">类型</span>=<span class="string">“默认”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">数据</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123; <span class="attr">url:</span> &#x27;<span class="attr">http:</span>//<span class="attr">example.com</span>/<span class="attr">peanut-butter-cookies.html</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">example.com</span>/<span class="attr">triple-chocolate-chunk.html</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>数据所需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>网址</code></td>
<td>项目详细页面的 URL。</td>
</tr>
</tbody></table>
<p>＃＃＃＃ 课程</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从“反应”导入反应；</span><br><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">CarouselJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">导出默认值 () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>轮播课程JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CarouselJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ofType</span> =<span class="string">“课程”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">数据</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">courseName:</span> &#x27;<span class="attr">课程1</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">描述</span>：&#x27;<span class="attr">课程</span> <span class="attr">1</span> <span class="attr">描述</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">providerName:</span> &#x27;<span class="attr">课程提供者</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">example.com</span>/<span class="attr">course-1.html</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">courseName:</span> &#x27;<span class="attr">课程2</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">描述</span>：&#x27;<span class="attr">课程</span> <span class="attr">2</span> <span class="attr">描述</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">providerName:</span> &#x27;<span class="attr">课程提供者</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">example.com</span>/<span class="attr">course-2.html</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>数据所需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>课程名称</code></td>
<td>课程的标题。</td>
</tr>
<tr>
<td><code>描述</code></td>
<td>课程描述。显示限制为 60 个字符。</td>
</tr>
<tr>
<td><code>供应商名称</code></td>
<td>课程提供者名称。</td>
</tr>
<tr>
<td><code>网址</code></td>
<td>项目详细页面的 URL。</td>
</tr>
</tbody></table>
<p><strong>数据推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>providerUrl</code></td>
<td>课程提供者的网址。</td>
</tr>
</tbody></table>
<p>＃＃＃＃ 电影</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从“反应”导入反应；</span><br><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">CarouselJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">导出默认值 () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>轮播电影 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CarouselJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ofType</span>=<span class="string">&quot;电影&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">数据</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">电影1</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">example.com</span>/<span class="attr">movie-1.html</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">图像</span>：</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">i.pinimg.com</span>/<span class="attr">originals</span>/<span class="attr">96</span>/<span class="attr">a0</span>/<span class="attr">0d</span>/<span class="attr">96a00d42b0ff8f80b7cdf2926a211e47.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">导演</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">约翰</span>·<span class="attr">多伊</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">审查</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">作者</span>：&#123; <span class="attr">type:</span> &#x27;<span class="attr">Person</span>&#x27;, <span class="attr">name:</span> &#x27;<span class="attr">Ronan</span> <span class="attr">Farrow</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">评论正文</span>：</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;<span class="attr">令人心碎</span>，<span class="attr">鼓舞人心</span>，<span class="attr">感动</span>。<span class="attr">布拉德利库珀是一个三重威胁</span>。&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">reviewRating:</span> &#123; <span class="attr">ratingValue:</span> &#x27;<span class="attr">5</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">电影2</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">example.com</span>/<span class="attr">movie-1.html</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">图像</span>：</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">i.pinimg.com</span>/<span class="attr">originals</span>/<span class="attr">96</span>/<span class="attr">a0</span>/<span class="attr">0d</span>/<span class="attr">96a00d42b0ff8f80b7cdf2926a211e47.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">导演</span>： [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">名称</span>：&#x27;<span class="attr">玛丽多伊</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">名称</span>：&#x27;<span class="attr">约翰</span>·<span class="attr">多伊</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">审查</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">作者</span>：&#123; <span class="attr">type:</span> &#x27;<span class="attr">Person</span>&#x27;, <span class="attr">name:</span> &#x27;<span class="attr">Ronan</span> <span class="attr">Farrow</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">评论正文</span>：</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;<span class="attr">令人心碎</span>，<span class="attr">鼓舞人心</span>，<span class="attr">感动</span>。<span class="attr">罗温阿特金森是一个三重威胁</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">reviewRating:</span> &#123; <span class="attr">ratingValue:</span> &#x27;<span class="attr">5</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>数据所需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>电影的名称。</td>
</tr>
<tr>
<td><code>图像</code></td>
<td>代表电影的图像。</td>
</tr>
<tr>
<td><code>网址</code></td>
<td>项目详细页面的 URL。</td>
</tr>
</tbody></table>
<p><strong>数据推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>导演</code></td>
<td>电影的导演们。</td>
</tr>
<tr>
<td><code>创建日期</code></td>
<td>电影上映的日期。</td>
</tr>
<tr>
<td><code>聚合评级</code></td>
<td>电影的聚合评级对象。</td>
</tr>
<tr>
<td><code>审查</code></td>
<td>电影的评论。</td>
</tr>
</tbody></table>
<p>＃＃＃＃ 食谱</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从“反应”导入反应；</span><br><span class="line">从<span class="string">&#x27;next-seo&#x27;</span>导入&#123;<span class="title class_">CarouselJsonLd</span>&#125;；</span><br><span class="line"></span><br><span class="line">导出默认值 () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Carousel Recipe JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CarouselJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ofType</span> =<span class="string">“食谱”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">数据</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">派对咖啡蛋糕</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">example.com</span>/<span class="attr">recipe-1.html</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">图片</span>： [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">authorName:</span> &#x27;<span class="attr">玛丽斯通</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">发布日期</span>：&#x27;<span class="attr">2018-03-10</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">描述</span>：&#x27;<span class="attr">这个咖啡蛋糕棒极了</span>，<span class="attr">非常适合聚会</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">准备时间</span>：&#x27;<span class="attr">PT20M</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">烹饪时间</span>：&#x27;<span class="attr">PT30M</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">总时间</span>：&#x27;<span class="attr">PT50M</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">关键词</span>：&#x27;<span class="attr">派对蛋糕</span>，<span class="attr">咖啡</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">产量</span>：&#x27;<span class="attr">10</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">类别</span>：&#x27;<span class="attr">甜点</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">卡路里</span>：<span class="attr">270</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">美食</span>：&#x27;<span class="attr">美国</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">原料</span>： [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">2</span> <span class="attr">杯面粉</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">3</span>/<span class="attr">4</span> <span class="attr">杯白糖</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">2茶匙发酵粉</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">1</span>/<span class="attr">2</span> <span class="attr">茶匙盐</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">1</span>/<span class="attr">2</span> <span class="attr">杯黄油</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">2个蛋</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">3</span>/<span class="attr">4</span> <span class="attr">杯牛奶</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">指示</span>： [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">名称</span>：&#x27;<span class="attr">预热</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">将烤箱预热到</span> <span class="attr">350</span> <span class="attr">华氏度</span>。<span class="attr">在</span> <span class="attr">9x9</span> <span class="attr">英寸的平底锅上涂上油脂和面粉</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step1</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step1.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">name:</span> &#x27;<span class="attr">混合干料</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">在一个大碗里</span>，<span class="attr">混合面粉</span>、<span class="attr">糖</span>、<span class="attr">泡打粉和盐</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step2</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step2.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">name:</span> &#x27;<span class="attr">铺入锅中</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">铺入准备好的平底锅中</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step4</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step4.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">名称</span>：&#x27;<span class="attr">烘烤</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">烘烤</span> <span class="attr">30</span> <span class="attr">到</span> <span class="attr">35</span> <span class="attr">分钟</span>，<span class="attr">或直至变硬</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step5.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">聚合评级</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">评级值</span>：&#x27;<span class="attr">5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">评级计数</span>：&#x27;<span class="attr">18</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">视频</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">如何制作派对咖啡蛋糕</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">description:</span> &#x27;<span class="attr">这就是你制作派对咖啡蛋糕的方式</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">缩略图网址</span>：[</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">contentUrl:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">video123.mp4</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">embedUrl:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">videoplayer</span>?<span class="attr">video</span>=<span class="string">123</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">上传日期</span>：&#x27;<span class="attr">2018-02-05T08:00:00</span>+<span class="attr">08:00</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">持续时间</span>：&#x27;<span class="attr">PT1M33S</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">过期</span>：&#x27;<span class="attr">2019-02-05T08:00:00</span>+<span class="attr">08:00</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">名称</span>：&#x27;<span class="attr">派对咖啡蛋糕2</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">网址</span>：&#x27;<span class="attr">http:</span>//<span class="attr">example.com</span>/<span class="attr">recipe-2.html</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">图片</span>： [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">authorName:</span> &#x27;<span class="attr">玛丽</span>·<span class="attr">斯通2</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">发布日期</span>：&#x27;<span class="attr">2018-03-10</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">描述</span>：&#x27;<span class="attr">这个咖啡蛋糕棒极了</span>，<span class="attr">非常适合聚会</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">准备时间</span>：&#x27;<span class="attr">PT20M</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">烹饪时间</span>：&#x27;<span class="attr">PT30M</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">总时间</span>：&#x27;<span class="attr">PT50M</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">关键词</span>：&#x27;<span class="attr">派对蛋糕</span>，<span class="attr">咖啡</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">产量</span>：&#x27;<span class="attr">10</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">类别</span>：&#x27;<span class="attr">甜点</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">卡路里</span>：<span class="attr">270</span>，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">美食</span>：&#x27;<span class="attr">美国</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">原料</span>： [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">2</span> <span class="attr">杯面粉</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">3</span>/<span class="attr">4</span> <span class="attr">杯白糖</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">2茶匙发酵粉</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">1</span>/<span class="attr">2</span> <span class="attr">茶匙盐</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">1</span>/<span class="attr">2</span> <span class="attr">杯黄油</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">2个蛋</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#x27;<span class="attr">3</span>/<span class="attr">4</span> <span class="attr">杯牛奶</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">指示</span>： [</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">名称</span>：&#x27;<span class="attr">预热</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">将烤箱预热到</span> <span class="attr">350</span> <span class="attr">华氏度</span>。<span class="attr">在</span> <span class="attr">9x9</span> <span class="attr">英寸的平底锅上涂上油脂和面粉</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step1</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step1.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">name:</span> &#x27;<span class="attr">混合干料</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">在一个大碗里</span>，<span class="attr">混合面粉</span>、<span class="attr">糖</span>、<span class="attr">泡打粉和盐</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step2</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step2.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">name:</span> &#x27;<span class="attr">铺入锅中</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">铺入准备好的平底锅中</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step4</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step4.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">名称</span>：&#x27;<span class="attr">烘烤</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">text:</span> &#x27;<span class="attr">烘烤</span> <span class="attr">30</span> <span class="attr">到</span> <span class="attr">35</span> <span class="attr">分钟</span>，<span class="attr">或直至变硬</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">网址</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">party-coffee-cake</span>#<span class="attr">step5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">图片</span>：&#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">party-coffee-cake</span>/<span class="attr">step5.jpg</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">聚合评级</span>：&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">评级值</span>：&#x27;<span class="attr">5</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">评级计数</span>：&#x27;<span class="attr">18</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">视频</span>： &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">名称</span>：&#x27;<span class="attr">如何制作派对咖啡蛋糕</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">description:</span> &#x27;<span class="attr">这就是你制作派对咖啡蛋糕的方式</span>。&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">缩略图网址</span>：[</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">1x1</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">4x3</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;<span class="attr">https:</span>//<span class="attr">example.com</span>/<span class="attr">photos</span>/<span class="attr">16x9</span>/<span class="attr">photo.jpg</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            ],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">contentUrl:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">video123.mp4</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">embedUrl:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">videoplayer</span>?<span class="attr">video</span>=<span class="string">123</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">上传日期</span>：&#x27;<span class="attr">2018-02-05T08:00:00</span>+<span class="attr">08:00</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">持续时间</span>：&#x27;<span class="attr">PT1M33S</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">过期</span>：&#x27;<span class="attr">2019-02-05T08:00:00</span>+<span class="attr">08:00</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>数据所需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>菜名。</td>
</tr>
<tr>
<td><code>描述</code></td>
<td>食谱说明</td>
</tr>
<tr>
<td><code>作者名</code></td>
<td>食谱作者姓名</td>
</tr>
<tr>
<td><code>成分</code></td>
<td>成分字符串列表</td>
</tr>
<tr>
<td><code>说明</code></td>
<td>-</td>
</tr>
<tr>
<td><code>instructions.name</code></td>
<td>指令步骤的名称。</td>
</tr>
<tr>
<td><code>instructions.text</code></td>
<td>说明步骤的方向。</td>
</tr>
<tr>
<td><code>网址</code></td>
<td>项目详细页面的 URL。</td>
</tr>
</tbody></table>
<h3 id="软件应用"><a href="#软件应用" class="headerlink" title="软件应用"></a>软件应用</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从“反应”导入反应；</span><br><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">SoftwareAppJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">导出默认值 () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>软件应用 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">SoftwareAppJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">名称</span>=<span class="string">“愤怒的小鸟”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">价格</span>=<span class="string">“1.00”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">价格货币</span>=<span class="string">“美元”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">aggregateRating</span>=<span class="string">&#123;&#123;</span> <span class="attr">ratingValue:</span> &#x27;<span class="attr">4.6</span>&#x27;, <span class="attr">reviewCount:</span> &#x27;<span class="attr">8864</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">操作系统</span>=<span class="string">“安卓”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">applicationCategory</span>=<span class="string">&quot;游戏应用&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>数据所需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>应用程序的名称。</td>
</tr>
<tr>
<td><code>价格</code></td>
<td>应用程序的价格。如果应用程序是免费的，请将 offers.price 设置为 0</td>
</tr>
<tr>
<td><code>价格货币</code></td>
<td>如果应用的价格大于 0，则必须包含 offers.currency。</td>
</tr>
<tr>
<td><code>聚合评级</code></td>
<td>应用的平均评分。（如果存在审查则不需要。）</td>
</tr>
<tr>
<td><code>审查</code></td>
<td>应用程序的单一评论。（如果存在 aggregateRating 则不需要。）</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p><strong>数据推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>操作系统</code></td>
<td>支持的操作系统</td>
</tr>
<tr>
<td></td>
<td>通过游戏它自己。</td>
</tr>
<tr>
<td><code>应用类别</code></td>
<td>桌面软件或视频游戏…</td>
</tr>
</tbody></table>
<p>有关参考和更多信息，请查看 <a href="https://developers.google.com/search/docs/data-types/software-app">软件应用程序的谷歌文档</a></p>
<p>＃＃＃ 组织</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">从“反应”导入反应；</span><br><span class="line">从 <span class="string">&#x27;next-seo&#x27;</span> 导入 &#123; <span class="title class_">OrganizationJsonLd</span> &#125;；</span><br><span class="line"></span><br><span class="line">导出默认值 () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组织 JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">OrganizationJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">类型</span>=<span class="string">“公司”</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">id</span>=<span class="string">&quot;https://www.purpule-fox.io/#corporation&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">logo</span>=<span class="string">&quot;https://www.example.com/photos/logo.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">legalName</span>=<span class="string">&quot;紫狐有限责任公司&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;紫狐&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">地址</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">街道地址</span>：&#x27;<span class="attr">1600</span> <span class="attr">Saratoga</span> <span class="attr">Ave</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">addressLocality:</span> &#x27;<span class="attr">圣何塞</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">地址区域</span>：&#x27;<span class="attr">CA</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">邮政编码</span>：&#x27;<span class="attr">95129</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">地址国家</span>：&#x27;<span class="attr">美国</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">接触点</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电话</span>：&#x27;+<span class="attr">1-401-555-1212</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactType:</span> &#x27;<span class="attr">客户服务</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电子邮件</span>：&#x27;<span class="attr">customerservice</span>@<span class="attr">email.com</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">areaServed:</span> &#x27;<span class="attr">美国</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">availableLanguage:</span> [&#x27;<span class="attr">英语</span>&#x27;, &#x27;<span class="attr">西班牙语</span>&#x27;, &#x27;<span class="attr">法语</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电话</span>：&#x27;+<span class="attr">1-877-746-0909</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactType:</span> &#x27;<span class="attr">客户服务</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电子邮件</span>：&#x27;<span class="attr">servicecustomer</span>@<span class="attr">email.com</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactOption:</span> &#x27;<span class="attr">TollFree</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">availableLanguage:</span> &#x27;<span class="attr">英语</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">电话</span>：&#x27;+<span class="attr">1-877-453-1304</span>&#x27;，</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactType:</span> &#x27;<span class="attr">技术支持</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">contactOption:</span> &#x27;<span class="attr">TollFree</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">areaServed:</span> [&#x27;<span class="attr">美国</span>&#x27;, &#x27;<span class="attr">CA</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">availableLanguage:</span> [&#x27;<span class="attr">英语</span>&#x27;, &#x27;<span class="attr">法语</span>&#x27;],</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">sameAs</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">https:</span>//<span class="attr">www.orange-fox.com</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">url</span>=<span class="string">&quot;https://www.purpule-fox.io/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>数据所需属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>名字</code></td>
<td>组织的名称。</td>
</tr>
<tr>
<td><code>网址</code></td>
<td>组织网址</td>
</tr>
<tr>
<td><code>接触点</code></td>
<td></td>
</tr>
<tr>
<td><code>contactPoint.telephone</code></td>
<td>电话号码的国际化版本，以“+”符号和国家代码开头</td>
</tr>
<tr>
<td><code>contactPoint.contactType</code></td>
<td>电话号码用途的描述，即“技术支持”。</td>
</tr>
</tbody></table>
<p><strong>数据推荐属性</strong></p>
<table>
<thead>
<tr>
<th>物业</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>标志</code></td>
<td>ImageObject 或 URL 与组织相关联的徽标。</td>
</tr>
<tr>
<td><code>类型</code></td>
<td>组织类型，检查<a href="https://schema.org/Organization#subtypes">此处</a></td>
</tr>
<tr>
<td><code>法定名称</code></td>
<td>组织的正式名称，例如注册的公司名称。</td>
</tr>
<tr>
<td><code>相同</code></td>
<td>明确指示项目标识的参考网页的 URL。</td>
</tr>
<tr>
<td><code>地址</code></td>
<td>具体营业地点地址</td>
</tr>
<tr>
<td><code>地址.地址国家</code></td>
<td>2 个字母的 ISO 3166-1 alpha-2 国家&#x2F;地区代码</td>
</tr>
<tr>
<td><code>address.addressLocality</code></td>
<td>城市</td>
</tr>
<tr>
<td><code>地址.地址区域</code></td>
<td>州或省，如果适用。</td>
</tr>
<tr>
<td><code>address.postalCode</code></td>
<td>邮政编码。</td>
</tr>
<tr>
<td><code>address.streetAddress</code></td>
<td>街道编号、街道名称和单元编号。</td>
</tr>
<tr>
<td><code>contactPoint.areaServed</code></td>
<td>业务服务的地理区域的“字符串”或“数组”。示例 <code>&quot;US&quot;</code> 或 <code>[&quot;US&quot;, &quot;CA&quot;, &quot;MX&quot;]</code></td>
</tr>
<tr>
<td><code>contactPoint.availableLanguage</code></td>
<td>有关所用语言的详细信息。示例 <code>&quot;English&quot;</code> 或 <code>[&quot;English&quot;, &quot;French&quot;]</code></td>
</tr>
<tr>
<td><code>contactPoint.email</code></td>
<td>与业务相关的电子邮件&#96;</td>
</tr>
</tbody></table>
<p><strong>其他</strong><br>| <code>useAppDir</code> | 如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。|</p>
<p>有关参考和更多信息，请查看 <a href="https://schema.org/Organization">文档</a></p>
<h3 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrandJsonLd</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Brand JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BrandJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">slogan</span>=<span class="string">&#x27;What does the fox say?&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">id</span>=<span class="string">&#x27;https://www.purpule-fox.io/#corporation&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">logo</span>=<span class="string">&#x27;https://www.example.com/photos/logo.jpg&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">aggregateRating</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ratingValue:</span> &#x27;<span class="attr">5</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ratingCount:</span> &#x27;<span class="attr">18</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="数据所需属性"><a href="#数据所需属性" class="headerlink" title="数据所需属性"></a>数据所需属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td>‘页面主要实体的 URL’</td>
</tr>
</tbody></table>
<h4 id="数据推荐属性"><a href="#数据推荐属性" class="headerlink" title="数据推荐属性"></a>数据推荐属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>标志</code></td>
<td>ImageObject 或 URL 与组织相关联的徽标。</td>
</tr>
<tr>
<td><code>口号</code></td>
<td>与项目相关的标语或座右铭。</td>
</tr>
<tr>
<td><code>aggregateRating.ratingValue</code></td>
<td>内容评级。（查看<a href="https://schema.org/ratingValue">参考</a></td>
</tr>
<tr>
<td><code>aggregateRating.ratingCount</code></td>
<td>评分总数的计数。</td>
</tr>
<tr>
<td><code>aggregateRating.reviewCount</code></td>
<td>评论总数的计数。</td>
</tr>
<tr>
<td><code>aggregateRating.bestRating</code></td>
<td>此评级系统中允许的最高值。如果省略 bestRating，则假定为 5。</td>
</tr>
<tr>
<td><code>useAppDir</code></td>
<td>如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。</td>
</tr>
</tbody></table>
<p>有关参考和更多信息，请查看 <a href="https://schema.org/Brand">文档</a></p>
<h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebPageJsonLd</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WebPage JSON-LD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">WebPageJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">description</span>=<span class="string">&#x27;What does the fox say?&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">id</span>=<span class="string">&#x27;https://www.purpule-fox.io/#corporation&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">lastReviewed</span>=<span class="string">&#x27;2021-05-26T05:59:02.085Z&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">reviewedBy</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type:</span> &#x27;<span class="attr">Person</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name:</span> &#x27;<span class="attr">Garmeeh</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="数据所需属性-1"><a href="#数据所需属性-1" class="headerlink" title="数据所需属性"></a>数据所需属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td>‘页面主要实体的 URL’</td>
</tr>
</tbody></table>
<h4 id="数据推荐属性-1"><a href="#数据推荐属性-1" class="headerlink" title="数据推荐属性"></a>数据推荐属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>description</code></td>
<td>ImageObject 或 URL 与组织相关联的徽标。</td>
</tr>
<tr>
<td><code>lastReviewed</code></td>
<td>最后一次审查此网页内容的准确性和&#x2F;或完整性的日期。</td>
</tr>
<tr>
<td><code>reviewedBy.type</code></td>
<td>将审查网页内容的人员或组织。</td>
</tr>
<tr>
<td><code>reviewedBy.name</code></td>
<td>已审查此网页内容的准确性和&#x2F;或完整性的实体的名称。</td>
</tr>
<tr>
<td><code>useAppDir</code></td>
<td>如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。</td>
</tr>
</tbody></table>
<p>有关参考和更多信息，请查看 <a href="https://schema.org/WebPage">文档</a></p>
<h3 id="图像元数据"><a href="#图像元数据" class="headerlink" title="图像元数据"></a>图像元数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ImageJsonLd</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Image</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ImageJsonLd</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">images</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">contentUrl:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">images</span>/<span class="attr">image.png</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">creator:</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#x27;@<span class="attr">type</span>&#x27;<span class="attr">:</span> &#x27;<span class="attr">Person</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">name:</span> &#x27;<span class="attr">Jane</span> <span class="attr">Doe</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">creditText:</span> &#x27;<span class="attr">Jane</span> <span class="attr">Doe</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">copyrightNotice:</span> &#x27;© <span class="attr">Jane</span> <span class="attr">Doe</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">license:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">license</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">acquireLicensePage:</span> &#x27;<span class="attr">http:</span>//<span class="attr">www.example.com</span>/<span class="attr">acquire-license</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Image</span>;</span><br></pre></td></tr></table></figure>

<h4 id="数据推荐属性-2"><a href="#数据推荐属性-2" class="headerlink" title="数据推荐属性"></a>数据推荐属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>资讯</th>
</tr>
</thead>
<tbody><tr>
<td><code>contentUrl</code></td>
<td>实际图像内容的 URL。Google 使用 contentUrl 来确定照片元数据适用于哪个图像。</td>
</tr>
<tr>
<td><code>creator.name</code></td>
<td>创建者的名字。</td>
</tr>
<tr>
<td><code>creditText</code></td>
<td>图像发布时归功于图像的个人和&#x2F;或组织的名称。</td>
</tr>
<tr>
<td><code>copyrightNotice</code></td>
<td>为这张照片声明知识产权的版权声明。这标识了照片版权的当前所有者。</td>
</tr>
<tr>
<td><code>license</code></td>
<td>描述管理图像使用许可的页面的 URL。例如，它可能是您网站上的条款和条件。</td>
</tr>
<tr>
<td><code>acquireLicensePage</code></td>
<td>一个页面的 URL，用户可以在其中找到有关如何许可该图像的信息。</td>
</tr>
<tr>
<td><code>useAppDir</code></td>
<td>如果使用新的应用程序目录，则应将其设置为 true。如果在 app 目录之外则不需要。</td>
</tr>
</tbody></table>
<p>有关参考和更多信息，请查看 <a href="https://developers.google.com/search/docs/appearance/structured-data/image-license-metadata">Google 文档</a></p>
]]></content>
      <tags>
        <tag>Next SEO</tag>
        <tag>Next.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Video.js 在 React 下的使用示例</title>
    <url>/video.js/Video.js%20%E5%9C%A8%20React%20%E4%B8%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>这些是几个 React 和 Video .js 播放器实现和示例。</p>
<p>不要忘记包括 Video.js CSS，文件位于 <code>video.js/dist/video-js.css</code></p>
<span id="more"></span>

<h2 id="React-函数组件和-useEffect-示例"><a href="#React-函数组件和-useEffect-示例" class="headerlink" title="React 函数组件和 useEffect 示例"></a>React 函数组件和 <code>useEffect</code> 示例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">&#x27;video.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;video.js/dist/video-js.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">VideoJS</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> videoRef = <span class="title class_">React</span>.<span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> playerRef = <span class="title class_">React</span>.<span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; options, onReady &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 确保 Video.js 播发器仅初始化一次</span></span><br><span class="line">    <span class="keyword">if</span> (!playerRef.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="comment">// Video.js 播放器需要位于 React 18 严格模式的 el 组件内部。</span></span><br><span class="line">      <span class="keyword">const</span> videoElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;video-js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      videoElement.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;vjs-big-play-centered&#x27;</span>);</span><br><span class="line">      videoRef.<span class="property">current</span>.<span class="title function_">appendChild</span>(videoElement);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> player = (playerRef.<span class="property">current</span> = <span class="title function_">videojs</span>(videoElement, options, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        videojs.<span class="title function_">log</span>(<span class="string">&#x27;player is ready&#x27;</span>);</span><br><span class="line">        onReady &amp;&amp; <span class="title function_">onReady</span>(player);</span><br><span class="line">      &#125;));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 您可以在 `else` 块中更新现有播发器关于 prop 的更改，例如：</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> player = playerRef.<span class="property">current</span>;</span><br><span class="line"></span><br><span class="line">      player.<span class="title function_">autoplay</span>(options.<span class="property">autoplay</span>);</span><br><span class="line">      player.<span class="title function_">src</span>(options.<span class="property">sources</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [options, videoRef]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数组件卸载时销毁 Video.js 播放器</span></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> player = playerRef.<span class="property">current</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (player &amp;&amp; !player.<span class="title function_">isDisposed</span>()) &#123;</span><br><span class="line">        player.<span class="title function_">dispose</span>();</span><br><span class="line">        playerRef.<span class="property">current</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [playerRef]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-vjs-player</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;videoRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">VideoJS</span>;</span><br></pre></td></tr></table></figure>

<p>最后，像这样使用组件（请参阅 <a href="https://videojs.com/guides/options">Video.js 选项参考</a>）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这将从之前的示例中导入函数组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VideoJS</span> <span class="keyword">from</span> <span class="string">&#x27;./VideoJS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> playerRef = <span class="title class_">React</span>.<span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> videoJsOptions = &#123;</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">controls</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">responsive</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fluid</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">sources</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">src</span>: <span class="string">&#x27;/path/to/video.mp4&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;video/mp4&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handlePlayerReady</span> = (<span class="params">player</span>) =&gt; &#123;</span><br><span class="line">    playerRef.<span class="property">current</span> = player;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里可以处理播放器事件,例如:</span></span><br><span class="line">    player.<span class="title function_">on</span>(<span class="string">&#x27;waiting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      videojs.<span class="title function_">log</span>(<span class="string">&#x27;player is waiting&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    player.<span class="title function_">on</span>(<span class="string">&#x27;dispose&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      videojs.<span class="title function_">log</span>(<span class="string">&#x27;player will dispose&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Rest of app here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">VideoJS</span> <span class="attr">options</span>=<span class="string">&#123;videoJsOptions&#125;</span> <span class="attr">onReady</span>=<span class="string">&#123;handlePlayerReady&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Rest of app here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="在-Video-js-组件中使用-React-组件"><a href="#在-Video-js-组件中使用-React-组件" class="headerlink" title="在 Video.js 组件中使用 React 组件"></a>在 Video.js 组件中使用 React 组件</h2><p>此示例演示了在 Video.js 播放器中的 Video 组件中使用 React 组件。通过这种方法，开发人员可以通过 React 管理他们的自定义 Video.js 组件。</p>
<p>首先，创建一个普通的 React 组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ExampleReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此组件中，<code>vjsBridgeComponent</code> 在其 <code>props</code> 上可用。 通过该对象，可以使用<code>vjsBridgeComponent</code> 的方法。</p>
<p>Video.js 播放器可以通过相同的方式在此 React 组件中引用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> player = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">vjsBridgeComponent</span>.<span class="title function_">player</span>();</span><br></pre></td></tr></table></figure>

<p>接下来，创建一个 Video.js 组件。</p>
<p>此组件将 React 组件呈现为自身。基本上，Video.js 组件充当 Video.js 播放器和 React 组件之间的桥梁：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ExampleReactComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./example-react-component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">&#x27;video.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VjsComponent</span> = videojs.<span class="title function_">getComponent</span>(<span class="string">&#x27;Component&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleVjsBridgeComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">VjsComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">player, options</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(player, options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前类上下文绑定到 mountReactComponent 方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mountReactComponent</span> = <span class="variable language_">this</span>.<span class="property">mountReactComponent</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当播放器准备好时，调用方法来挂载 React 组件</span></span><br><span class="line">    player.<span class="title function_">ready</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">mountReactComponent</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当该组件被销毁时，删除 React root</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&#x27;dispose&#x27;</span>, <span class="function">() =&gt;</span> <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">this</span>.<span class="title function_">el</span>()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此方法将 ExampleReactComponent 渲染到 Video.js 组件 `this.el()` 的 DOM 元素中。</span></span><br><span class="line">  <span class="title function_">mountReactComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ExampleReactComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">vjsBridgeComponent</span>=<span class="string">&#123;this&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">text</span>=<span class="string">&#x27;Example React Component&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">el</span>()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保注册 Video.js 组件，以便 Video.js 知道它存在</span></span><br><span class="line">videojs.<span class="title function_">registerComponent</span>(</span><br><span class="line">  <span class="string">&#x27;exampleVjsBridgeComponent&#x27;</span>,</span><br><span class="line">  <span class="title class_">ExampleVjsBridgeComponent</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExampleVjsBridgeComponent</span>;</span><br></pre></td></tr></table></figure>

<p>最后，可以将 Video.js 桥接组件添加到播放器中，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件安装时实例化 Video.js 播放器</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">player</span> = <span class="title function_">videojs</span>(<span class="variable language_">this</span>.<span class="property">videoNode</span>, <span class="variable language_">this</span>.<span class="property">props</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      videojs.<span class="title function_">log</span>(<span class="string">&#x27;onPlayerReady&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 ExampleVjsBridgeComponent 添加为播放器的子级（或播放器内的另一个组件，例如控制栏）。</span></span><br><span class="line">    <span class="comment">// 您可以使用此方法的第二个参数将选项传递给桥接组件。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">player</span>.<span class="title function_">addChild</span>(<span class="string">&#x27;exampleVjsBridgeComponent&#x27;</span>, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Video.js</tag>
        <tag>React</tag>
        <tag>示例</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Video.js 进行视频自动播放的最佳实践</title>
    <url>/video.js/%E4%BD%BF%E7%94%A8%20Video.js%20%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<ul>
<li>永远不要假设自动播放会起作用。</li>
<li>使用 <code>muted</code> 属性&#x2F;选项将提高自动播放成功的机会。</li>
<li>更喜欢通过 <code>player.play()</code> 方法进行编程自动播放，避免使用 <code>autoplay</code> 属性&#x2F;选项。</li>
</ul>
<span id="more"></span>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近有很多关于自动播放的讨论，我们想花几分钟时间分享一些在 video.js 中使用自动播放时的最佳实践。</p>
<p>这篇文章旨在作为信息来源 - 而不是关于自动播放视频的社论或立场声明。许多用户讨厌自动播放，因为它很烦人或消耗宝贵的带宽。许多免费提供内容的发布商依靠自动播放来制作为其业务提供资金的预贴片广告。浏览器供应商（和开源库作者）必须根据其用户、网络上的发布商和他们自己的业务的兴趣来权衡这些问题。用户必须选择最能反映其偏好的浏览器。</p>
<p>这篇文章不是关于规避自动播放政策的方法。这是不可能的，没有人应该浪费时间尝试它。我们认为，主动规避浏览器的内置用户体验或用户偏好是有害的，这是没有争议的。</p>
<h2 id="大型浏览器中的自动播放策略"><a href="#大型浏览器中的自动播放策略" class="headerlink" title="大型浏览器中的自动播放策略"></a>大型浏览器中的自动播放策略</h2><p>我不打算详尽地介绍每个浏览器的特定算法，因为它们可能会发生变化，并且会破坏这篇文章的核心观点：<strong>永远不要假设自动播放会起作用</strong>。</p>
<h3 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h3><p>从 2017 年 9 月发售的 Safari 11 开始，Apple 已更新其自动播放政策，以防止在大多数网站上自动播放声音。</p>
<h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>早在 2017 年 9 月，Google 就宣布 Chrome 的自动播放政策将于 2018 年 4 月 的 Chrome 66 版本中发生变化，但须遵守一系列规则。</p>
<h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>对于 Firefox，Mozilla 采取了暂时没有固定的自动播放政策的立场。这种情况将来可能会改变。也就是说，今天的 Firefox 确实允许用户通过一些配置更改来禁用自动播放。</p>
<h3 id="IE11-和-Edge"><a href="#IE11-和-Edge" class="headerlink" title="IE11 和 Edge"></a>IE11 和 Edge</h3><p>Microsoft 的浏览器没有特定&#x2F;已知的自动播放策略 - 在撰写本文时，自动播放仅适用于 IE11 和 Edge。</p>
<h2 id="回顾如何在-Video-js-中请求自动播放"><a href="#回顾如何在-Video-js-中请求自动播放" class="headerlink" title="回顾如何在 Video.js 中请求自动播放"></a>回顾如何在 Video.js 中请求自动播放</h2><p>请注意本节的标题如何使用“请求”一词。这是有意为之，因为它应该被视为请求。请记住，<strong>永远不要假设自动播放会起作用</strong>。</p>
<p>Video.js 的优势之一是它是围绕<code>&lt;video&gt;</code>元素进行界面设计的; 因此，它将遵循底层播放技术（在大多数情况下，HTML5 视频）和浏览器。换句话说，浏览器允许的 Video.js 就允许。</p>
<p>使用 Video.js 时，有两种方法可以启用自动播放：</p>
<ol>
<li><p>对 <code>&lt;video&gt;</code> 元素或新的 <code>&lt;video-js&gt;</code> 元素使用 <code>autoplay</code> 属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">autoplay</span> <span class="attr">src</span>=<span class="string">&quot;https://path/to/source.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video-js</span> <span class="attr">autoplay</span> <span class="attr">src</span>=<span class="string">&quot;https://path/to/source.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video-js</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>autoplay</code> 选项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">videojs</span>(<span class="string">&#x27;player&#x27;</span>, &#123; <span class="attr">autoplay</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="推荐做法"><a href="#推荐做法" class="headerlink" title="推荐做法"></a>推荐做法</h2><p>默认情况下，您可以遵从 Video.js 中的默认行为。如果自动播放成功，Video.js 播放器将开始播放。如果自动播放失败，Video.js 播放器的行为就像自动播放已关闭一样 - 即它将在海报图像（或黑框）上显示“大播放按钮”组件。</p>
<p>如果这对您有用，那么您的工作就完成了！</p>
<blockquote>
<p>提示：如果你希望提高自动播放的成功机会，请使用 <code>muted</code> 属性（或带有 <code>muted</code> 选项的 Video.js ）。</p>
</blockquote>
<p>除此之外，还有一些常规做法在处理自动播放时可能很有用：检测是否支持自动播放，或检测自动播放是成功还是失败。</p>
<h3 id="检测自动播放支持"><a href="#检测自动播放支持" class="headerlink" title="检测自动播放支持"></a>检测自动播放支持</h3><p>与检测自动播放请求的成功或失败类似，在创建播放器之前在浏览器上执行自动播放功能检测可能很有用。在这些情况下， <a href="https://github.com/video-dev/can-autoplay">can-autoplay</a> 库是最佳解决方案。它提供了与本机方法 <code>player.play()</code> 类似的基于 <code>Promise</code> 的 API：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">canAutoplay.<span class="title function_">video</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">result</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// Can autoplay</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Can not autoplay</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="编程实现自动播放和成功-x2F-失败检测"><a href="#编程实现自动播放和成功-x2F-失败检测" class="headerlink" title="编程实现自动播放和成功&#x2F;失败检测"></a>编程实现自动播放和成功&#x2F;失败检测</h3><p>对于那些关心自动播放请求是否成功的人，谷歌和苹果都建议采用同样的做法来检测自动播放成功或拒绝：侦听 <code>player.play()</code> 方法返回的 <code>Promise</code>（在支持它的浏览器中）以确定自动播放是否成功。</p>
<p>这可以与 <code>autoplay</code> 属性&#x2F;选项结合使用，也可以通过调用 <code>player.play()</code> 以编程方式执行，但我们建议完全避免使用 <code>autoplay</code> 属性&#x2F;选项，并以编程方式请求自动播放：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video-js</span> <span class="attr">id</span>=<span class="string">&quot;player&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://path/to/source.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video-js</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> player = <span class="title function_">videojs</span>(<span class="string">&#x27;player&#x27;</span>);</span><br><span class="line"></span><br><span class="line">player.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> promise = player.<span class="title function_">play</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (promise !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    promise</span><br><span class="line">      .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// Autoplay started!</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="comment">// Autoplay was prevented.</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：请务必了解，使用此方法，Video.js 的 <code>player.autoplay()</code> 方法将返回 <code>undefined</code> 或 <code>false</code>。如果您希望用户或集成商依赖此方法，请考虑以下部分。</p>
</blockquote>
<h3 id="使用-autoplay-属性-x2F-选项进行编程实现自动播放"><a href="#使用-autoplay-属性-x2F-选项进行编程实现自动播放" class="headerlink" title="使用 autoplay 属性&#x2F;选项进行编程实现自动播放"></a>使用 <code>autoplay</code> 属性&#x2F;选项进行编程实现自动播放</h3><p>构建供其他人使用的播放器时，您可能并不总是能够控制您的用户是否在其播放器实例中包含 <code>autoplay</code> 属性&#x2F;选项。值得庆幸的是，将其与编程自动播放相结合似乎不会对播放行为产生重大影响。</p>
<p>根据我们的实验，即使浏览器处理了实际的自动播放操作，在开始播放（或播放失败）后调用 <code>player.play()</code> 似乎也不会导致当前浏览器在 Chrome 或 Firefox 中触发额外的”播放”事件。似乎每次调用 <code>player.play()</code> 并且自动播放失败时，Safari 11.1 确实会触发“播放”和“暂停”事件。</p>
<p>不过，如果您具有完全控制权，<strong>我们建议您完全避免使用自动播放属性&#x2F;选项，并以编程方式请求自动播放。</strong></p>
<blockquote>
<p>注意：即使将 <code>autoplay</code> 属性&#x2F;选项与 <code>player.autoplay()</code> 编程自动播放一起使用，该方法也会返回 <code>undefined</code>，直到玩家准备就绪。</p>
</blockquote>
<h3 id="示例用例"><a href="#示例用例" class="headerlink" title="示例用例"></a>示例用例</h3><p>在 Brightcove，我们为改善基于 Video.js 的播放器的用户体验所做的一件事是隐藏请求自动播放的玩家的“大播放按钮”，直到自动播放成功或失败。这可以防止在自动播放启动之前“大播放按钮”在播放器上闪烁片刻的周期性情况。</p>
<p>虽然由于播放器的具体情况，我们的实际实现更加复杂，但它的要点与这个<a href="https://jsbin.com/quqodek/edit?html,js,output">函数式 JSBin 演示</a> 相同。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>代码中可能存在与自动播放是否成功相关的决策点;然而，现实是，在此之前的所有段落都归结为一个基本的概念：</p>
<p><strong>切勿假设您的自动播放请求会成功</strong>。</p>
<p>记住这一点，你就是金子。即使浏览器完全停止允许自动播放，我们也希望推荐这种方法在某种程度上是面向未来的。</p>
]]></content>
      <tags>
        <tag>Video.js</tag>
        <tag>视频</tag>
        <tag>自动播放</tag>
      </tags>
  </entry>
</search>
